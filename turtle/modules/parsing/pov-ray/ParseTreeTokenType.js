const typeNames = [];

export class ParseTreeTokenType {
	static getNameFor(type) {
		return typeNames[type];
	}
};

[
'ANGLE_LEFT_BRACKET',
'ANGLE_RIGHT_BRACKET',
'ARG_LIST',
'ARRAY',
'BINARY_OPERATOR',
'BREAK',
'CASE',
'CODE_BLOCK',
'COLON',
'COMMA',
'CONDITIONAL_TERNARY',
'CURLY_BRACKET_EXPRESSION',
'CURLY_LEFT_BRACKET',
'CURLY_RIGHT_BRACKET',
'CURVED_BRACKET_EXPRESSION',
'CURVED_LEFT_BRACKET',
'CURVED_RIGHT_BRACKET',
'DECLARE',
'DICTIONARY',
'ELSE', // for #else used in if-else statements
'END',
'EXPRESSION_DOT_PROPERTY',
'DECLARE',
'DOT',
'DOT_PROPERTY',
'EXPRESSION_INDEX_EXPRESSION',
'FUNCTION',
'IDENTIFIER',
'IF',
'IFDEF',
'IFNDEF',
'INSTRUCTION_LIST',
'KEY_VALUE_PAIR',
'LOCAL',
'MACRO',
'MIXED',
'MULTI_LINE_COMMENT',
'NUMBER_LITERAL',
'PARAMETERIZED_GROUP',
'QUESTION_MARK',
'RANGE',
'SEMICOLON',
'SINGLE_LINE_COMMENT',
'SQUARE_BRACKET_EXPRESSION',
'SQUARE_LEFT_BRACKET',
'SQUARE_RIGHT_BRACKET',
'STRING_LITERAL',
'SWITCH',
'TREE_ROOT',
'UNARY_OPERATOR',
'UNMATCHED',
'VECTOR_EXPRESSION',
'WHILE',
].forEach(function(key, index) {
	index++;
	ParseTreeTokenType[key] = index;
	typeNames[index] = key;
});