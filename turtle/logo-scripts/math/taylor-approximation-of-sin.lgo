; This is explained as an example of Taylor approximation at:
; https://en.wikipedia.org/wiki/Taylor_series#Approximation_error_and_convergence
; As :limit approaches infinity, 
;  (sinApproximationAt :xRadians :limit) approaches the
; value of (radSin :xRadians).
;
; The radSin and sin commands are far faster and very accurate but 
; this approximation can help you think of approximations for 
; other mathematical expressions that would be more practically useful.
; The plots are also an interesting visual pattern that essentially transitions from 
; a parabola to cubic to quartic, and toward the exactly duplicated and 
; infinite repetition of a sin wave.
to sinApproximationAt :xRadians :limit
	localmake "result :xRadians
	for ["i 3 2 * :limit 2] [
		localmake "val (power :xRadians :i) / factorial :i
		ifelse 0 = remainder :i - 1 4 [
			localmake "result :result + :val
		] [
			localmake "result :result - :val

		]
	]
	output :result
end

; Inspired by
; https://en.wikipedia.org/wiki/File:Sintay_SVG.svg
; This is graphing a Taylor approximation of the radSin function.
to graphSinApproximations :height
	localmake "oldPos pos
	localmake "oldHeading heading
	localmake "colors ["red "blue "green "brown "navy "black "yellow "lime]
	localmake "numSamples 100 
	; Increase numSamples to get smoother, more accurate curves.
	; The main drawback is that the drawing will become slower.

	localmake "width :height * 2
	localmake "yScale :height / 25
	localmake "xStep :width / :numSamples
	stripes :width :height * 0.002 ["black]
	setPenSize :height * 0.005
	for ["limit 0 10] [
		localmake "colorIndex 1 + remainder :limit count :colors
		ifelse :limit = 0 [
			setPenColor "#ccc ; special color for radSin plot
		] [
			setPenColor item :colorIndex :colors
		]
		jumpLeft :width / 2
		localmake "prevPlotted? false
		repeat :numSamples [
			localmake "pos1 pos
			localmake "angleRadians 30 * (repRatio - 0.5)
			ifelse :limit = 0 [
				localmake "y radSin :angleRadians
			] [
				localmake "y sinApproximationAt :angleRadians :limit
			]
			localmake "y :yScale * :y
			ifelse (abs :y) < :height / 2 [
				jumpForward :y
				circle 0.1
				localmake "pos2 pos
				if :prevPlotted? [
					setHeading towards :prevP
					forward distance :prevP
				]
				localmake "prevPlotted? true
				localmake "prevP :pos2
				jumpTo :pos1
			] [
				localmake "prevPlotted? false
			]
			setHeading :oldHeading
			jumpRight :xStep
		]
		jumpTo :oldPos
	]
end

graphSinApproximations 100