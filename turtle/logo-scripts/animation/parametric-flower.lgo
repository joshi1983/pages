; Inspired by
; https://www.pinterest.ca/pin/75364993757667153/
; Parametric equations are shown in the image.
; 

make "timeRatio animation.time / animation.duration
make "timeRatio interpolateRatio easeInOut :timeRatio
make "offset :timeRatio * 1.04
make "factor1 9.52 + :offset
make "factor2 4.8
to tToPoint :t
	output [
		radSin (:factor1 * :t)
		(power (radCos :factor1 * :t) 4) * radSin (radSin (:factor2 * :t))
	]
end

to transformUsingTurtleState :p
	localmake "oldPos pos
	jumpLeft first :p
	jumpForward last :p
	localmake "result xyCor
	jumpTo :oldPos
	output :result
end

to drawPetal :scale
	localmake "oldState turtleState
	setPenSize :scale * 0.007
	setPenColor "#500
	jumpForward :scale
	localmake "oldPos pos
	right 90
	localmake "oldHeading heading
	; Increase the 3000 to get a smoother, more accurate curve.
	; Decrease to sacrifice accuracy for execution speed and fewer line segments.
	repeat 3000 [
		localmake "t 16 * (repRatio - 0.5)
		localmake "p vectorScale (tToPoint :t) :scale
		setHeading :oldHeading
		jumpTo :oldPos
		localmake "p transformUsingTurtleState :p
		ifelse 1=repcount [
			jumpTo :p
		] [
			jumpTo :prevPos
			setHeading towards :p
			forward distance :p
		]
		localmake "prevPos pos
	]
	setTurtleState :oldState
end

to drawParametricFlower :scale
	repeat 4 [
		drawPetal :scale
		right 360 / 4
	]
end

drawParametricFlower 100

to animation.snapshotstyle
	localmake "result createPList
	setProperty "result "zoom.scale 1.75
	output :result
end

to animation.setup
	localmake "minutes 0
	localmake "seconds 5
	; Edit this if you want to change the length of your animation.
	localmake "result createPList
	setProperty "result "duration :minutes * 60 + :seconds
	output :result
end