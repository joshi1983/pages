to drawRadiatingSillouette :radius
	localmake "oldState turtleState
	localmake "oldHeading heading
	localmake "numLines 64
	localmake "spreadAngle 2
	localmake "center pos
	setPenSize 0
	setFillColor "black
	repeat :numLines [
		setHeading :oldHeading + :spreadAngle / 2 + repcount * 360 / :numLines
		polyStart
		jumpForward :radius
		left 90
		arcLeft :spreadAngle :radius
		polyEnd
		jumpTo :center
	]
	setTurtleState :oldState
end

to drawAnimatedPattern :radius :timeRatio
	localmake "oldState turtleState
	localmake "center pos
	localmake "oldHeading heading
	localmake "numArcs 500
	setPenSize :radius * 0.01
	repeat :numArcs [
		setHeading :oldHeading + 90
		jumpTo :center
		localmake "angle mix 90 -90 repRatio
		localmake "radius1 :radius * tan 180 * :timeRatio + :angle
		localmake "colorAngle repRatio * 360 * 8
		localmake "ratio (1 + sin :colorAngle) / 2
		setPenColor mix "#004 "#4af :ratio
		if :radius1 < 0 [
			right 180
			localmake "radius1 -:radius1
		]
		; We want to avoid problems with 0 and when radius1 is too large.
		if and :radius1 <> 0 :radius1 < 100 * :radius [
			ifelse :radius1 < :radius / 2 [
				circleLeft :radius1
			] [
				; confine the lines to the large circle.
				localmake "angle getArcLeftAngleToCircle :radius1 :center :radius
				arcLeft :angle :radius1
				right 180
				arcRight :angle * 2 :radius1
			]
		]
	]
	setTurtleState :oldState
end

; Inspired by a device from Simon Fielder.
to drawLightCircle :height :timeRatio
	localmake "radius :height / 2
	drawAnimatedPattern :radius :timeRatio
	drawRadiatingSillouette :radius
end

setScreenColor "black
drawLightCircle 100 animation.timeRatio

to animation.snapshotstyle
	output createPList2 [
		["zoom.scale 6]
	]
end

to animation.setup
	localmake "minutes 0
	localmake "seconds 5
	; Edit this if you want to change the length of your animation.
	output createPList2 [
		["duration :minutes * 60 + :seconds]
	]
end