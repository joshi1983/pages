import { isMarkingEndOfToken } from
'../../../../modules/parsing/processing/scanning/isMarkingEndOfToken.js';
import { testInOutPairs } from '../../../helpers/testInOutPairs.js';

export function testIsMarkingEndOfToken(logger) {
	const cases = [
		{'inArgs': ['', '<'], 'out': false},
		{'inArgs': ['', '>'], 'out': false},
		{'inArgs': ['>', '>'], 'out': false},
		{'inArgs': ['>>', '='], 'out': false},
		{'inArgs': ['-', '1'], 'out': false},
		{'inArgs': ['-', '='], 'out': false},
		{'inArgs': ['-', '-'], 'out': false},
		{'inArgs': ['+', '='], 'out': false},
		{'inArgs': ['+', '+'], 'out': false},
		{'inArgs': ['=', '-'], 'out': true},
		{'inArgs': ['==', '-'], 'out': true},
		{'inArgs': ['=', '_'], 'out': true},
		{'inArgs': ['>', '>'], 'out': false},
		{'inArgs': ['<', '<'], 'out': false},
		{'inArgs': ['<', '='], 'out': false},
		{'inArgs': ['!', '='], 'out': false},
		{'inArgs': ['!=', '='], 'out': false},
		{'inArgs': ['!=', '0'], 'out': true},
		{'inArgs': ['!==', '0'], 'out': true},
		{'inArgs': ['!==', '='], 'out': true},
		{'inArgs': ['"', ' '], 'out': false},
		{'inArgs': ['1', '/'], 'out': true},
		{'inArgs': ['x', '_'], 'out': false},
		{'inArgs': ['x', '='], 'out': true},
		{'inArgs': ['v1', '='], 'out': true},
		{'inArgs': ['x', 'n'], 'out': false},
		{'inArgs': ['x', '0'], 'out': false},
		{'inArgs': ['=', 'n'], 'out': true},
		{'inArgs': ['=', '0'], 'out': true},
		{'inArgs': ['"hello"', ','], 'out': true},
		{'inArgs': ['"hello world"', ','], 'out': true},
		{'inArgs': ['"hello\\"world"', ','], 'out': true},
		{'inArgs': ['"hello\\"', 'w'], 'out': false},
		{'inArgs': ['1', '2'], 'out': false},
		{'inArgs': ['1', '+'], 'out': true},
		{'inArgs': ['1', '-'], 'out': true},
		{'inArgs': ['/', '/'], 'out': false},
		{'inArgs': ['/', '*'], 'out': false},
		{'inArgs': ['//', ' '], 'out': false},
		{'inArgs': ['//\n', ' '], 'out': true},
		{'inArgs': ['// hello\n', ' '], 'out': true},
		{'inArgs': ['// hello', '\n'], 'out': true},
		{'inArgs': ['.', ' '], 'out': true},
		{'inArgs': ['.', 'x'], 'out': true},
		{'inArgs': ['.', '.'], 'out': false},
	];
	testInOutPairs(cases, isMarkingEndOfToken, logger);
};