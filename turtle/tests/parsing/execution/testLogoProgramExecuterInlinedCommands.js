import { processExecuterTestCases } from './processExecuterTestCases.js';

/*
Tests various commands that are inlined in JavaScript in the directory at:
modules\parsing\compiling\instruction-list-optimization\instructions-to-JavaScript\commands

These tests depend on the compile function working properly while inlining the various calls.
*/
export function testLogoProgramExecuterInlinedCommands(logger) {
	const cases = [
	{'code': 'print and true false', 'messages': ['false']},
	{'code': 'print and true true', 'messages': ['true']},
	{'code': 'print and false false', 'messages': ['false']},
	{'code': 'print and false true', 'messages': ['false']},
	{'code': 'print count []', 'messages': ['0']},
	{'code': 'print count [1234]', 'messages': ['1']},
	{'code': 'print count "', 'messages': ['0']},
	{'code': 'print count "hi', 'messages': ['2']},
	{'code': `print count 'hello world'`, 'messages': ['11']},
	{'code': 'print createPList', 'messages': ['[]']},
	{'code': 'print createPList2 []', 'messages': ['[]']},
	{'code': 'print createPList2 [["x 4]]', 'messages': ['[x:=4]']},
	{'code': 'print createPList2 [["x 4] ["y 3]]', 'messages': ['[x:=4 y:=3]']},
	{'code': 'print empty? []', 'messages': ['true']},
	{'code': 'print empty? "', 'messages': ['true']},
	{'code': 'print empty? [3]', 'messages': ['false']},
	{'code': 'print empty? "a', 'messages': ['false']},
	{'code': 'print even? 4', 'messages': ['true']},
	{'code': 'print even? 0', 'messages': ['true']},
	{'code': 'print even? -2', 'messages': ['true']},
	{'code': 'print even? 1', 'messages': ['false']},
	{'code': 'print even? 11', 'messages': ['false']},
	{'code': 'print even? 3', 'messages': ['false']},
	{'code': 'print first [0]', 'messages': ['0']},
	{'code': 'print first "hello', 'messages': ['h']},
	{'code': 'print item 1 [0]', 'messages': ['0']},
	{'code': 'print item 1 "hello', 'messages': ['h']},
	{'code': 'print item 2 "hello', 'messages': ['e']},
	{'code': 'print item 3 "hello', 'messages': ['l']},
	{'code': 'print []', 'messages': ['[]']},
	{'code': 'print last [3]', 'messages': ['3']},
	{'code': 'print last [2 3]', 'messages': ['3']},
	{'code': 'print last "ab', 'messages': ['b']},
	{'code': 'print (list)', 'messages': ['[]']},
	{'code': 'print (list 3)', 'messages': ['[3]']},
	{'code': 'print (list 1 2 3)', 'messages': ['[1 2 3]']},
	{'code': 'print list? []', 'messages': ['true']},
	{'code': 'print list? [4]', 'messages': ['true']},
	{'code': 'print list? "h', 'messages': ['false']},
	{'code': 'print list? 4', 'messages': ['false']},
	{'code': 'print list? true', 'messages': ['false']},
	{'code': 'print list? createPList', 'messages': ['false']},
	{'code': 'print list? transparent', 'messages': ['false']},
	{'code': 'print max 1 3', 'messages': ['3']},
	{'code': 'print max 3 2', 'messages': ['3']},
	{'code': 'print (max 3 2 9)', 'messages': ['9']},
	{'code': 'print (max 3 9 2)', 'messages': ['9']},
	{'code': 'print min 1 3', 'messages': ['1']},
	{'code': 'print min 3 2', 'messages': ['2']},
	{'code': 'print (min 3)', 'messages': ['3']},
	{'code': 'print (min 3 2 9)', 'messages': ['2']},
	{'code': 'print (min 3 2 -9)', 'messages': ['-9']},
	{'code': 'print not true', 'messages': ['false']},
	{'code': 'print not false', 'messages': ['true']},
	{'code': 'print odd? 3', 'messages': ['true']},
	{'code': 'print odd? 1', 'messages': ['true']},
	{'code': 'print odd? -1', 'messages': ['true']},
	{'code': 'print odd? 0', 'messages': ['false']},
	{'code': 'print odd? 10', 'messages': ['false']},
	{'code': 'print odd? 2', 'messages': ['false']},
	{'code': 'print or true true', 'messages': ['true']},
	{'code': 'print or true false', 'messages': ['true']},
	{'code': 'print or false true', 'messages': ['true']},
	{'code': 'print product 2 3', 'messages': ['6']},
	{'code': 'print (product 3 2 -9)', 'messages': ['-54']},
	{'code': 'print remainder 5 2', 'messages': ['1']},
	{'code': 'print remainder 6 2', 'messages': ['0']},
	{'code': 'print remainder 10 3', 'messages': ['1']},
	{'code': 'print remainder 11 3', 'messages': ['2']},
	{'code': 'print string? "4', 'messages': ['true']},
	{'code': 'print string? "hi', 'messages': ['true']},
	{'code': 'print string? 3', 'messages': ['false']},
	{'code': 'print string? []', 'messages': ['false']},
	{'code': 'print string? createPList', 'messages': ['false']},
	{'code': 'print string? true', 'messages': ['false']},
	{'code': 'print (sum 3)', 'messages': ['3']},
	{'code': 'print sum 1 3', 'messages': ['4']},
	{'code': 'print (sum 3 2 -9)', 'messages': ['-4']},
	];
	processExecuterTestCases(cases, logger);
};