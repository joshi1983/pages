import { decodeBI_RLE4 } from
'../../../../modules/components/image-formats/bitmap/decodeBI_RLE4.js';
import { processDecodeTestCases } from
'./processDecodeTestCases.js';

export function testDecodeBI_RLE4(logger) {
	const cases = [
	// some test cases from:
	// https://komh.github.io/os2books/os2tk45/mmref3/2264_L4_Compressionof4BitPer.html
	{'arr': [0x04, 0x78], 'bytesPerLine': 2, 'height': 1,
	'out': [0x78, 0x78]},
	{
		'arr': [0x00, 0x02, 0x05, 0x01],
		'bytesPerLine': 3, 'height': 2,
	'out': [0x00, 0x00, 0x00,
	0x00, 0x00, 0x00]
	},
	{
		'arr': [0x09, 0x1E],
		'bytesPerLine': 5, 'height': 1,
		'out': [0x1E, 0x1E, 0x1E, 0x1E, 0x10]
	},
	{'arr': [0, 1], 'bytesPerLine': 1, 'height': 1,
	'out': [0]},

	//A lot of these test cases are adapted from examples at:
	//https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/73b57f24-6d78-4eeb-9c06-8f892d88f1ab
	{'arr': [0, 0], 'bytesPerLine': 4, 'height': 1,
	'out': [0, 0, 0, 0]},
	{'arr': [0x03, 0x04], 'bytesPerLine': 4, 'height': 1,
	'out': [0x04, 0x0, 0, 0]},
	{'arr': [0x05, 0x06], 'bytesPerLine': 4, 'height': 1,
	'out': [0x06, 0x06, 0x00, 0x00]},
	{'arr': [0x05, 0x06], 'bytesPerLine': 3, 'height': 1,
	'out': [0x06, 0x06, 0x00]},
	{'arr': [0x03, 0x04, 0x05, 0x06], 'bytesPerLine': 4, 'height': 1,
	'out': [0x04, 0x00, 0x60, 0x60]
	},
	{'arr': [0x03, 0x04, 0x05, 0x06, 0x00],
	'bytesPerLine': 4,
	'height': 1,
	'out': [0x04, 0x00, 0x60, 0x60]},
	{'arr': [0x04, 0x78], 'bytesPerLine': 4, 'height': 1,
	'out': [0x78, 0x78, 0, 0]},
	{'arr': [0x03, 0x04, 0x05, 0x06, 0x00, 0x06, 0x45, 0x56, 0x67, 0x00, 0x04, 0x78],
	'bytesPerLine': 12,
	'height': 1,
	'out': [0x04, 0x00, 0x60, 0x60, 0x45, 0x56, 0x67, 0x78, 0x78, 0x00, 0x00, 0x00]},
	{
		'arr': [0x03, 0x04, 0x05, 0x06, 0x00, 0x06, 0x45, 0x56, 0x67, 0x00, 0x04, 0x78, 0x00, 0x02, 0x05, 0x01],
		'bytesPerLine': 12,
		'height': 2,
		'out': [
			0x04, 0x00, 0x60, 0x60, 0x45, 0x56, 0x67, 0x78, 0x78, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		]
	},
	{
		'arr': [0x03, 0x04, 0x05, 0x06, 0x00, 0x06, 0x45, 0x56, 0x67, 0x00, 0x04, 0x78, 0x00, 0x02, 0x05, 0x01,
0x04, 0x78, 0x00, 0x00, 0x09, 0x1E, 0x00, 0x01],
		'bytesPerLine': 16,
		'height': 4,
		'out': [
0x04, 0x00, 0x60, 0x60, 0x45, 0x56, 0x67, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x87, 0x80, 0x00, 0x00,
0x1E, 0x1E, 0x1E, 0x1E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
		]
	}
	];
	processDecodeTestCases(cases, decodeBI_RLE4, logger);
};