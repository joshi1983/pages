[
{
	"name": "~",
	"reason": "The ~ symbol is used by some versions of Logo to continue a line or include line breaks in string literals.  You can instead use long string literals to include line breaks.  Just use apostrophe instead of the usual quote character such as <code>print 'line1 part<br>line 2'</code>."
},
{
	"name": "{",
	"reason": "The { symbol is used by some versions of Logo to represent array literals.  You can instead use list literals.  Just use square brackets instead of {} like print [1 2 3]."
},
{
	"name": "}",
	"reason": "The } symbol is used by some versions of Logo to represent array literals.  You can instead use list literals.  Just use square brackets instead of {} like print [1 2 3]."
},
{
	"name": "btouch",
	"reason": "WebLogo does not support btouch because it is related to the turtle physically touching something behind it.  Nothing can ever physically touch the turtle in WebLogo."
},
{
	"name": "build",
	"reason": "If you want to build a procedure, open the code editor.  You can click Edall button to open it.  Build is a command in <a href=\"https://en.wikipedia.org/wiki/RM_Nimbus\" target=\"_blank\">RM Nimbus</a> Logo interpreter."
},
{
	"name": "bye",
	"reason": "Instead of using the bye command, close your web browser.  WebLogo can not do that for you because JavaScript can't control that aspect of your web browser.",
	"autoRemove": true
},
{
	"name": "catch",
	"reason": "Instead of using catch and throw, use <span class=\"command\">assert</span> and <span class=\"command\">stop</span>.  <span class=\"command\">assert</span> is a good way to check assumptions for debugging, troubleshooting purposes. <span class=\"command\">stop</span> is a good way to stop running a procedure."
},
{
	"name": "clearpalette",
	"reason": "Instead of using a palette, use the millions of available colours in your modern computer screen.  Colour palettes were popular in the 1970's through to early 1990's but aren't needed with modern screens that support 24-bit and 32-bit colours independently in every pixel."
},
{
	"name": "cleartext",
	"reason": "Instead of using the clearText command, click the clear text button.  It is on the far right from the 'Commander' title.  We want the user interface to have exclusive control over clearing those messages instead of letting the code clear its own messages."
},
{
	"name": "ct",
	"reason": "Instead of using the ct command, click the clear text button.  It is on the far right from the 'Commander' title.  We want the user interface to have exclusive control over clearing those messages instead of letting the code clear its own messages."
},
{
	"name": "define",
	"reason": "Instead of using define to define a procedure, use the <span class=\"command\">to command</span>."
},
{
	"name": "delay",
	"reason": "Some Logo interpreters support a delay command to pause the running program for a given interval.  This can be useful for animations in other Logo programming tools.  WebLogo does not support delay because it has a different way of expressing animations for more versatility.  See the <span class=\"command\">animation.time command</span> and animation topic in the tutorial."
},
{
	"name": "edall",
	"reason": "Instead of using the edall command, click the Edall button or File -&gt; Edit menu item.  Some Logo interpreters let the edall command open a code editor but WebLogo doesn't treat it as a command because the same can be achieved other ways in the user-interface.  To ease transition for those familiar with other Logo interpreters, the code editor can be opened by running 'edall' in the Commander but edall is not supported in any Logo scripts.",
	"autoRemove": true
},
{
	"name": "else",
	"reason": "Instead of 'else' along with an if-statement, use <span class=\"command\">ifelse</span>."
},
{
	"name": "endif",
	"reason": "There is no need to mark the end of an instruction list for an <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> using 'endif'.  You must put your instructions in square brackets so ']' marks the end of the instruction list."
},
{
	"name": "erase",
	"reason": "Instead of using the erase command to remove a procedure, open the code editor and remove the procedure from the code.  Some Logo interpreters like Commodore Logo and TI Logo had an erase command for removing a procedure.  The command was more useful in this old software partly because computing resources and screen resolution were far more limited in the 1980's than they are now.  Typing the command required very little screen space but it required people to mentally picture and remember all the procedures they had.  WebLogo makes the experience a lot easier by listing all the procedures and code together in one place and highlighting most new problems immediately as you edit the code."
},
{
	"name": "fill",
	"reason": "Instead of using the fill command, use filled shapes such as <span class=\"command\">circle</span> and commands like <span class=\"command\">setfillcolor</span>."
},
{
	"name": "flip",
	"reason": "Instead of using the flip command, call <span class=\"command\">right</span> 180 or <span class=\"command\">left</span> 180.  flip is a name mentioned by <a href=\"https://tuxsturtle.sourceforge.net/\" target=\"_blank\">Tux Turtle</a> for flipping the turtle to the face opposite direction.  WebLogo isn't supporting it as a command because the workaround is simple enough and we don't want to add commands without a good reason.  Every command is a little extra complexity and something WebLogo's users may feel a little pressure to learn so we don't want to add just any commands we find mentioned in other Logo development tools.  You can define a procedure called flip to rotate 180 degrees, if you like.  Calling flip would then be exactly like having it as a command."
},
{
	"name": "floodcolor",
	"reason": "Instead of using the floodcolor command, call <span class=\"command\">fillColor</span>.  WebLogo does not support flood filling but does support filled shapes with commands like <span class=\"command\">circle</span>, <span class=\"ellipse\">ellipse</span>.  WebLogo also lets you fill 2D graphics by wrapping path-related sequences with <span class=\"command\">polyStart</span> and <span class=\"command\">polyEnd</span>."
},
{
	"name": "freeze",
	"reason": "Instead of using the freeze command to stop turtle's spite/graphic from moving, you could hide the turtle using <span class=\"command\">hideTurtle</span>.  The freeze command is available in TI Logo on the <a href=\"https://en.wikipedia.org/wiki/TI-99/4A\" target=\"_blank\">Ti-99/4a Computer</a>.",
	"autoRemove": true
},
{
	"name": "ftouch",
	"reason": "WebLogo does not support btouch because it is related to the turtle physically touching something in front of it.  Nothing can ever physically touch the turtle in WebLogo."
},
{
	"name": "fullscreen",
	"reason": "Instead of using the fullscreen command, resize the Commander by dragging the word 'Commander' up or down.  You can completely hide the commander by unchecking <strong>Debugging</strong> -&gt; <strong>Show Commander</strong>. You can also maximize the code editor by hitting 'Edall' button and clicking the little maximize button in the upper-right corner.",
	"autoRemove": true
},
{
	"name": "go",
	"reason": "<p>Instead of using the go command, use something else.</p><p>If you want to set the coordinates of the turtle, use commands like <span class=\"command\">setpos</span>(might draw trail) or <span class=\"command\">jumpTo</span>(never draws trail).</p><p>If you want to jump or go immediately to a line of code, there is always a better alternative than jumping immediately to an arbitrary label in your code.  Think of a way to do what you want using structured programming alternatives such as <span class=\"command\">if</span>, <span class=\"command\">ifelse</span>, loops like <span class=\"command\">repeat</span>, <span class=\"command\">for</span>, <span class=\"command\">while</span>, or calling a procedure instead of jumping to arbitrary lines of code.  goto-like statements were popular in the 1970's and 1980's in languages like Basic and Logo but they made code a lot harder to read, troubleshoot, and maintain.  As I write this in 2023, the only good place to jump to arbitrary labels or line numbers in code is with <a href=\"https://en.wikipedia.org/wiki/Assembly_language\" target=\"_blank\">assembly</a> or <a href=\"https://en.wikipedia.org/wiki/Machine_code\" target=\"_blank\">machine code</a> programming where flow-control structures like if, ifelse, loops... are completely unavailable.</p>"
},
{
	"name": "goback",
	"reason": "Instead of goback to go back to a remembered position, store a previous location using a variable like <code>make \"oldPos pos</code> and then restore it using <span class=\"command\"setPos</span> :oldPos."
},
{
	"name": "goto",
	"reason": "Instead of using the goto command, use something else.  <p>If you want to jump to other sections within a procedure like the goto command from FMS Logo, use commands like <span class=\"command\">if</span>, <span class=\"command\">ifelse</span> or a loop such as <span class=\"command\">repeat</span>, <span class=\"command\">for</span>, <span class=\"command\">while</span>.  Most modern programming languages don't support anything like goto because it makes the flow of execution difficult to follow.</p><p>If you want to set the coordinates of the turtle, use commands like <span class=\"command\">setpos</span> or <span class=\"command\">jumpTo</span></p>"
},
{
	"name": "halt",
	"reason": "Instead of using the halt command, click the Pause button.  Some Logo interpreters support a halt command which does nothing outside of a commander input.  WebLogo does not support the halt command because the same behaviour can be triggered through the user-interface without supporting the command."
},
{
	"name": "hitoot",
	"reason": "Some versions of Logo use the hitoot to play a horn sound on a robotic turtle.  WebLogo doesn't support hitoot because there is no horn or sound for the turtle."
},
{
	"name": "iff",
	"reason": "<p>iff is short for iffalse in some Logo interpreters.  Instead of using the iffalse command, use <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> and specify the tested condition within it.  You could wrap the tested condition in <span class=\"command\">not</span> (...previously tested expression) or find another way to negate its old value.</p><p>Iffalse is a command supported by some Logo interpreters where a test command run previously would express the if-condition.</p>"
},
{
	"name": "iffalse",
	"reason": "<p>Instead of using the iffalse command, use <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> and specify the tested condition within it.  You could wrap the tested condition in <span class=\"command\">not</span> (...previously tested expression) or find another way to negate its old value.</p><p>Iffalse is a command supported by some Logo interpreters where a test command run previously would express the if-condition.</p>"
},
{
	"name": "ift",
	"reason": "<p>ift is short for iftrue in some Logo interpreters.  Instead of using the ift command, use <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> and specify the tested condition within it.</p><p>Iftrue is a command supported by some Logo interpreters where a test command run previously would express the if-condition.</p>"
},
{
	"name": "iftrue",
	"reason": "<p>Instead of using the iftrue command, use <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> and specify the tested condition within it.</p><p>Iftrue is a command supported by some Logo interpreters where a test command run previously would express the if-condition.</p>"
},
{
	"name": "let",
	"reason": "Instead of using the let command to assign a value to a variable, use <span class=\"command\">make</span> or <span class=\"command\">localmake</span>."
},
{
	"name": "listtoarray",
	"reason": "Instead of using the listtoarray command, just keep the value as a list.  list in WebLogo will do everything you would otherwise do with an array."
},
{
	"name": "loadpict",
	"reason": "Instead of using the loadpict command, call <span class=\"command\">image</span> or <span class=\"command\">imageAlpha</span> to show an image."
},
{
	"name": "local",
	"reason": "Instead of using the local command, choose an initial value and call <span class=\"command\">localmake</span>.  Some Logo interpreters support a local command which declares local variables without indicating an initial value.  Letting variables exist without an associated value is different from how variables work in most other programming languages, though.  Values like null and undefined are supported by other languages but they have big drawbacks and lead to less maintainable code.  If you just want other programmers to understand that a variable of a certain name is local, you could write a comment instead and use <span class=\"command\">localmake</span> instead of <span class=\"command\">make</span> to assign values to it."
},
{
	"name": "mousepos",
	"reason": "mousepos is not supported because WebLogo programs are for drawing and not for collecting user input or reacting to user input."
},
{
	"name": "name",
	"reason": "Instead of using the name command to assign a value to a variable, use <span class=\"command\">make</span> or <span class=\"command\">localmake</span>."
},
{
	"name": "next",
	"reason": "Instead of using the next command to mark the end of a block, use square brackets []. Learn how <span class=\"command\">repeat</span> loops are implemented by clicking on <span class=\"command\">repeat</span>."
},
{
	"name": "nofence",
	"reason": "You don't need to call nofence.  WebLogo never restricts/fences the turtle to stay visible.  There is no fence.  Buttons will show in the lower-right of the graphics area if you want to center the camera on the current turtle position.  nofence is a command from RM Logo, a Logo interpreter for the <a href=\"https://en.wikipedia.org/wiki/RM_Nimbus\" target=\"_blank\">RM Nimbus personal computer</a>."
},
{
	"name": "north",
	"reason": "Instead of using the north command to restore the turtle's original heading, use <span class=\"command\">setHeading</span> 0."
},
{
	"name": "noyield",
	"reason": "Noyield in FMSLogo prevents input events from being processed while a sequence of instructions runs for a small increase in speed.  WebLogo does not allow for this since it locks up the user-interface and WebLogo's Maximum Speed mode is pretty fast.",
	"autoRemove": true
},
{
	"name": "pause",
	"reason": "Instead of using pause to stop execution and wait for the user's input to continue, add a <span data-helpid=\"breakpoint\">breakpoint</span> to the line of code you want to pause at."
},
{
	"name": "penerase",
	"reason": "Instead of using penerase command to erase a mistake or erase parts of a drawing, clear the whole drawing with <strong>Drawing</strong> -&gt; <strong>New</strong> or the <span class=\"command\">clearScreen command</span>.  You could also set the pen color to match the screen color with something like <code>setPenColor \"white</code> if the screen color happens to be white.  You could use <code>setPenColor screenColor</code> too.  Note that if screenColor is transparent, setPenColor screenColor will make the pen not draw anything as the turtle moves.  A transparent pen is a lot like having the pen up.  If you want to leave small areas transparent, you'll have to draw around those small areas.  The <span class=\"command\">polyStart</span> command and its examples can help you draw paths and filled shapes around areas you want to leave transparent."
},
{
	"name": "px",
	"reason": "px is short for penErase in some Logo interpreters.  Instead of using penerase command to erase a mistake or erase parts of a drawing, clear the whole drawing with <strong>Drawing</strong> -&gt; <strong>New</strong> or the <span class=\"command\">clearScreen command</span>.  You could also set the pen color to match the screen color with something like <code>setPenColor \"white</code> if the screen color happens to be white.  You could use <code>setPenColor screenColor</code> too.  Note that if screenColor is transparent, setPenColor screenColor will make the pen not draw anything as the turtle moves.  A transparent pen is a lot like having the pen up.  If you want to leave small areas transparent, you'll have to draw around those small areas.  The <span class=\"command\">polyStart</span> command can help you draw paths and filled shapes around areas you want to leave transparent."
},
{
	"name": "remember",
	"reason": "Instead of using remember to store a current position, assign it to a variable using code like <code>make \"oldPos pos</code>.  You can then restore the location later using code like <span class=\"command\">setPos</span> :oldPos.  Consider using <span class=\"command\">turtleState</span> and <span class=\"command\">setTurtleState</span> if you want to remember and restore other properties of the turtle."
},
{
	"name": "run",
	"reason": "Instead of using run to execute an expression of instruction list, define a procedure and refer to that.  You can call a procedure or command dynamically using the <span class=\"command\">invoke command</span>.  WebLogo doesn't let you run an instruction list or expression dynamically like some other Logo interpreters because doing so tends to make code more difficult to trace, troubleshoot and validate without enough benefits to make up for that."
},
{
	"name": "setcursornowait",
	"reason": "You have no control over the mouse cursor in WebLogo because it is not important for creating a drawing or animation.  Allowing WebLogo code to control the cursor shape also takes away some of the simplicity, clarity, and recognizability of the cursor state."
},
{
	"name": "setcursorwait",
	"reason": "You have no control over the mouse cursor in WebLogo because it is not important for creating a drawing or animation.  Allowing WebLogo code to control the cursor shape also takes away some of the simplicity, clarity, and recognizability of the cursor state."
},
{
	"name": "setfloodcolor",
	"reason": "Instead of using a setfloodcolor command, use commands like <span class=\"command\">setFillColor</span> and calls to 2D shape commands like <span class=\"command\">circle</span> will fill the area inside them.  WebLogo doesn't support flood fills."
},
{
	"name": "setleft",
	"reason": "Instead of using a setleft command, use <span class=\"command\">setHeading</span> and negate the parameter.  For example, instead of setLeft :x, use setHeading -:x."
},
{
	"name": "setspeed",
	"reason": "Instead of using a setspeed command, set execution speed through the menu by clicking <strong>Debugging</strong> -&gt; <strong>Maximum Speed</strong> or some other speed from the dropdown. setspeed is a command from TI Logo which runs on the <a href=\"https://en.wikipedia.org/wiki/TI-99/4A\" target=\"_blank\">Ti 99/4a computer</a>."
},
{
	"name": "slowdown",
	"reason": "Instead of using a slowdown command, set execution speed through the Set menu.  slowdown is a command in FMSLogo but we are not supporting it because we want the graphical user-interface to have complete control execution speed.  Letting code potentially slow itself down complicates the feature needlessly.",
	"autoRemove": true
},
{
	"name": "slowdraw",
	"reason": "Instead of using a slowdraw command, set execution speed through the Set menu.  slowdraw is a command in FMSLogo but we are not supporting it because we want the graphical user-interface to have complete control execution speed.  Letting code potentially slow itself down complicates the feature needlessly."
},
{
	"name": "splitscreen",
	"reason": "Instead of using a splitscreen command, use your mouse to click on Edall button or click one of the buttons in the top-right corner of the code editor.  WebLogo will split the screen between graphic screen and code editor every time you click to rerun your program too."
},
{
	"name": "textscreen",
	"reason": "Instead of using the textscreen command, notice that you're in a web browser.  The textscreen command comes from very old Logo interpreters such as 'Turtle Graphics' from Apple 2.  The command makes no sense in modern graphics displays.",
	"autoRemove": true
},
{
	"name": "tf",
	"reason": "Instead of using the tf(turtle facts) command, click <strong>Debugging</strong> -&gt; <strong>Show Status</strong> from the menu.  You can also run <code>print turtleState</code> to see similar details about the turtle.  tf is short for 'turtle facts' in an early 1980's Logo interpreter called Dr. Logo.  The command would output a list of details about state of the turtle.  WebLogo doesn't support the tf command because WebLogo has better ways for you to see the state of the turtle, print them, or troubleshoot your programs."
},
{
	"name": "thick",
	"reason": "Instead of using the thick command, use <span class=\"command\">setPenSize</span> to set thickness of the lines drawn by the moving turtle."
},
{
	"name": "throw",
	"reason": "Instead of throw, use <span class=\"command\">assert</span> or <span class=\"command\">stop</span>.  Assert helps you test and debug your code.  Stop exits out of the current procedure.  Find other ways to prevent the exceptional situation from happening. Make sure all callers don't ask your procedure to do something that it can't.  Assert is a good way of expressing assumptions you want checked but assertion failures can't be caught and handled by your own code. in WebLogo.  Assertion failures will reflect problems you need to adjust code to prevent."
},
{
	"name": "traceback",
	"reason": "Instead of using the traceback command to look at the procedure call stack, the debugger in <strong>Debugging</strong> -&gt; <strong>Debugger</strong>.  You may also want to learn about breakpoints and the pause button to pause the running program."
},
{
	"name": "turtle",
	"reason": "Instead of using the turtle command, use <span class=\"command\">showTurtle</span> or <span class=\"command\">hideTurtle</span> to control turtle visibility.  The turtle command was used by Mattel Aquarius Logo to show or hide the turtle based on an integer parameter's value."
},
{
	"name": "wait",
	"args": [
		{"name": "durationToWait", "types": "num"}
	],
	"reason": "Some Logo interpreters support a wait command to pause the running program for a given interval.  This can be useful for animations in other Logo programming tools.  WebLogo does not support wait because it has a different way of expressing animations for more versatility.  See the <span class=\"command\">animation.time command</span> and animation topic in the tutorial.",
	"autoRemove": true
},
{
	"name": "window",
	"reason": "Some Logo interpreters support a window command to stop wrapping the drawing if the turtle goes out of the visible rectangle in the graphics screen.  WebLogo does not support window because the drawing never wraps.",
	"autoRemove": true
},
{
	"name": "yield",
	"reason": "Some Logo interpreters such as FMSLogo use yield to explicitly wait for concurrent events like keyboard or mouse inputs.  This is not needed in WebLogo.",
	"autoRemove": true
},
{
	"name": "zoom",
	"reason": "Instead of using a zoom command, use the Zoom menu or hover over the graphics screen and rotate your mouse wheel.  FMSLogo supports a zoom command but we want the user-interface to have exlusive control over zoom.  If you want code to make a drawing a different size, you can do that without changing zoom.",
	"args": [{"types": "num"}],
	"autoRemove": true
}
]