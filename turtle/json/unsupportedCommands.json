[
{
	"name": "bye",
	"reason": "Instead of using the bye command, close your web browser.  WebLogo can not do that for you because JavaScript can't control that aspect of your web browser.",
	"autoRemove": true
},
{
	"name": "cleartext",
	"reason": "Instead of using the clearText command, click the clear text button.  It is on the far right from the 'Commander' title.  We want the user interface to have exclusive control over clearing those messages instead of letting the code clear its own messages."
},
{
	"name": "ct",
	"reason": "Instead of using the ct command, click the clear text button.  It is on the far right from the 'Commander' title.  We want the user interface to have exclusive control over clearing those messages instead of letting the code clear its own messages."
},
{
	"name": "define",
	"reason": "Instead of using define to define a procedure, use the <span class=\"command\">to command</span>."
},
{
	"name": "delay",
	"reason": "Some Logo interpreters support a delay command to pause the running program for a given interval.  This can be useful for animations in other Logo programming tools.  WebLogo does not support delay because it has a different way of expressing animations for more versatility.  See the <span class=\"command\">animation.time command</span> and animation topic in the tutorial."
},
{
	"name": "edall",
	"reason": "Instead of using the edall command, click the Edall button or File -&gt; Edit menu item.  Some Logo interpreters let the edall command open a code editor but WebLogo doesn't treat it as a command because the same can be achieved other ways in the user-interface.  To ease transition for those familiar with other Logo interpreters, the code editor can be opened by running 'edall' in the Commander but edall is not supported in any Logo scripts.",
	"autoRemove": true
},
{
	"name": "else",
	"reason": "Instead of 'else' along with an if-statement, use <span class=\"command\">ifelse</span>."
},
{
	"name": "endif",
	"reason": "There is no need to mark the end of an instruction list for an <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> using 'endif'.  You must put your instructions in square brackets so ']' marks the end of the instruction list."
},
{
	"name": "fill",
	"reason": "Instead of using the fill command, use filled shapes such as <span class=\"command\">circle</span> and commands like <span class=\"command\">setfillcolor</span>."
},
{
	"name": "fullscreen",
	"reason": "Instead of using the fullscreen command, resize the Commander by dragging the word 'Commander' up or down.  You can completely hide the commander by unchecking <strong>Debugging</strong> -&gt; <strong>Show Commander</strong>. You can also maximize the code editor by hitting 'Edall' button and clicking the little maximize button in the upper-right corner.",
	"autoRemove": true
},
{
	"name": "go",
	"reason": "Instead of using the go command, use something else.  <p>If you want to set the coordinates of the turtle, use commands like <span class=\"command\">setpos</span></p>"
},
{
	"name": "goback",
	"reason": "Instead of goback to go back to a remembered position, store a previous location using a variable like <code>make \"oldPos pos</code> and then restore it using <span class=\"command\"setPos</span> :oldPos."
},
{
	"name": "goto",
	"reason": "Instead of using the goto command, use something else.  <p>If you want to jump to other sections within a procedure like the goto command from FMS Logo, use commands like <span class=\"command\">if</span>, <span class=\"command\">ifelse</span> or a loop such as <span class=\"command\">repeat</span>, <span class=\"for\">for</span>, <span class=\"command\">while</span>.  Most modern programming languages don't support anything like goto because it makes the flow of execution difficult to follow.</p><p>If you want to set the coordinates of the turtle, use commands like <span class=\"command\">setpos</span></p>"
},
{
	"name": "halt",
	"reason": "Instead of using the halt command, click the Pause button.  Some Logo interpreters support a halt command which does nothing outside of a commander input.  WebLogo does not support the halt command because the same behaviour can be triggered through the user-interface without supporting the command."
},
{
	"name": "iff",
	"reason": "<p>iff is short for iffalse in some Logo interpreters.  Instead of using the iffalse command, use <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> and specify the tested condition within it.  You could wrap the tested condition in <span class=\"command\">not</span> (...previously tested expression) or find another way to negate its old value.</p><p>Iffalse is a command supported by some Logo interpreters where a test command run previously would express the if-condition.</p>"
},
{
	"name": "iffalse",
	"reason": "<p>Instead of using the iffalse command, use <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> and specify the tested condition within it.  You could wrap the tested condition in <span class=\"command\">not</span> (...previously tested expression) or find another way to negate its old value.</p><p>Iffalse is a command supported by some Logo interpreters where a test command run previously would express the if-condition.</p>"
},
{
	"name": "ift",
	"reason": "<p>ift is short for iftrue in some Logo interpreters.  Instead of using the ift command, use <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> and specify the tested condition within it.</p><p>Iftrue is a command supported by some Logo interpreters where a test command run previously would express the if-condition.</p>"
},
{
	"name": "iftrue",
	"reason": "<p>Instead of using the iftrue command, use <span class=\"command\">if</span> or <span class=\"command\">ifelse</span> and specify the tested condition within it.</p><p>Iftrue is a command supported by some Logo interpreters where a test command run previously would express the if-condition.</p>"
},
{
	"name": "let",
	"reason": "Instead of using the let command to assign a value to a variable, use <span class=\"command\">make</span> or <span class=\"command\">localmake</span>."
},
{
	"name": "local",
	"reason": "Instead of using the local command, choose an initial value and call <span class=\"command\">localmake</span>.  Some Logo interpreters support a local command which declares local variables without indicating an initial value.  Letting variables exist without an associated value is different from how variables work in most other programming languages, though.  Values like null and undefined are supported by other languages but they have big drawbacks and lead to less maintainable code.  If you just want other programmers to understand that a variable of a certain name is local, you could write a comment instead and use <span class=\"command\">localmake</span> instead of <span class=\"command\">make</span> to assign values to it."
},
{
	"name": "next",
	"reason": "Instead of using the next command to mark the end of a block, use square brackets []. Learn how <span class=\"command\">repeat</span> loops are implemented by clicking on <span class=\"command\">repeat</span>."
},
{
	"name": "north",
	"reason": "Instead of using the north command to restore the turtle's original heading, use <span class=\"command\">setHeading</span> 0."
},
{
	"name": "noyield",
	"reason": "Noyield in FMSLogo prevents input events from being processed while a sequence of instructions runs for a small increase in speed.  WebLogo does not allow for this since it locks up the user-interface and WebLogo's Maximum Speed mode is pretty fast.",
	"autoRemove": true
},
{
	"name": "remember",
	"reason": "Instead of using remember to store a current position, assign it to a variable using code like <code>make \"oldPos pos</code>.  You can then restore the location later using code like <span class=\"command\">setPos</span> :oldPos.  Consider using <span class=\"command\">turtleState</span> and <span class=\"command\">setTurtleState</span> if you want to remember and restore other properties of the turtle."
},
{
	"name": "run",
	"reason": "Instead of using run to execute an expression of instruction list, define a procedure and refer to that.  You can call a procedure or command dynamically using the <span class=\"command\">invoke command</span>.  WebLogo doesn't let you run an instruction list or expression dynamically like some other Logo interpreters because doing so tends to make code more difficult to trace, troubleshoot and validate without enough benefits to make up for that."
},
{
	"name": "setcursornowait",
	"reason": "You have no control over the mouse cursor in WebLogo because it is not important for creating a drawing or animation.  Allowing WebLogo code to control the cursor shape also takes away some of the simplicity, clarity, and recognizability of the cursor state."
},
{
	"name": "setcursorwait",
	"reason": "You have no control over the mouse cursor in WebLogo because it is not important for creating a drawing or animation.  Allowing WebLogo code to control the cursor shape also takes away some of the simplicity, clarity, and recognizability of the cursor state."
},
{
	"name": "setfloodcolor",
	"reason": "Instead of using a setfloodcolor command, use commands like setfillcolor and calls to 2D shape commands like circle will fill the area inside them.  WebLogo doesn't support flood fills."
},
{
	"name": "setleft",
	"reason": "Instead of using a setleft command, use <span class=\"command\">setHeading</span> and negate the parameter.  For example, instead of setLeft :x, use setHeading -:x."
},
{
	"name": "slowdown",
	"reason": "Instead of using a slowdown command, set execution speed through the Set menu.  slowdown is a command in FMSLogo but we are not supporting it because we want the graphical user-interface to have complete control execution speed.  Letting code potentially slow itself down complicates the feature needlessly.",
	"autoRemove": true
},
{
	"name": "slowdraw",
	"reason": "Instead of using a slowdraw command, set execution speed through the Set menu.  slowdraw is a command in FMSLogo but we are not supporting it because we want the graphical user-interface to have complete control execution speed.  Letting code potentially slow itself down complicates the feature needlessly."
},
{
	"name": "textscreen",
	"reason": "Instead of using the textscreen command, notice that you're in a web browser.  The textscreen command comes from very old Logo interpreters such as 'Turtle Graphics' from Apple 2.  The command makes no sense in modern graphics displays.",
	"autoRemove": true
},
{
	"name": "thick",
	"reason": "Instead of using the thick command, use <span class=\"command\">setPenSize</span> to set thickness of the lines drawn by the moving turtle."
},
{
	"name": "turtle",
	"reason": "Instead of using the turtle command, use <span class=\"command\">showTurtle</span> or <span class=\"command\">hideTurtle</span> to control turtle visibility.  The turtle command was used by Mattel Aquarius Logo to show or hide the turtle based on an integer parameter's value."
},
{
	"name": "wait",
	"reason": "Some Logo interpreters support a wait command to pause the running program for a given interval.  This can be useful for animations in other Logo programming tools.  WebLogo does not support wait because it has a different way of expressing animations for more versatility.  See the <span class=\"command\">animation.time command</span> and animation topic in the tutorial."
},
{
	"name": "window",
	"reason": "Some Logo interpreters support a window command to stop wrapping the drawing if the turtle goes out of the visible rectangle in the graphics screen.  WebLogo does not support window because the drawing never wraps.",
	"autoRemove": true
},
{
	"name": "yield",
	"reason": "Some Logo interpreters such as FMSLogo use yield to explicitly wait for concurrent events like keyboard or mouse inputs.  This is not needed in WebLogo.",
	"autoRemove": true
},
{
	"name": "zoom",
	"reason": "Instead of using a zoom command, use the Zoom menu or hover over the graphics screen and rotate your mouse wheel.  FMSLogo supports a zoom command but we want the user-interface to have exlusive control over zoom.  If you want code to make a drawing a different size, you can do that without changing zoom.",
	"args": [{"types": "num"}],
	"autoRemove": true
}
]