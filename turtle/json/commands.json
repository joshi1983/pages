[
{
	"primaryName": "abs",
	"names": [],
	"hintNames": ["absolute"],
	"args": [
		{
			"name": "num1",
			"types": "num"
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Returns the <strong>abs</strong>olute value of the specified number.  In other words, this function removes the negative sign if there is one.  abs -2 returns 2.  abs 2 returns 2.",
	"testCases": [
		{"in": [0], "returnValue": 0},
		{"in": [-1], "returnValue": 1},
		{"in": [1], "returnValue": 1},
		{"in": [-4], "returnValue": 4}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "alphacolorToAlpha",
	"names": [],
	"args": [
		{
			"name": "alphacolor",
			"types": "alphacolor|transparent"
		}
	],
	"searchKeywords": [],
	"commandGroup": "color",
	"description": "<p>Returns the alpha value in the range 0 to 255 for the specified color. The alpha value could also be described as opacity.  255 represents full opacity.</p><p>You may also be interested in <span class=\"command\">colorToRed</span>, <span class=\"command\">colorToGreen</span>, and <span class=\"command\">colorToBlue</span>.</p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"testCases": [
		{"in": ["red"], "returnValue": 255},
		{"in": ["#FFff0088"], "returnValue": 255},
		{"in": ["#11ff0088"], "returnValue": 17},
		{"in": ["#00ff0088"], "returnValue": 0}
	],
	"returnTypes": "int"
},
{
	"primaryName": "and",
	"names": [],
	"hintNames": ["all", "allof", "both"],
	"args": [
		{
			"name": "bool1",
			"types": "bool"
		},
		{
			"name": "bool2",
			"types": "bool"
		}
	],
	"argCount": "?",
	"extraArgsInfo": {
		"types": "bool"
	},
	"searchKeywords": ["math", "logic", "operators"],
	"commandGroup": "math",
	"description": "Returns true if all arguments are true.  Returns false if any of the arguments are false.  See <a class=\"command\">bitAnd</a> if you want to calculate a bitwise and.",
	"testCases": [
		{"in": [false,false], "returnValue": false},
		{"in": [false, true], "returnValue": false},
		{"in": [true, false], "returnValue": false},
		{"in": [true, true], "returnValue": true}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "animation.duration",
	"names": [],
	"args": [],
	"commandGroup": "animation",
	"searchKeywords": ["animation"],
	"description": "<p>Returns the duration of the animation in seconds.</p><p>If your program defines an animation, you should have an animation.setup procedure that returns properties containing the same number but the animation.duration command will run faster and with less code.</p>",
	"testCases": [
		{"in": [], "returnValue": 10}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "animation.image",
	"names": [],
	"args": [
		{"name": "width", "types": "num", "min": 0},
		{"name": "height", "types": "num", "min": 0},
		{"name": "url", "types": "string", "format": "absoluteUrl"},
		{"name": "timeRatio", "types": "num", "min": 0, "max": 1}
	],
	"commandGroup": "turtle",
	"isAsync": true,
	"description": "<p>Adds a rasterized image to the drawing taken from the specified animation.  The animation URL could be an animated GIF.</p><p>If you want to draw an image from a static image source, consider <span class=\"command\">image</span>, or <span class=\"command\">imageAlpha</span> instead.</p><p>Note that images and animations over HTTP or HTTPS can be tainted.  You can learn more <span data-helpid=\"tainted-images\">here</span>.</p>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "animation.imageAlpha",
	"names": [],
	"args": [
		{"name": "width", "types": "num", "min": 0},
		{"name": "height", "types": "num", "min": 0},
		{"name": "url", "types": "string", "format": "absoluteUrl"},
		{"name": "alphaRatio", "types": "num", "min": 0, "max": 1},
		{"name": "timeRatio", "types": "num", "min": 0, "max": 1}
	],
	"commandGroup": "turtle",
	"isAsync": true,
	"description": "<p>Adds a rasterized image to the drawing taken from the specified animation, at specific time, and specific opacity/alpha ratio.  The animation URL could be an animated GIF.</p><p>If you want to draw an image from a static image source, consider <span class=\"command\">imageAlpha</span> instead.</p><p>If you always want 100% opacity, consider <span class=\"command\">animation.image</span></p><p>Note that images and animations over HTTP or HTTPS can be tainted.  You can learn more <span data-helpid=\"tainted-images\">here</span>.</p>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "animation.time",
	"names": [],
	"args": [],
	"commandGroup": "animation",
	"searchKeywords": ["animation"],
	"description": "<p>Returns the time in seconds into the animation.</p><p>animation.time is one of the most important commands for creating an animation in WebLogo.  An animation is nothing except a drawing that looks differently depending on time so without reading time, you just have a still image.  You can use commands like <span class=\"command\">random</span> and <span class=\"command\">pick</span> to randomize aspects of a drawing too but randomness doesn't help you make very useful animations.</p><p>See also <span class=\"command\">animation.duration</span>.</p>",
	"testCases": [
		{"in": [], "returnValue": 0}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "arc",
	"names": [],
	"args": [
		{
			"name": "angleDegrees",
			"types": "num",
			"uselessCases": [0]
		},
		{
			"name": "radius",
			"types": "num"
		}
	],
	"commandGroup": "turtle",
	"searchKeywords": ["shape"],
	"description": "Draws a circular arc with the specified radius without moving the turtle.  The arc starts in the opposite direction of the current heading and rotates clockwise to the specified angle in degrees.",
	"testCases": [
		{"in": [10, 1], "returnValues": null},
		{"in": [10, 7], "returnValues": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "arcCos",
	"names": ["acos"],
	"hintNames": ["arccosine"],
	"args": [
		{
			"name": "ratio",
			"types": "num",
			"min": -1,
			"max": 1
		}
	],
	"searchKeywords": ["cos", "math", "trig"],
	"commandGroup": "math",
	"description": "<p>Returns the inverse <span class=\"command\">cos</span> of the specified ratio.  This will only work with ratios between -1 and 1.  The result is an angle in degrees from 0 to 180.</p><p>If you want the angle in radians, see <span class=\"command\">radArcCos</span></p><p>Learn more about inverse trigonometry functions at <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Inverse_trigonometric_functions\">https://en.wikipedia.org/wiki/Inverse_trigonometric_functions</a></p>",
	"testCases": [
		{"in": [0], "returnValue": 90},
		{"in": [1], "returnValue": 0}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "arcLeft",
	"names": [],
	"hintNames": ["arcl"],
	"args": [
		{
			"name": "angleDegrees",
			"types": "num",
			"uselessCases": [0]
		},
		{
			"name": "radius",
			"types": "num",
			"errorCases": [0]
		}
	],
	"commandGroup": "turtle",
	"searchKeywords": ["left", "path", "shape"],
	"description": "Draws a circular arc that starts with the current turtle position.  Moves the turtle to the end of the arc.  If angleDegrees is negative, the arcLeft works the same as calling <span class=\"command\">arc2</span> with the angle's absolute value.  In other words, if angleDegrees is negative, arcLeft :angleDegrees :radius would do the same as <span class=\"command\">arc2</span> -:angleDegrees :radius.",
	"testCases": [
		{"in": [10, 1], "returnValues": null},
		{"in": [10, 7], "returnValues": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "arcLines",
	"names": [],
	"args": [
		{
			"name": "arcLinesInfo",
			"types": "list<list<num>>"
		},
		{
			"name": "scale",
			"types": "num",
			"errorCases": [0]
		}
	],
	"commandGroup": "turtle",
	"searchKeywords": ["path"],
	"description": "<p>Follows a path made of arcs and straight lines.  This is similar to <span class=\"command\">arcsLeft</span> except that straight lines can also be represented in arcLinesInfo.</p><p>Each pair of numbers in arcLinesInfo can represent 1 of 3 actions.</p><ol><li>A <strong>straight line</strong> is represented by a [length].</li><li>An arc is represented by [(+/- degrees left) (a non-zero positive arc radius)]</li><li>A <strong>turn left</strong> is represented by a [(+/- degrees left) 0] pair.</li></ol><p><span class=\"command\">Reverse</span> the arcLines list to change direction of the arcs and straight lines.  You can achieve another kind of reversal by negating the scale value.</p>",
	"testCases": [
		{"in": [[[1, 1]], 1], "returnValues": null},
		{"in": [[[-1, 1]], 1], "returnValues": null},
		{"in": [[[1, 0]], 1], "returnValues": null},
		{"in": [[[1]], 1], "returnValues": null},
		{"in": [[[-1]], 1], "returnValues": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "arcRight",
	"names": ["arc2"],
	"hintNames": ["arcr"],
	"args": [
		{
			"name": "angleDegrees",
			"types": "num",
			"uselessCases": [0]
		},
		{
			"name": "radius",
			"types": "num",
			"errorCases": [0]
		}
	],
	"commandGroup": "turtle",
	"searchKeywords": ["path", "right", "shape"],
	"description": "Draws a circular arc that starts with the current turtle position.  Moves the turtle to the end of the arc.  If angleDegrees is negative, the arc starts from a backward direction.",
	"testCases": [
		{"in": [10, 1], "returnValues": null},
		{"in": [10, 7], "returnValues": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "arcSin",
	"names": ["asin"],
	"hintNames": ["arcsine"],
	"args": [
		{
			"name": "ratio",
			"types": "num",
			"min": -1,
			"max": 1
		}
	],
	"searchKeywords": ["math", "sin", "trig"],
	"commandGroup": "math",
	"description": "<p>Returns the inverse <span class=\"command\">sin</span> of the specified ratio.  This will only work with ratios between -1 and 1.  The result is an angle in degrees from -90 to 90.</p><p>If you want the angle in radians, see <span class=\"command\">radArcSin</span></p><p>Learn more about inverse trigonometry functions at <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Inverse_trigonometric_functions\">https://en.wikipedia.org/wiki/Inverse_trigonometric_functions</a></p>",
	"testCases": [
		{"in": [0], "returnValue": 0},
		{"in": [1], "returnValue": 90}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "arcsLeft",
	"names": [],
	"args": [
		{
			"name": "arcsInfo",
			"types": "list<list<num>>"
		},
		{
			"name": "scale",
			"types": "num"
		}
	],
	"commandGroup": "turtle",
	"searchKeywords": ["left", "path"],
	"description": "<p>Draws and follows any number of arcs defined in the given arcsInfo.</p><p>arcsInfo is a list of pairs of numbers.  The first of the pair is the arc angle in degrees.  If the angle is positive, the arc is to the left.  If the angle is negative, the arc is to the right.  The second of the pair is a number which is multiplied by the specified scale to calculate arc radius. If the arc radius is specified as 0, no arc will be drawn and the heading will just be adjusted left or right.</p><p>If you want to include straight lines in the path, consider using <span class=\"command\">the arcLines command</span> instead.</p>",
	"testCases": [
		{"in": [[], 1], "returnValue": null},
		{"in": [[[10, 1]], 1], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "arcsRight",
	"names": [],
	"args": [
		{
			"name": "arcsInfo",
			"types": "list<list<num>>"
		},
		{
			"name": "scale",
			"types": "num"
		}
	],
	"commandGroup": "turtle",
	"searchKeywords": ["path", "right"],
	"description": "<p>Draws and follows any number of arcs defined in the given arcsInfo.</p><p>arcsInfo is a list of pairs of numbers.  The first of the pair is the arc angle in degrees.  If the angle is positive, the arc is to the right.  If the angle is negative, the arc is to the left.  The second of the pair is a number which is multiplied by the specified scale to calculate arc radius.</p><p><span class=\"command\">arcsLeft</span> is a similar command except the arc direction is reversed. If the arc radius is specified as 0, no arc will be drawn and the heading will just be adjusted left or right.</p><p>If you want to include straight lines in the path, consider using <span class=\"command\">the arcLines command</span> instead.</p>",
	"testCases": [
		{"in": [[], 1], "returnValue": null},
		{"in": [[[10, 1]], 1], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "arcTan",
	"names": ["atan"],
	"hintNames": ["arctangent"],
	"args": [
		{
			"name": "ratio",
			"types": "num"
		}
	],
	"searchKeywords": ["math", "tan", "trig"],
	"commandGroup": "math",
	"description": "<p>Returns the inverse <span class=\"command\">tan</span> of the specified ratio.  The result is an angle in degrees from -90 to 90.</p><p>If you want the angle in radians, see the <span class=\"command\">radArcTan command</span></p><p>Learn more about inverse trigonometry functions at <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Inverse_trigonometric_functions\">https://en.wikipedia.org/wiki/Inverse_trigonometric_functions</a></p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "arcTan2",
	"names": ["atan2"],
	"args": [
		{
			"name": "deltaX",
			"types": "num"
		},
		{
			"name": "deltaY",
			"types": "num"
		}
	],
	"searchKeywords": ["math", "tan", "trig"],
	"commandGroup": "math",
	"description": "<p>Returns the angle in degrees corresponding with the specified deltaX and deltaY coordinates.</p><p>If you want the angle in radians, see the <span class=\"command\">radArcTan2 command</span></p><p>Learn more about inverse trigonometry functions at <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Inverse_trigonometric_functions\">https://en.wikipedia.org/wiki/Inverse_trigonometric_functions</a></p>",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [0, 1], "returnValue": 90},
		{"in": [1, 0], "returnValue": 0}
	],
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "arrow",
	"names": [],
	"args": [
		{
			"name": "length",
			"types": "num",
			"min": 0
		},
		{
			"name": "headAngleDegrees",
			"types": "num",
			"min": 0,
			"errorCases": [0]
		},
		{
			"name": "edgeSize",
			"types": "num",
			"min": 0
		}
	],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "<p>The arrow command draws an arrow and moves turtle to the tip of the new arrow.</p><p>The shape is filled using properties of the pen.  The thickness of the rectangular part of the arrow is the <span class=\"command\">penSize</span>.  The color is determined by the pen's color or gradient.  The fill properties aren't used because pointing and moving in the direction the turtle is heading seems more an alternative to <span class=\"command\">forward</span> than something that should use both pen and fill.</p><p>Avoid doing a couple things when you call the arrow command.<ul><li>Avoid calling arrow between <span class=\"command\">polyStart</span> and <span class=\"command\">polyEnd</span>.  arrow internally works like a closed path so any path that is open before calling arrow will get closed by the command.  Closing a path with <span class=\"command\">polyEnd</span> or <span class=\"command\">closePath</span> would be far more understandable to most WebLogo creators.</li><li>Avoid making the arrow head longer than the length you specify.  If the arrow head is longer, the arrow won't look much like an arrow.  A negative length also won't look much like an arrow.</li><li>Avoid calling the arrow when penSize is 0.  A penSize of 0 means there will be no rectangular part to the arrow shape so it'll usually draw a triangle instead of an arrow.  If you want an isosceles triangle, use the <span class=\"command\">isoTriangle command</span> instead.</li></ul></p>",
	"isIndependentlyUseful": true,
	"testCases": [
		{"in": [10, 45, 3], "returnValue": null}
	],
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "ascii",
	"names": [],
	"hintNames": ["asc"],
	"args": [
		{
			"name": "char1",
			"types": "string"
		}
	],
	"searchKeywords": [],
	"commandGroup": "string",
	"description": "Returns the number that represents the specified character.  The string must contain at least one character.  If more than one is specified, the result is based on the first character.",
	"testCases": [
		{"in": ["a"], "returnValue": 97},
		{"in": ["A"], "returnValue": 65},
		{"in": ["1"], "returnValue": 49}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "aShift",
	"names": [],
	"args": [
		{
			"name": "int",
			"types": "int"
		},
		{
			"name": "amount",
			"types": "int"
		}
	],
	"commandGroup": "math",
	"description": "Returns the int shifted by amount bits.  The difference between aShift and <span class=\"command\">lShift</span> shows when both the int and amount are negative.  aShift will fill the left-most bits with the sign value so the result may continue to be negative.",
	"testCases": [
		{"in": [0, 0], "returnValue": 0},
		{"in": [1, 0], "returnValue": 1},
		{"in": [1, 1], "returnValue": 2},
		{"in": [-2, -1], "returnValue": -1},
		{"in": [-1, -1], "returnValue": -1}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "assert",
	"names": [],
	"args": [{
		"name": "condition",
		"types": "bool"
	}],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "<p>Checks the specified condition and throws an error if the condition evaluates to false.</p><p>Assertions help as you develop and test your WebLogo projects but they take a little time to run.  When you export code, you'll want the code to run as quickly as possible so we automatically disable assertions.  Avoid any conditions that involve mutating the turtle or variables so your drawing looks the same with and without your assertions.</p><ul><li>An assertion can be useful for expression assumptions you want checked or automated tests.</li><li>It can also clarify expected data types for variables.  You could express this with comments too but assert is more operationally defined for WebLogo to verify your assumptions.  Comments are understood and put to action only within a human developer.</li></ul><p>You can learn more about assertions in other programming languages at <a href=\"https://en.wikipedia.org/wiki/Assertion_(software_development)\" target=\"_blank\">https://en.wikipedia.org/wiki/Assertion_(software_development)</a>.</p>",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": false,
	"returnTypes": null
},
{
	"primaryName": "backward",
	"names": ["bk", "back"],
	"hintNames": ["achteruit", "bw", "down", "downward"],
	"args": [{
		"name": "distance",
		"types": "num"
	}],
	"searchKeywords": ["path"],
	"commandGroup": "turtle",
	"description": "Moves the turtle backward by the specified distance",
	"testCases": [
		{"in": [100], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "betweenp",
	"names": ["between?"],
	"hintNames": ["between"],
	"args": [
	{
		"name": "val1",
		"types": "num"
	},
	{
		"name": "boundary1",
		"types": "num"
	},
	{
		"name": "boundary2",
		"types": "num"
	}
	],
	"commandGroup": "math",
	"searchKeywords": ["compare", "comparison"],
	"description": "Returns true if and only if val1 is between boundary1 and boundary2 exclusively.",
	"testCases": [
		{"in": [1, 0.3, 1], "returnValue": false},
		{"in": [1, 1, 0.3], "returnValue": false},
		{"in": [1, 0.3, 0.4], "returnValue": false},
		{"in": [1, 0.3, 1.4], "returnValue": true},
		{"in": [1, 1.3, 0.4], "returnValue": true},
		{"in": [1, -0.3, 4.4], "returnValue": true}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "bezier",
	"names": [],
	"args": [{
		"name": "points",
		"types": "list<list<num>>",
		"minLen": 2,
		"listElementTypes": "list<num>"
	},{
		"name": "t",
		"types": "num"
	}],
	"commandGroup": "math",
	"description": "<p>Returns a point in a bezier curve.  The list of points define the bezier curve.  You can learn more about <a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\" target=\"_blank\">Bezier Curves on wikipedia</a>.</p><p>Generally, you'll want t between 0 and 1 but you won't be warned if t is out of that range.  You must specify at least 2 points.  The dimension or number of coordinates for each point must be equal.  All coordinates must be numbers.</p>",
	"testCases": [
		{"in": [[[0, 0], [1, 1]], 0.5], "returnValue": [0.5, 0.5]},
		{"in": [[[0, 0], [1, 1]], 0.8], "returnValue": [0.8, 0.8]},
		{"in": [[[0, 0, 0], [1, 1, 1]], 0.8], "returnValue": [0.8, 0.8, 0.8]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list<num>"
},
{
	"primaryName": "bitAnd",
	"names": [],
	"args": [{
		"name": "num1",
		"types": "int"
	},{
		"name": "num2",
		"types": "int"
	}],
	"commandGroup": "math",
	"description": "<p>Returns the bitwise and of the specified integers.</p><p>Understanding the calculation is best done by looking at the binary representation of arguments.  bitOr 5 2 returns 0 because 5 is 101 in binary, 2 is 010 in binary. 1 and 1 is 1.  0 and 1 is 0.  The output of 0 is 000 in binary.<p></p>See also the <span class=\"command\">bitOr</span> and <span class=\"command\">bitXor</span> commands.</p>",
	"testCases": [
		{"in": [5,2], "returnValue": 0},
		{"in": [5,0], "returnValue": 0},
		{"in": [1,1], "returnValue": 1},
		{"in": [2,1], "returnValue": 0}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "bitNot",
	"names": [],
	"args": [{
		"name": "num1",
		"types": "int"
	}],
	"commandGroup": "math",
	"description": "<p>Returns the bitwise not of the specified integer.</p><p>Understanding the calculation is best done by looking at the binary representation of num1.</p><p>bitNot 5 is 6 but why?  5 in binary is ...0000101. Invert all the bits and you get ...1111010. ...1111010 is interpreted as -6.  The negative is because any signed integer with a highest order bit of 1 is negative.  The absolute value is 6 because of how 2's compliment form works.  The absolute value of a signed number is essentially (1 + bitNot :theNegative) or (1 + 5) or 6 in this example.</p><p>The binary representation of signed integer 0 is ...0000.  bitNot will invert every bit so 0000 will become 1111.  The signed integer where all bits are 1's represents -1.</p><p>See also the <span class=\"command\">bitAnd</span>, <span class=\"command\">bitXor</span>, and <span class=\"command\">not</span> commands.</p>",
	"testCases": [
		{"in": [0], "returnValue": -1},
		{"in": [-1], "returnValue": 0},
		{"in": [-5], "returnValue": 4},
		{"in": [5], "returnValue": -6}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "bitOr",
	"names": [],
	"args": [{
		"name": "num1",
		"types": "int"
	},{
		"name": "num2",
		"types": "int"
	}],
	"commandGroup": "math",
	"description": "<p>Returns the bitwise or of the specified integers.</p><p>Understanding the calculation is best done by looking at the binary representation of arguments.  bitOr 5 2 returns 7 because 5 is 101 in binary, 2 is 010 in binary. 1 or 1 is 1.  0 or 1 is 1.  The output of 7 is 111 in binary.</p><p>See also the <span class=\"command\">bitNot</span>, <span class=\"command\">bitXor</span>, and <span class=\"command\">or</span> commands</p>",
	"testCases": [
		{"in": [5,2], "returnValue": 7},
		{"in": [5,0], "returnValue": 5},
		{"in": [1,1], "returnValue": 1}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "bitXor",
	"names": [],
	"args": [{
		"name": "num1",
		"types": "int"
	},{
		"name": "num2",
		"types": "int"
	}],
	"commandGroup": "math",
	"description": "<p>Returns the bitwise e<strong>x</strong>clusive-<strong>or</strong>(<strong>x</strong>or) of the specified integers.</p><p>Understanding the calculation is best done by looking at the binary representation of arguments.  bitXor 5 2 returns 7 because 5 is 101 in binary, 2 is 010 in binary. 1 xor 1 is 0.  0 xor 1 is 1.  The output of 7 is 111 in binary.</p><p>bitXor 2 1 is 3 because 2 is 10 in binary and 1 is 01.  Both corresponding bits are different and therefore the result in binary is 11<sub>2</sub> which is also represented as 3<sub>10</sub>.</p><p>See also the <span class=\"command\">bitAnd</span>, <span class=\"command\">bitNot</span>, and <span class=\"command\">bitOr</span> commands.</p>",
	"testCases": [
		{"in": [5,2], "returnValue": 7},
		{"in": [5,0], "returnValue": 5},
		{"in": [1,1], "returnValue": 0},
		{"in": [2,1], "returnValue": 3}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "booleanp",
	"names": ["boolean?"],
	"hintNames": ["isboolean"],
	"args": [
		{
			"name": "val",
			"types": "*"
		}
	],
	"commandGroup": "math",
	"description": "Checks if the specified value is boolean.  In other words, checks if the value is either true or false.",
	"testCases": [
		{"in": [5], "returnValue": false},
		{"in": ["hi"], "returnValue": false},
		{"in": [[]], "returnValue": false},
		{"in": [1.2], "returnValue": false},
		{"in": [true], "returnValue": true},
		{"in": [false], "returnValue": true}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "break",
	"names": [],
	"args": [],
	"commandGroup": "compiled",
	"description": "Breaks out of a loop. After hitting a break, the next instruction is the one immediately after the end of the deepest loop containing the break statement.",
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "butFirst",
	"names": ["bf"],
	"args": [{
		"name": "list1",
		"types": "list|string"
	}],
	"commandGroup": "list",
	"description": "Returns all elements of the list or string but/except the first.",
	"testCases": [
		{"in": [[1]], "returnValue": []},
		{"in": [[1,2,3]], "returnValue": [2,3]},
		{"in": ["Hello"], "returnValue": "ello"},
		{"in": [[]], "returnValue": []},
		{"in": [""], "returnValue": ""}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list|string"
},
{
	"primaryName": "butLast",
	"names": ["bl"],
	"args": [{
		"name": "list1",
		"types": "list|string"
	}],
	"commandGroup": "list",
	"description": "Returns all elements of the list or string but/except the last.",
	"testCases": [
		{"in": [[1]], "returnValue": []},
		{"in": [[1,2,3]], "returnValue": [1,2]},
		{"in": ["Hello"], "returnValue": "Hell"},
		{"in": [[]], "returnValue": []},
		{"in": [""], "returnValue": ""}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list|string"
},
{
	"primaryName": "ceiling",
	"names": [],
	"hintNames": ["ceil"],
	"args": [{
		"name": "num1",
		"types": "num"
	}],
	"commandGroup": "math",
	"description": "<p>Returns the lowest integer greater than or equal to the specified number.</p><p>See also the <span class=\"command\">int command</span>.</p>",
	"testCases": [
		{"in": [4.4], "returnValue": 5},
		{"in": [4], "returnValue": 4},
		{"in": [-3.2], "returnValue": -3},
		{"in": [-3], "returnValue": -3},
		{"in": [0], "returnValue": 0}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "char",
	"names": [],
	"hintNames": ["character"],
	"args": [{
		"name": "num1",
		"types": "int",
		"min": 0,
		"max": 255
	}],
	"commandGroup": "string",
	"description": "Returns the character corresponding with the specified number.  char calculates the inverse of the <span class=\"command\">ascii command</span>.",
	"testCases": [
		{"in": [49], "returnValue": "1"},
		{"in": [65], "returnValue": "A"},
		{"in": [66], "returnValue": "B"}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "string"
},
{
	"primaryName": "circle",
	"names": [],
	"hintNames": ["fillcircle", "point"],
	"args": [
		{
			"name": "radius",
			"types": "num",
			"min": 0,
			"errorCases": [0]
		}
	],
	"searchKeywords": ["shape"],
	"commandGroup": "turtle",
	"description": "<p>Draws a circle with the specified radius around the current turtle position</p><p>If the specified radius is less than half of the current pen size, the pen size and radius is treated differently.  Radius of the new circle becomes half the current pen size and the outline for the circle will use a width of double the specified radius.</p>",
	"testCases": [
		{"in": [49], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "circleLeft",
	"names": [],
	"hintNames": ["circlel"],
	"args": [
		{
			"name": "radius",
			"types": "num",
			"min": 0,
			"errorCases": [0]
		}
	],
	"commandGroup": "turtle",
	"description": "Draws a circle with the specified radius starting from and ending at the current position.  Calling circleLeft 100 is the same as calling <span class=\"command\">arcLeft</span> 360 100 except that circleLeft will fill in the shape if fillColor is not transparent.  See also <span class=\"command\">circleRight</span> which draws a circle to the right.",
	"testCases": [
		{"in": [49], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "circlePair",
	"names": [],
	"args": [
		{
			"name": "startRadius",
			"types": "num",
			"min": 0
		},
		{
			"name": "endRadius",
			"types": "num",
			"min": 0
		},
		{
			"name": "separation",
			"types": "num"
		}
	],
	"commandGroup": "turtle",
	"description": "<p>Draws a shape that wraps 2 circles and the tangent lines outlining them.  Both circles are along the original heading. The turtle is moved :separation forward to end in the center of the :endRadius circle.</p><p>If :startRadius and :endRadius are equal, the shape is the same as the line segment drawing drawn by <span class=\"command\">forward</span> when <span class=\"command\">lineCap</span> outputs \"round.  Moving forward only involves the turtle's pen properties but circlePairs will draw using both fill and pen properties.</p><p>If one of the two circular ends has radius 0, it'll be drawn like the end of a triangle instead of using an arc.</p>",
	"testCases": [
		{"in": [1, 2, 3], "returnValue": null},
		{"in": [1, 0, 3], "returnValue": null},
		{"in": [0, 2, 3], "returnValue": null},
		{"in": [1, 2, 30], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "circleRight",
	"names": ["circle2"],
	"hintNames": ["circler"],
	"args": [
		{
			"name": "radius",
			"types": "num",
			"min": 0,
			"errorCases": [0]
		}
	],
	"commandGroup": "turtle",
	"description": "Draws a circle with the specified radius starting from and ending at the current position.  Calling circleRight 100 is the same as calling <span class=\"command\">arcRight</span> 360 100 except that circleRight will fill in the shape if fillColor is not transparent.",
	"testCases": [
		{"in": [49], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "clamp",
	"names": [],
	"args": [{
		"name": "num1",
		"types": "num"
	}, {
		"name": "min",
		"types": "num"
	}, {
		"name": "max",
		"types": "num"
	}],
	"commandGroup": "math",
	"description": "Returns num1 unless it is out of the range between min and max.  min is returned if num1 is less than min.  max is returned if num1 is greater than max.  You should always make sure that min is less than max.",
	"testCases": [
		{"in": [1, 2, 3], "returnValue": 2},
		{"in": [2.4, 2, 3], "returnValue": 2.4},
		{"in": [3.4, 2, 3], "returnValue": 3}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "clearScreen",
	"names": ["cs"],
	"hintNames": ["cg", "clean", "clear", "cls", "limpetela", "schermchhoon", "ss"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Clears the screen of all shapes, brings the turtle home, and sets heading to 0",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "closePath",
	"names": [],
	"hintNames": [],
	"args": [],
	"commandGroup": "turtle",
	"searchKeywords": ["path"],
	"description": "Closes a path created by recent path-related commands such as <span class=\"command\">forward</span>, <span class=\"command\">arc2</span>, <span class=\"command\">arcLeft</span>.  The <span class=\"command\">polyEnd command</span> always closes the path so there is no reason to use closePath with it.",
	"testCases": [
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "colorToBlue",
	"names": [],
	"hintNames": ["getblue"],
	"args": [{
		"name": "color",
		"types": "alphacolor"
	}],
	"commandGroup": "color",
	"description": "Gets the 0..255 blue brightness from color.",
	"isIndependentlyUseful": false,
	"returnTypes": "int"
},
{
	"primaryName": "colorToGreen",
	"names": [],
	"hintNames": ["getgreen"],
	"args": [{
		"name": "color",
		"types": "alphacolor"
	}],
	"commandGroup": "color",
	"description": "Gets the 0..255 green brightness from color.",
	"testCases": [
		{"in": ["#fff"], "returnValue": 255},
		{"in": ["#f0f"], "returnValue": 0},
		{"in": ["#000"], "returnValue": 0},
		{"in": ["#111"], "returnValue": 17}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "colorToHexCode",
	"names": [],
	"args": [
		{
			"name": "color",
			"types": "alphacolor"
		}
	],
	"commandGroup": "color",
	"description": "Gets a hexadecimal(base 16) code representing the specified color or alphacolor.  The output starts with the pound sign(#) followed by either 6 or 8 hexadecimal digits.  For semitransparent/alphacolor values the first 2 digits indicates alpha or opacity from 0(transparent) to 255(fully opaque).",
	"testCases": [
		{"in": ["#fff"], "returnValue": "#FFFFFF"},
		{"in": ["red"], "returnValue": "#FF0000"},
		{"in": ["black"], "returnValue": "#000000"},
		{"in": ["#8000"], "returnValue": "#88000000"}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "alphacolorstring"
},
{
	"primaryName": "colorToIntensity",
	"names": [],
	"hintNames": [],
	"args": [{
		"name": "color",
		"types": "alphacolor"
	}],
	"commandGroup": "color",
	"description": "Gets the 0..255 HSI intensity from color.  The value returned is the average the red, green, and blue components of color.  In other words, the returned value is (red + green + blue) / 3.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "colorToLightness",
	"names": [],
	"hintNames": [],
	"args": [{
		"name": "color",
		"types": "alphacolor"
	}],
	"commandGroup": "color",
	"description": "Gets the 0..255 HSL lightness from color.  The value returned is the (maximum + minimum) / 2 of the red, green, and blue components of color.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "colorToRed",
	"names": [],
	"hintNames": ["getred"],
	"args": [{
		"name": "color",
		"types": "alphacolor"
	}],
	"commandGroup": "color",
	"description": "Gets the 0..255 red brightness from color.",
	"testCases": [
		{"in": ["red"], "returnValue": 255},
		{"in": ["blue"], "returnValue": 0},
		{"in": ["black"], "returnValue": 0},
		{"in": ["white"], "returnValue": 255},
		{"in": ["#f89"], "returnValue": 255}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "colorToValue",
	"names": [],
	"hintNames": [],
	"args": [{
		"name": "color",
		"types": "alphacolor"
	}],
	"commandGroup": "color",
	"description": "Gets the 0..255 HSV value from color.  The value returned is the maximum of the red, green, and blue components of color.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "combine",
	"names": [],
	"hintNames": ["join"],
	"args": [{
		"name": "a",
		"types": "list|num|string"
	},{
		"name": "b",
		"types": "list|num|string"
	}
	],
	"argCount": {
		"min": 2
	},
	"extraArgsInfo": {
		"types": "list|num|string"
	},
	"commandGroup": "list",
	"description": "<p>Combines the two specified values.</p><p>Combines non-list values with lists.  If either value is a string and the other is a string or number, a string is returned that concatenates the values together.</p><p>If you want to combine strings specifically, consider using the <span class=\"command\">word command</span>.  The word command is more specific, clearer to anyone reading your code, and slightly faster.</p>",
	"testCases": [
		{"in": [1, 2], "returnValue": 3},
		{"in": [1, 2, 5], "returnValue": 8},
		{"in": [[1], 2], "returnValue": [1, 2]},
		{"in": ["h", "ello"], "returnValue": "hello"},
		{"in": [3, "ello"], "returnValue": "3ello"},
		{"in": ["ello", 3], "returnValue": "ello3"},
		{"in": ["h", [1, 2, 3]], "returnValue": ["h", 1, 2, 3]},
		{"in": [[1, 2], "hello"], "returnValue": [1, 2, "hello"]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list|num|string"
},
{
	"primaryName": "cos",
	"names": [],
	"hintNames": ["cosine"],
	"args": [{
		"name": "angleDegrees",
		"types": "num"
	}],
	"searchKeywords": ["math", "trig"],
	"commandGroup": "math",
	"description": "Returns the cos ratio for the specified angle in degrees",
	"testCases": [
		{"in": [0], "returnValue": 1},
		{"in": [90], "returnValue": 0},
		{"in": [-90], "returnValue": 0},
		{"in": [45], "returnValue": 0.707106781186548}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "cosh",
	"names": [],
	"args": [{
		"name": "x",
		"types": "num"
	}],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "returns the hyperbolic cosine of a number.  You may also be interested in the <span class=\"command\">sinh command</span>.  This is very different from the <span class=\"command\">cos command</span> used in trigonometry.",
	"testCases": [
		{"in": [0], "returnValue": 1},
		{"in": [1], "returnValue": 1.543080634815244},
		{"in": [-1], "returnValue": 1.543080634815244},
		{"in": [2], "returnValue": 3.7621956910836314}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "count",
	"names": [],
	"hintNames": ["len", "length", "strlen", "vlength"],
	"args": [
		{
			"name": "list1",
			"types": "list|string"
		}
	],
	"commandGroup": "list",
	"description": "Returns the number of elements in a list or the number of characters in a string",
	"testCases": [
		{"in": [[]], "returnValue": 0},
		{"in": [""], "returnValue": 0},
		{"in": ["hi"], "returnValue": 2},
		{"in": [[1,2]], "returnValue": 2}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "createLinearGradient",
	"names": [],
	"args": [
		{
			"name": "p1",
			"types": "list<num>",
			"minLen": 2,
			"listElementTypes": "num"
		},
		{
			"name": "p2",
			"types": "list<num>",
			"minLen": 2,
			"listElementTypes": "num"
		},
		{
			"name": "colorStops",
			"types": "plist",
			"description": "The color stops is a property list with number keys of anywhere from 0 to 1.  The values must be colors."
		},
		{
			"name": "spreadMethod",
			"types": "string",
			"format": "gradientSpreadMethod"
		}
	],
	"commandGroup": "gradients",
	"description": "Creates a linear gradient which can be used instead of a fill color or a pen color",
	"isIndependentlyUseful": false,
	"returnTypes": "gradient"
},
{
	"primaryName": "createPList",
	"names": ["plistcreate"],
	"args": [],
	"searchKeywords": [],
	"commandGroup": "plist",
	"description": "Returns an empty property list.  A property list is a collection of key-value pairs.  A property list is similar to a dictionary, hash table, hash map, or Map from other programming languages.  To assign the result to a variable, use <span class=\"command\">make</span> or <span class=\"command\">localmake</span>.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "plist"
},
{
	"primaryName": "createRadialGradient",
	"names": [],
	"args": [
		{
			"name": "centreOuter",
			"types": "list<num>",
			"minLen": 2,
			"listElementTypes": "num"
		},
		{
			"name": "radius",
			"types": "num",
			"min": 0
		},
		{
			"name": "colorStops",
			"types": "plist"
		}
	],
	"commandGroup": "gradients",
	"description": "<p>Creates a radial or circular gradient instead of a single fill color or pen color.</p><p>The focus will be the same as centerOuter.  The <span data-helpid=\"spread-methods\">spreadMethod</span> will be pad.</p><p>Use createRadialGradient2 if you want the focus and the center to be different or you want <span data-helpid=\"spread-methods\">a spread method</span> other than pad.</p>",
	"isIndependentlyUseful": false,
	"returnTypes": "gradient"
},
{
	"primaryName": "createRadialGradient2",
	"names": [],
	"args": [
		{
			"name": "centreOuter",
			"types": "list<num>",
			"minLen": 2,
			"listElementTypes": "num"
		},
		{
			"name": "focus",
			"types": "list<num>",
			"minLen": 2,
			"listElementTypes": "num"
		},
		{
			"name": "radius",
			"types": "num",
			"min": 0
		},
		{
			"name": "colorStops",
			"types": "plist"
		},
		{
			"name": "spreadMethod",
			"types": "string",
			"format": "gradientSpreadMethod"
		}
	],
	"commandGroup": "gradients",
	"description": "Creates a radial or circular gradient instead of a single fill color or pen color",
	"isIndependentlyUseful": false,
	"returnTypes": "gradient"
},
{
	"primaryName": "cross",
	"names": [],
	"args": [
		{
			"name": "vector1",
			"types": "list<num>",
			"minLen": 3,
			"maxLen": 3,
			"listElementTypes": "num"
		},
		{
			"name": "vector2",
			"types": "list<num>",
			"minLen": 3,
			"maxLen": 3,
			"listElementTypes": "num"
		}
	],
	"commandGroup": "linearAlgebra",
	"description": "Returns the cross product of the inputted lists.  You can learn more about the cross product on <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Cross_product\">wikipedia</a>.  See also the <span class=\"command\">dot</span> command for calculating dot product.",
	"testCases": [
		{
			"in": [[3, -3, 1], [4, 9, 2]],
			"returnValue": [-15, -2, 39]
		},
		{
			"in": [[3, -3, 1], [-12, 12, -4]], "returnValue": [0, 0, 0]
		}
	],
	"isIndependentlyUseful": false,
	"returnLengthInfo": {
		"min": 3,
		"max": 3
	},
	"returnTypes": "list<num>"
},
{
	"primaryName": "dequeue",
	"names": ["pop"],
	"args": [{
		"name": "listName",
		"types": "string",
		"refTypes": "list"
	}],
	"commandGroup": "compiled",
	"description": "Removes and returns the first element of the specified list",
	"isIndependentlyUseful": true,
	"returnTypes": "*"
},
{
	"primaryName": "dequeue2",
	"names": [],
	"args": [{
		"name": "listName",
		"types": "string",
		"refTypes": "list"
	}],
	"commandGroup": "list",
	"description": "Removes and returns the first element of the specified list.  The original list is mutated.  Mutating the original list instead of making a new one is the main change between <span class=\"command\">dequeue</span> and dequeue2.  dequeue2 is faster because no copy is made for the change.",
	"isIndependentlyUseful": true,
	"returnTypes": "*"
},
{
	"primaryName": "difference",
	"names": ["minus"],
	"hintNames": ["diff", "sub", "subtract"],
	"args": [{
		"name": "num1",
		"types": "num"
	}, {
		"name": "num2",
		"types": "num"
	}],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Returns the difference between 2 numbers.  Consider also using the - operator.",
	"testCases": [
		{"in": [0, 0], "returnValue": 0},
		{"in": [0, 1], "returnValue": -1},
		{"in": [2, 1], "returnValue": 1}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "distance",
	"names": [],
	"args": [
		{
			"name": "point",
			"types": "list<num>",
			"minLen": 2,
			"listElementTypes": "num"
		}
	],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "Returns distance between the turtle and the specified point.  The specified point should be a list of at least 2 numbers.",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "distanceToCircle",
	"names": [],
	"args": [
		{
			"name": "center",
			"types": "list<num>",
			"minLen": 2,
			"listElementTypes": "num"
		},{
			"name": "radius",
			"types": "num",
			"min": 0
		}
	],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "<p>Returns distance to move forward before intersecting the edge/circumference of the specified circle.</p><p>If there is no amount moving forward that will eventually intersect the circle, -1 is returned.</p><p>distanceToCircle assumes you're working in 2 dimensions only.  z-coordinates are ignored and heading is the only aspect of orientation used in the calculation.</p>",
	"testCases": [
		{"in": [[0,0,0], 10], "returnValue": 10},
		{"in": [[0,0,0], 5], "returnValue": 5}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "distanceToLine",
	"names": [],
	"args": [
		{
			"name": "point1",
			"types": "list<num>",
			"minLen": 2,
			"maxLen": 3,
			"listElementTypes": "num"
		},{
			"name": "point2",
			"types": "list<num>",
			"minLen": 2,
			"maxLen": 3,
			"listElementTypes": "num"
		}
	],
	"compositeValidation": [
		{"type": "equalLengthList", "arg1": "point1", "arg2": "point2"}
	],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "<p>Returns distance to move forward before intersecting the a line.</p><p>If the intersection with the line happens in the reverse direction, a negative number is returned.  forward distanceToLine :point1 :point2 will still move backward to the intersection point since forward handles negative numbers as a movement backward the specified distance.</p><p>The line is indicated by two distinct points point1 and point2.</p><p>Avoid cases where the points are exactly the same because direction or slope of the line won't be determinable.</p><p>This function assumes your line and the turtle's orientation are 2-dimensional.  We assume both are in the z=0 plane.</p>",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "do.while",
	"names": [],
	"args": [
		{
			"name": "instructions",
			"types": "instructionlist"
		},
		{
			"name": "condition",
			"types": "bool"
		}
	],
	"searchKeywords": ["loop"],
	"commandGroup": "compiled",
	"description": "Runs the instruction list before checking condition and runs it repeatedly until the condition is false.  This is similar to the <span class=\"command\">while loop</span> except that the condition is checked after the first iteration.  By contrast, a while-loop won't run its instruction list even once if the condition is initially false.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "dot",
	"names": [],
	"hintNames": ["vdot"],
	"args": [
		{
			"name": "list1",
			"types": "list<num>",
			"listElementTypes": "num"
		},
		{
			"name": "list2",
			"types": "list<num>",
			"listElementTypes": "num"
		}
	],
	"compositeValidation": [
		{"type": "equalLengthList", "arg1": "list1", "arg2": "list2"}
	],
	"searchKeywords": ["list", "math"],
	"commandGroup": "linearAlgebra",
	"description": "Calculates the dot product of 2 lists of numbers.  The lists must have equal length and contain nothing but numbers.  More can be learned about the dot product in <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Dot_product\">a wikipedia article</a>.",
	"testCases": [
		{"in": [[1,2,3], [4, -5, 6]], "returnValue": 12},
		{"in": [[4, -5, 6], [1,2,3]], "returnValue": 12},
		{"in": [[-4, -9], [-1, 2]], "returnValue": -14}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "duplicate",
	"names": [],
	"args": [
		{
			"name": "valueToDuplicate",
			"types": "*"
		},
		{
			"name": "duplicateCount",
			"types": "int",
			"min": 0
		}
	],
	"commandGroup": "list",
	"description": "Creates a list with duplicateCount copies of the specified valueToDuplicate",
	"testCases": [
		{"in": [1, 0], "returnValue": []},
		{"in": [1, 1], "returnValue": [1]},
		{"in": [1, 2], "returnValue": [1, 1]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list"
},
{
	"primaryName": "easeBounceOut",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function with a graph that bounces up and down a few times before finally increasing to 1.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeCubicBezier",
	"names": [],
	"args": [{
		"name": "x1",
		"types": "num"
	}, {
		"name": "y1",
		"types": "num"
	}, {
		"name": "x2",
		"types": "num"
	}, {
		"name": "y2",
		"types": "num"
	}],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "<p>Returns a custom cubic bezier easing function defined by the specified control point coordinates.</p><p>A few other commands are examples of cubic beziers such as: <span class=\"command\">easeEase</span>, <span class=\"command\">easeIn</span>, <span class=\"command\">easeInOut</span>, <span class=\"command\">easeOut</span>. easeCubicBezier gives you the flexibility to define many more.</p><p>Easing functions generally stay within the range of 0 and 1. If you define an easing function using easeCubicBezier that returns 1.5, <span class=\"command\">interpolateRatio</span> will return 1.5 but gradients will interpret it the same as 1.</p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeEase",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "<p>Returns an ease easing function.  This easing function starts with a slope of roughly 1 and ends with a horizontal slope. The curve is more gradual or gentler at the end.</p><p>easeEase is the same as <span class=\"command\">easeCubicBezier</span> 0.25 0.1 0.25 1.0.</p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeIn",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "<p>Returns an in easing function.  This easing function starts with a horizontal slope but ends steep.  The graph is a curved line.  If you want to end with a horizontal slope, consider using <span class=\"command\">easeInOut</span>.</p><p>easeIn is the same as <span class=\"command\">easeCubicBezier</span> 0.42 0 1 1.</p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeInCirc",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function defined by the shape of a 90-degree circular arc.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeInCubic",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function defined by returning ratio * ratio * ratio.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeInOut",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "<p>Returns an in-out easing function.  This easing function starts and ends with a horizontal slope and continuously transitions between them.  Unlike <span class=\"command\">easeLinear</span>, easeInOut graphs as a curved line.</p><p>easeInOut is the same as <span class=\"command\">easeCubicBezier</span> 0.42 0 0.58 1.</p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeInOutCubic",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function that eases in and out using 2 cubic expressions.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeInOutQuad",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function that eases in and out using 2 quadratic expressions.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeInQuad",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function defined as the square of the input ratio.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeInQuart",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function defined by an expression like <span class=\"command\">power</span> :ratio 4.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeLinear",
	"names": [],
	"args": [
	],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns a linear easing function.  This is an easing function which returns the same ratio that is given to it.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeOut",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "<p>Returns an out easing function.  This easing function starts steep and ends with a horizontal slope.  easeOut is mostly in contrast with <span class=\"command\">easeIn</span>.</p><p>easeOut is the same as <span class=\"command\">easeCubicBezier</span> 0 0 0.58 1.</p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeOutCirc",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function defined by the shape of a 90-degree circular arc.  <span class=\"command\">easeInCirc</span> is similar but a different quadrant of the circle.",
	"isStaticEvaluationSafe": true,
	"isIndependentlyUseful": false,
	"returnTypes": "easing"
},
{
	"primaryName": "easeOutCubic",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function defined by 1 - power (1 - ratio) 3.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeOutQuad",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function defined by 1 - (1 - :ratio) * (1 - :ratio).",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeOutQuart",
	"names": [],
	"args": [],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns an easing function defined by 1 - power (1 - :ratio) 4.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "easeSteps",
	"names": [],
	"args": [{
			"name": "numSteps",
			"types": "int",
			"min": 1
		},
		{
			"name": "stepPosition",
			"types": "string",
			"format": "stepPosition"
		}
	],
	"commandGroup": "easing",
	"searchKeywords": [],
	"description": "Returns a stepped easing function.  This is an easing function which returns rounds values down to the nearest step below it.  You specify the number of steps to divide the ratio into.  Unlike most other easing functions, the graph of easeSteps is not continuous.  For example, if the number of steps is 2, the output ratio jumps immediately from 0 to 0.5 as the input increases past 0.5.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "easing"
},
{
	"primaryName": "ellipse",
	"names": [],
	"args": [
		{
			"name": "radius1",
			"types": "num"
		},
		{
			"name": "radius2",
			"types": "num"
		}
	],
	"commandGroup": "turtle",
	"searchKeywords": ["shape"],
	"description": "Draws an ellipse with the specified radius1 and radius2 around the current turtle position",
	"testCases": [
		{"in": [20, 30], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "ellipse2",
	"names": [],
	"args": [
		{
			"name": "radius1",
			"types": "num"
		},
		{
			"name": "radius2",
			"types": "num"
		}
	],
	"commandGroup": "turtle",
	"description": "<p>Draws an ellipse with the specified radius1 and radius2 with the current turtle position on its edge.</p><p>Use <span class=\"command\">ellipse</span> if you want the ellipse centered on the current turtle position.</p><p>ellipse2 is similar to <span class=\"command\">circle2</span> except that the drawn shape can be elliptical.</p>",
	"testCases": [
		{"in": [20, 30], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "ellipseArc",
	"names": [],
	"args": [
		{
			"name": "angle",
			"types": "num"
		},
		{
			"name": "radius1",
			"types": "num"
		},
		{
			"name": "radius2",
			"types": "num"
		},
		{
			"name": "startAngle",
			"types": "num"
		}
	],
	"searchKeywords": ["shape"],
	"commandGroup": "turtle",
	"description": "Draws an elliptical arc.  The dimensions of the ellipse are radius1 in one direction and radius2 in the perpendicular direction.",
	"testCases": [
		{"in": [20, 30, 50, 0], "returnValue": null},
		{"in": [20, 30, 50, 45], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "emptyp",
	"names": ["empty?"],
	"args": [
		{
			"name": "list1",
			"types": "list|plist|string"
		}
	],
	"commandGroup": "list",
	"description": "Returns true if specified list or string has a count or length of 0",
	"testCases": [
		{"in": [[]], "returnValue": true},
		{"in": [""], "returnValue": true},
		{"in": [[0]], "returnValue": false},
		{"in": ["hello"], "returnValue": false}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "equalp",
	"names": ["equal?"],
	"hintNames": ["equals"],
	"args": [
		{
			"name": "val1",
			"types": "bool|num|string"
		},
		{
			"name": "val2",
			"types": "bool|num|string"
		}
	],
	"commandGroup": "math",
	"searchKeywords": ["compare", "comparison"],
	"description": "Returns true if both values are equal.  Also consider using the '=' operator.  equalp 1 2 outputs false.  equalp [1 2] [1 2] outputs true.  equalp [1 2] [2 1] outputs false.  Comparisons are case-insensitive when strings are involved so equalp \"hi \"HI outputs true.",
	"testCases": [
		{"in": [true, true], "returnValue": true},
		{"in": [false, false], "returnValue": true},
		{"in": [0, 0], "returnValue": true},
		{"in": [0, 1], "returnValue": false},
		{"in": [1, 1], "returnValue": true},
		{"in": [false, true], "returnValue": false},
		{"in": ["hi", "Hi"], "returnValue": true},
		{"in": ["hi", true], "returnValue": false},
		{"in": ["true", true], "returnValue": true},
		{"in": ["True", true], "returnValue": true},
		{"in": ["Truee", true], "returnValue": false},
		{"in": [[1, "HI"], [1, "hi"]], "returnValue": true},
		{"in": [[1, 2, 3], [1, 2, 3]], "returnValue": true},
		{"in": [[1, 2, 3], [3, 2, 1]], "returnValue": false},
		{"in": [1, true], "returnValue": false},
		{"in": [0, false], "returnValue": false},
		{"in": [0, true], "returnValue": false}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "evenp",
	"names": ["even?"],
	"args": [
		{
			"name": "int1",
			"types": "int"
		}
	],
	"commandGroup": "math",
	"description": "Returns the truth of the statement, ':int1 is even'.",
	"testCases": [
		{"in": [0], "returnValue": true},
		{"in": [1], "returnValue": false},
		{"in": [2], "returnValue": true}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "exp",
	"names": [],
	"args": [
		{
			"name": "num1",
			"types": "num"
		}
	],
	"commandGroup": "math",
	"searchKeywords": ["math"],
	"description": "Returns e^num1 where e is the base of natural logarithms.  e = 2.71828...  exp is the inverse of <span class=\"command\">ln</span>",
	"testCases": [
		{"in": [0], "returnValue": 1}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "factorial",
	"names": [],
	"args": [
		{
			"name": "n",
			"types": "int",
			"min": 1
		}
	],
	"commandGroup": "math",
	"searchKeywords": ["math"],
	"description": "<p>Returns the factorial of n.  Mathematicians typically express factorial with an exclamation mark after the number like 5!.</p><p>The factorial of n = 1 * 2 * 3 * 4... * (n-1) * n.  In other words, the factorial of 1 is 1.  The factorial of n is n * factorial of (n - 1).</p><p>Since the output from factorial grows so much with increasing n and due to the limited range of <a href=\"https://en.wikipedia.org/wiki/IEEE_754\" target=\"_blank\">IEEE 754 floating point numbers</a>, factorial 171 returns Infinity.</p>",
	"testCases": [
		{"in": [1], "returnValue": 1},
		{"in": [2], "returnValue": 2},
		{"in": [3], "returnValue": 6},
		{"in": [4], "returnValue": 24}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "fillColor",
	"names": [],
	"hintNames": ["fillcolour", "floodcolour"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns the fill color, if there is one.  Returns transparent if there is no fill color.  fillColor reads the fill color.  To set fill color, see the <span class=\"command\">setFillColor</span> command.",
	"isIndependentlyUseful": false,
	"returnTypes": "color|transparent"
},
{
	"primaryName": "fillGradient",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns the current fill gradient, if there is one.  fillGradient returns the gradient set using the <span class=\"command\">setFillGradient command.</span>.",
	"isIndependentlyUseful": false,
	"returnTypes": "gradient"
},
{
	"primaryName": "fillGradientp",
	"names": ["fillgradient?"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns true if and only if a fill gradient is active.",
	"isIndependentlyUseful": false,
	"returnTypes": "bool"
},
{
	"primaryName": "first",
	"names": [],
	"args": [{
		"name": "collection",
		"types": "list|string",
		"minLen": 1
	}],
	"commandGroup": "list",
	"description": "Returns the first element out of a list or first character in a string",
	"testCases": [
		{"in": [[0]], "returnValue": 0},
		{"in": [[1]], "returnValue": 1},
		{"in": [[1,2]], "returnValue": 1},
		{"in": [[2,3]], "returnValue": 2},
		{"in": ["hello"], "returnValue": "h"},
		{"in": [[]], "returnValue": null},
		{"in": [""], "returnValue": null}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "*"
},
{
	"primaryName": "floor",
	"names": [],
	"args": [{
		"name": "num1",
		"types": "num"
	}],
	"commandGroup": "math",
	"description": "<p>Returns the maximum integer that is less than or equal to the number specified.</p><p>See also the commands <span class=\"command\">int</span> and <span class=\"command\">ceiling</span>.</p>",
	"testCases": [
		{"in": [0], "returnValue": 0},
		{"in": [1], "returnValue": 1},
		{"in": [-1], "returnValue": -1},
		{"in": [-1.1], "returnValue": -2},
		{"in": [1.1], "returnValue": 1}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "fontFamily",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns the font family name",
	"isIndependentlyUseful": false,
	"returnTypes": "string"
},
{
	"primaryName": "fontSize",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns the font size",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "for",
	"names": [],
	"args": [{
		"name": "controlSettings",
		"types": "list",
		"description": "Format is [variable-name start stop step]"
	}, {
		"name": "repeatedCommands",
		"types": "instructionlist"
	}],
	"searchKeywords": ["loop"],
	"commandGroup": "compiled",
	"description": "Repeats the specified command list while iterating the specified variable from a start to a stop value.  Each time an iteration completes, the step value is added to the variable.  If the for command is used in a procedure, the for-loop variable is local to that procedure.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "forever",
	"names": [],
	"hintNames": ["loop"],
	"args": [{
		"name": "repeatedCommands",
		"types": "instructionlist"
	}],
	"searchKeywords": ["loop"],
	"commandGroup": "compiled",
	"description": "Repeats the specified command list forever.  Infinite loops should generally be avoided.  Consider using a <span class=\"command\">while</span> or <span class=\"command\">until</span> loop instead with a condition that eventually becomes false.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "forward",
	"names": ["fd"],
	"hintNames": ["foreward", "fr", "frente", "fw", "vooruit", "vt"],
	"args": [{
		"name": "distance",
		"types": "num",
		"uselessCases": [0]
	}],
	"commandGroup": "turtle",
	"searchKeywords": ["path"],
	"description": "Moves the turtle forward by the specified distance",
	"testCases": [
		{"in": [100], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "fput",
	"names": [],
	"hintNames": ["firstput", "fp", "pf", "putfirst"],
	"args": [
		{
			"name": "thing",
			"types": "*"
		},
		{
			"name": "list1",
			"types": "list"
		}
	],
	"commandGroup": "list",
	"description": "Returns a list that is the same as the list1 except 1 element longer.  The new element, thing, is added to the beginning of the resulting list.",
	"testCases": [
		{"in": [1, []], "returnValue": [1]},
		{"in": [1, [2, 3]], "returnValue": [1, 2, 3]},
		{"in": [[], []], "returnValue": [[]]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list"
},
{
	"primaryName": "getArcLeftAngleToCircle",
	"names": [],
	"args": [
		{
			"name": "arcRadius",
			"types": "num",
			"min": 0
		},
		{
			"name": "circlePosition",
			"types": "list<num>",
			"minLen": 2
		},
		{
			"name": "circleRadius",
			"types": "num",
			"min": 0
		}
	],
	"commandGroup": "turtle",
	"description": "Returns the number of degrees to arc left from the current turtle state before the nearest forward intersection with the specified circle.  The result is positive whenever there is a possible intersection.  If the intersection is behind, the result may be between 180 and 360.  If no intersection is found, -1 is returned.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "num"
},
{
	"primaryName": "getProperty",
	"names": ["gprop"],
	"hintNames": ["getattr", "getprop"],
	"args": [
		{
			"name": "plistVariable",
			"types": "string",
			"refTypes": "plist"
		},
		{
			"name": "propertyKey",
			"types": "bool|num|string"
		}
	],
	"commandGroup": "plist",
	"searchKeywords": ["property"],
	"description": "Gets a property(propertyKey) from the specified property list(plistVariable).  See also <span class=\"command\">setProperty</span> and <span class=\"command\">createPList</span>.",
	"isIndependentlyUseful": false,
	"returnTypes": "*"
},
{
	"primaryName": "goldenRatio",
	"names": [],
	"args": [],
	"commandGroup": "math",
	"searchKeywords": ["math"],
	"description": "Returns the golden ratio.  The golden ratio is roughly 1.618033988 or exactly (1 + sqrt 5) / 2.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "heading",
	"names": [],
	"hintNames": ["getdirection", "getheading"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Outputs heading of the turtle in degrees",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "num"
},
{
	"primaryName": "hideTurtle",
	"names": ["ht"],
	"hintNames": ["wegt", "wegturtle"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Hides the turtle",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "home",
	"names": [],
	"hintNames": ["center", "centre", "naarbegin"],
	"args": [],
	"searchKeywords": ["origin"],
	"commandGroup": "turtle",
	"description": "Moves the turtle to its original coordinates of 0 0 and sets heading to 0.  home is the same as calling <span class=\"command\">setXY</span> 0 0 <span class=\"command\">setHeading</span> 0.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "hsvToRGB",
	"names": [],
	"hintNames": ["hsv_to_rgb"],
	"args": [
		{
			"name": "hueRatio",
			"types": "num",
			"min": 0,
			"max": 1
		},
		{
			"name": "saturationRatio",
			"types": "num",
			"min": 0,
			"max": 1
		},
		{
			"name": "valueRatio",
			"types": "num",
			"min": 0,
			"max": 1
		}
	],
	"commandGroup": "color",
	"searchKeywords": ["color", "hue", "saturation", "value"],
	"description": "Returns a list of red, green, and blue values in the 0..255 range while given HSV value ratios.",
	"isIndependentlyUseful": false,
	"returnTypes": "list<int>"
},
{
	"primaryName": "hypot",
	"names": [],
	"args": [{
		"name": "point",
		"types": "list<num>",
		"listElementTypes": "num"
	}],
	"commandGroup": "math",
	"description": "Returns the length of the hypotenuse for a triangle with a 90 degree angle between sides with the specified lengths.  The coordinates are specified in a single list of numbers.  If more than 2 numbers are in the list, the result is something called <a href=\"https://en.wikipedia.org/wiki/Euclidean_distance\" target=\"_blank\">the Euclidean distance</a>.",
	"testCases": [
		{"in": [[0, 0]], "returnValue": 0},
		{"in": [[0, 0, 0]], "returnValue": 0},
		{"in": [[0, 0, 1]], "returnValue": 1},
		{"in": [[0, 1]], "returnValue": 1},
		{"in": [[0, 1, 0]], "returnValue": 1},
		{"in": [[1, 0]], "returnValue": 1},
		{"in": [[1, 0, 0]], "returnValue": 1},
		{"in": [[3, 4]], "returnValue": 5},
		{"in": [[4, 3]], "returnValue": 5}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "if",
	"names": [],
	"args": [{
			"name": "condition",
			"types": "bool",
			"uselessCases": [false]
		}, {
			"name": "commands",
			"types": "instructionlist"
		}],
	"commandGroup": "compiled",
	"description": "Evaluates the specified commands if and only if the specified condition is true",
	"isIndependentlyUseful": false,
	"returnTypes": null
},
{
	"primaryName": "ifelse",
	"names": [],
	"args": [{
		"name": "condition",
		"types": "bool"
	}, {
		"name": "commandsIfTrue",
		"types": "*"
	}, {
		"name": "commandsIfFalse",
		"types": "*"
	}],
	"commandGroup": "compiled",
	"description": "<p>If the condition is True, the first list of commands is evaluated.  Else, the second list of commands is evaluated.</p><p>Ifelse can also be used for conditional evaluation of 2 expressions.  For example, print ifelse :x < 3 'x is less than 3.' 'x is not less than 3.'.  If ifelse is used for its return value, :commandsIfTrue and :commandsIfFalse must evaluate to something instead of acting as instruction lists.  This usage of ifelse to evaluate one of two expressions is similar to what is called the ternary operator in many other programming languages.</p>",
	"isIndependentlyUseful": false,
	"returnTypes": "*"
},
{
	"primaryName": "image",
	"names": [],
	"hintNames": ["loadpic", "setbgimg"],
	"args": [
		{
			"name": "width",
			"types": "num",
			"min": 0
		},
		{
			"name": "height",
			"types": "num",
			"min": 0
		},
		{
			"name": "url",
			"types": "string",
			"format": "absoluteUrl"
		}
	],
	"commandGroup": "turtle",
	"description": "<p>Adds a rasterized image to the drawing.  The image could be in WebP, JPEG, or PNG format.</p><p>Both image and imageAlpha support transparent areas that are possible with PNG format.  Use <span class=\"command\">imageAlpha</span> if you want to control opacity over the whole image.</p><p>Note that images over HTTP or HTTPS can be tainted.  You can learn more <span data-helpid=\"tainted-images\">here</span>.</p>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "imageAlpha",
	"names": [],
	"args": [
		{
			"name": "width",
			"types": "num",
			"min": 0
		},
		{
			"name": "height",
			"types": "num",
			"min": 0
		},
		{
			"name": "url",
			"types": "string",
			"format": "absoluteUrl"
		},
		{
			"name": "opacity",
			"types": "num",
			"min": 0,
			"max": 1
		}
	],
	"commandGroup": "turtle",
	"description": "<p>Adds a semitransparent rasterized image to the drawing.  This is the same as the <span class=\"command\">image command</span> except for the extra parameter for indicating opacity by a value from 0(for transparent) to 1(fully opaque).  The image could be in WebP, JPEG, or PNG format.  </p><p>Note that images over HTTP or HTTPS can be tainted.  You can learn more <span data-helpid=\"tainted-images\">here</span>.</p>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "indexOf",
	"names": [],
	"args": [{
		"name": "needle",
		"types": "*"
	}, {
		"name": "haystack",
		"types": "list"
	}],
	"commandGroup": "list",
	"description": "<p>Looks for the specified needle in the specified haystack and returns the 1-based index of the first match if it is found.  Equality is checked using the <span class=\"command\">equal?</span> command.</p><p>If not found, -1 is returned.</p><p>If you only want to know if the needle is anywhere in the haystack, consider using <span class=\"command\">member?</span> instead.</p>",
	"testCases": [
		{"in": [1, []], "returnValue": -1},
		{"in": [1, [5, 4, 1]], "returnValue": 3},
		{"in": [1, [5, 4, 1, 1]], "returnValue": 3},
		{"in": [2, [5, 4, 1]], "returnValue": -1}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "int",
	"names": [],
	"hintNames": ["integer"],
	"args": [{
		"name": "num1",
		"types": "num"
	}],
	"commandGroup": "math",
	"description": "Removes any decimals from the specified number, if there are any.  This does not round to the nearest integer.  int -8.7 returns -8.  int 8.7 returns 8.",
	"testCases": [
		{"in": [10], "returnValue": 10},
		{"in": [8.7], "returnValue": 8},
		{"in": [0], "returnValue": 0},
		{"in": [-8.7], "returnValue": -8}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "integerp",
	"names": ["integer?"],
	"hintNames": ["integerq"],
	"args": [
		{
			"name": "val",
			"types": "*"
		}
	],
	"commandGroup": "math",
	"description": "Checks if val is an integer. Since all integers are numbers, integer? :x implies <span class=\"command\">number?</span> :x for all values of x.  Similar commands are available for other data types such as <span class=\"command\">list?</span> and <span command=\"command\">string?</span>.",
	"testCases": [
		{"in": [10], "returnValue": true},
		{"in": [8.7], "returnValue": false},
		{"in": [0], "returnValue": true},
		{"in": [-10], "returnValue": true},
		{"in": [-8.7], "returnValue": false}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "interpolateRatio",
	"names": [],
	"args": [
		{
			"name": "easingFunction",
			"types": "easing"
		},
		{
			"name": "ratio",
			"types": "num",
			"min": 0,
			"max": 1
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "easing",
	"description": "Returns a ratio by applying an easing function to a given ratio.",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "invoke",
	"names": [],
	"argCount": {
		"min": 1
	},
	"args": [{
		"name": "name",
		"types": "cproc"
	}],
	"extraArgsInfo": {
		"types": "*"
	},
	"commandGroup": "compiled",
	"description": "<p>Calls the specified command or procedure with the specified arguments.</p><p>invoke lets you call a command or procedure named by variable.</p><p>You should use invoke only with commands or procedures that output/return something.</p>Invoke does not work with the following commands:<div class=\"restricted-invoke-commands\"></div>",
	"isIndependentlyUseful": false,
	"returnTypes": "*"
},
{
	"primaryName": "iseq",
	"names": [],
	"args": [
		{
			"name": "first",
			"types": "int"
		},
		{
			"name": "last",
			"types": "int"
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "list",
	"description": "Returns a list that starts with first and ends with last and ordered with increments by 1.  For example, iseq 1 7 returns [1 2 3 4 5 6 7].",
	"testCases": [
		{"in": [1, 0], "returnValue": []},
		{"in": [1, 1], "returnValue": [1]},
		{"in": [5, 5], "returnValue": [5]},
		{"in": [1, 5], "returnValue": [1, 2, 3, 4, 5]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list<int>"
},
{
	"primaryName": "isinstance",
	"names": [],
	"args": [
		{
			"name": "val",
			"types": "*"
		},
		{
			"name": "types",
			"types": "string",
			"format": "dataTypes",
			"sanitization": "dataTypes"
		}
	],
	"searchKeywords": [],
	"commandGroup": "string",
	"description": "Checks if the specified val is an instance of the specified data types",
	"testCases": [
		{"in": [1, "int"], "returnValue": true},
		{"in": [1, "num"], "returnValue": true},
		{"in": [1.1, "num"], "returnValue": true},
		{"in": [1.1, "int"], "returnValue": false},
		{"in": [1.1, "string"], "returnValue": false},
		{"in": ["hi", "string"], "returnValue": true},
		{"in": ["hi", "list"], "returnValue": false},
		{"in": [[], "list"], "returnValue": true}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "isotoxalStar",
	"names": [],
	"args": [
		{
			"name": "radius1",
			"types": "num",
			"min": 0
		},
		{
			"name": "radius2",
			"types": "num",
			"min": 0
		},
		{
			"name": "numPoints",
			"types": "int",
			"min": 2,
			"max": 500
		}
	],
	"searchKeywords": ["star"],
	"commandGroup": "turtle",
	"description": "<p>Draws a closed polygon for a star-like pattern.</p><p>You'll often use a number of points from 2 to 20.  If you pass 1000's or more as the numPoints, WebLogo may hang on your script because the command will take unusually long to run.</p><p>If you specify equal radius1 and radius2, you'll draw a regular polygon with twice the number of sides that you specify as numPoints.  The <span class=\"command\">regularPolygon command</span> would be a better alternative if you want a regular polygon, though.  It takes 1 less input, the command name would clarify your intentions better, and it would be slightly faster.</p><p>A special kind of isotoxal star is a regular star.  The <span class=\"command\">regularStar command</span> would be better if you want regular stars because it takes 1 less input and is simpler.</p><p>Click to learn more about <a href=\"https://studybuff.com/what-is-an-isotoxal-star/\" target=\"_blank\">isotoxal stars</a> or <a href=\"https://en.wikipedia.org/wiki/Isotoxal_figure\" target=\"_blank\">isotoxal figures</a>.</p>",
	"testCases": [
		{"in": [5, 4, 3], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "isoTrapezoid",
	"names": [],
	"args": [
		{
			"name": "startWidth",
			"types": "num"
		},
		{
			"name": "endWidth",
			"types": "num"
		},
		{
			"name": "height",
			"types": "num"
		}
	],
	"searchKeywords": ["trapezoid"],
	"commandGroup": "turtle",
	"description": "<p>Draws a polygon for an <a href=\"https://en.wikipedia.org/wiki/Isosceles_trapezoid\" target=\"_blank\">isosceles trapezoid</a>.</p><p>The <span class=\"command\">forward</span> or <span class=\"command\">stripes command</span> are simpler ways to draw a rectangle.  A rectangle is a kind of isosceles trapezoid where startWidth and endWidth are equal.  The <span class=\"command\">isoTriangle command</span> is great if :endWidth for the isoTrapezoid command would be 0.  The isoTrapezoid command is great for any other kind of isoscelese trapezoid.</p>",
	"testCases": [
		{"in": [5, 4, 3], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "isoTriangle",
	"names": [],
	"args": [
		{
			"name": "width",
			"types": "num",
			"min": 0
		},
		{
			"name": "height",
			"types": "num",
			"min": 0
		}
	],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "<p>Draws a closed polygon for an isosceles triangle.</p><p>height is the length in the direction of the turtle's current heading.  width is going 90 degrees left and right from the current heading.</p><p>width is the exact length of the only side that has a distinct length.  The other two sides have a length you can determine from the <a href=\"https://en.wikipedia.org/wiki/Pythagorean_theorem\" target=\"_blank\">Pythagorean theorum</a>. In WebLogo, the length of the equal sides would be <span class=\"command\">hypot</span> [:width / 2 :height].</p>",
	"testCases": [
		{"in": [5, 4], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "item",
	"names": [],
	"hintNames": ["nth"],
	"args": [
		{
			"name": "index",
			"types": "int",
			"min": 1
		},
		{
			"name": "thing",
			"types": "list|string",
			"minLen": 1
		}
	],
	"searchKeywords": [],
	"commandGroup": "list",
	"description": "Returns the item at the specified index.  The index must be at least 1",
	"testCases": [
		{"in": [0, [0, 1]], "isThrowing": true},
		{"in": [3, [0, 1]], "isThrowing": true},
		{"in": [1, [0, 1]], "returnValue": 0},
		{"in": [2, [0, 1]], "returnValue": 1},
		{"in": [1, "abc"], "returnValue": "a"}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "*"
},
{
	"primaryName": "jumpBackward",
	"names": [],
	"hintNames": [],
	"args": [
		{
			"name": "distance",
			"types": "num"
		}
	],
	"searchKeywords": ["path"],
	"commandGroup": "turtle",
	"description": "Moves the turtle backward by the specified distance without drawing a line.  If the pen is up, there is no difference between jumpBackward and <span class=\"command\">backward</span>.  If the pen is down and not transparent, <span class=\"command\">backward</span> draws a line.  See also <span class=\"command\">jumpForward</span>",
	"testCases": [
		{"in": [1], "returnValue": null},
		{"in": [-1], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "jumpForward",
	"names": [],
	"hintNames": ["move"],
	"args": [
		{
			"name": "distance",
			"types": "num"
		}
	],
	"searchKeywords": ["path"],
	"commandGroup": "turtle",
	"description": "Moves the turtle forward by the specified distance without drawing a line.  If the pen is up, there is no difference between jumpForward and <span class=\"command\">forward</span>.  If the pen is down and not transparent, <span class=\"command\">forward</span> draws a line.",
	"testCases": [
		{"in": [1], "returnValue": null},
		{"in": [-1], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "jumpIn",
	"names": [],
	"args": [
		{
			"name": "distance",
			"types": "num"
		}
	],
	"searchKeywords": ["path"],
	"commandGroup": "turtle",
	"description": "Moves the turtle in by the specified distance.  jumpIn :x is the same as <span class=\"command\">jumpOut</span> -:x.",
	"testCases": [
		{"in": [1], "returnValue": null},
		{"in": [-1], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "jumpLeft",
	"names": [],
	"args": [
		{
			"name": "distance",
			"types": "num"
		}
	],
	"searchKeywords": ["path"],
	"commandGroup": "turtle",
	"description": "Moves the turtle to the left by the specified distance.  This is very similar but in opposite directions to <span class=\"command\">jumpRight</span>.  Unlike <span class=\"command\">forward</span> and <span class=\"command\">back</span>, the pen state is ignored and no lines are generally drawn.  In other words, the turtle jumps instead of drags the pen.",
	"testCases": [
		{"in": [1], "returnValue": null},
		{"in": [-1], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "jumpOut",
	"names": [],
	"args": [
		{
			"name": "distance",
			"types": "num"
		}
	],
	"searchKeywords": ["path"],
	"commandGroup": "turtle",
	"description": "Moves the turtle in by the specified distance.  jumpOut :x is the same as <span class=\"command\">jumpIn</span> -:x.",
	"testCases": [
		{"in": [1], "returnValue": null},
		{"in": [-1], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "jumpRight",
	"names": [],
	"args": [
		{
			"name": "distance",
			"types": "num"
		}
	],
	"searchKeywords": ["path"],
	"commandGroup": "turtle",
	"description": "Moves the turtle to the right by the specified distance.  Unlike <span class=\"command\">forward</span> and <span class=\"command\">back</span>, the pen state is ignored and no lines are generally drawn.  In other words, the turtle jumps instead of drags the pen.",
	"testCases": [
		{"in": [1], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "jumpTo",
	"names": [],
	"hintNames": ["moveto"],
	"args": [
		{
			"name": "newPosition",
			"types": "list<num>",
			"listElementTypes": "num",
			"minLen": 2,
			"maxLen": 3
		}
	],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "Moves the turtle to the specified position.  Unlike <span class=\"command\">setPos</span>, <span class=\"command\">setXY</span>, and <span class=\"command\">setXYZ</span> the pen state is ignored and no lines are generally drawn.  In other words, the turtle jumps instead of drags the pen.",
	"testCases": [
		{"in": [[1, 2,3]], "returnValue": null},
		{"in": [[1, 2]], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "label",
	"names": [],
	"hintNames": ["drawtext", "filltext", "graphicstype", "stampchar",
	"stroketext", "tp", "ttext", "turtleprint"],
	"args": [
		{
			"name": "text",
			"types": "list|string",
			"sanitization": "listToString"
		}
	],
	"commandGroup": "turtle",
	"description": "Draws the specified text",
	"testCases": [
		{"in": ["Hello World"], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "last",
	"names": [],
	"hintNames": [],
	"args": [{
		"name": "list1",
		"types": "list|string",
		"minLen": 1
	}],
	"searchKeywords": [],
	"commandGroup": "list",
	"description": "Returns the last item from a list or last character from a string",
	"testCases": [
		{"in": [[1]], "returnValue": 1},
		{"in": [[1, 2]], "returnValue": 2},
		{"in": [[1, 2, 3]], "returnValue": 3},
		{"in": ["hello"], "returnValue": "o"},
		{"in": [[]], "returnValue": null}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "*"
},
{
	"primaryName": "left",
	"names": ["li", "lt"],
	"hintNames": ["es", "esquerda", "links", "lturn", "tl", "turnleft"],
	"args": [{
		"name": "angleDegrees",
		"types": "num",
		"uselessCases": [0]
	}],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "Turns the turtle left by the specified angle in degrees",
	"testCases": [
		{"in": [10], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "lessp",
	"names": ["less?"],
	"hintNames": ["less"],
	"args": [{
		"name": "val1",
		"types": "num"
	},{
		"name": "val2",
		"types": "num"
	}
	],
	"commandGroup": "math",
	"description": "Returns true if :val1 &lt; :val2. Returns false otherwise.  Consider using the &lt; operator instead since it is shorter and more similar to the way the comparison is expressed in mathematical work.",
	"testCases": [
		{"in": [1, 2], "returnValue": true},
		{"in": [2, 1], "returnValue": false},
		{"in": [1, 1], "returnValue": false}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "bool"
},
{
	"primaryName": "lineCap",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns the current line cap.  This may be butt, round, or square.",
	"isIndependentlyUseful": false,
	"returnTypes": "string"
},
{
	"primaryName": "lineJoinStyle",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns the current line join style.  This may be miter, round, or bevel.",
	"isIndependentlyUseful": false,
	"returnTypes": "string"
},
{
	"primaryName": "linePointDistance",
	"names": [],
	"args": [
		{
			"name": "linePoint1",
			"types": "list<num>",
			"minLen": 2
		},
		{
			"name": "linePoint2",
			"types": "list<num>",
			"minLen": 2
		},
		{
			"name": "point",
			"types": "list<num>",
			"minLen": 2
		}
	],
	"compositeValidation": [
		{"type": "equalLengthList", "arg1": "linePoint1", "arg2": "linePoint2"},
		{"type": "equalLengthList", "arg1": "linePoint1", "arg2": "point"}
	],
	"commandGroup": "linearAlgebra",
	"description": "<p>Returns the distance between the indicated line and point.</p><p>The line is indicated by specifying 2 distinct points linePoint1 and linePoint2 that are on the line.</p><p>This calculation works with any dimension from 2 or higher.  All points must be represented by lists of equal length.</p>",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "list",
	"names": [],
	"argCount": "?",
	"args": [{
		"name": "element1",
		"types": "*"
	},{
		"name": "element2",
		"types": "*"
	}
	],
	"extraArgsInfo": {
		"types": "*"
	},
	"commandGroup": "list",
	"description": "Returns a <span class=\"data-type\">list</span> containing the specified values.  The list command is available for compatibility with other Logo interpreters but it has no ability that isn't served by square brackets.  (list 1 2 3) is the same as [1 2 3].  list 5 4 is the same as [5 4].",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [], "returnValue": []},
		{"in": [1], "returnValue": [1]},
		{"in": [1, 2], "returnValue": [1, 2]},
		{"in": ["a", "b"], "returnValue": ["a", "b"]}
	],
	"isStaticEvaluationSafe": true,
	"returnTypes": "list"
},
{
	"primaryName": "listp",
	"names": ["list?"],
	"hintNames": ["isarray"],
	"args": [{
		"name": "val",
		"types": "*"
	}],
	"commandGroup": "list",
	"description": "Checks if val is a list.",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [[]], "returnValue": true},
		{"in": [{}], "returnValue": false},
		{"in": [1], "returnValue": false},
		{"in": [true], "returnValue": false}
	],
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "ln",
	"names": [],
	"args": [
		{
			"name": "num",
			"types": "num",
			"min": 0
		}
	],
	"commandGroup": "math",
	"searchKeywords": ["math"],
	"description": "Outputs the natural logarithm of the num.  That is, e (2.718281828...) raised to the output = num",
	"testCases": [
		{"in": [1], "returnValue": 0}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "localmake",
	"names": [],
	"args": [{
		"name": "variableName",
		"types": "string"
	},{
		"name": "value",
		"types": "*"
	}],
	"commandGroup": "compiled",
	"description": "Assigns a value to the specified local variable.  This is different from <span class=\"command\">make</span> in that make may set a value to a global variable.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "log10",
	"names": [],
	"hintNames": ["log"],
	"args": [{
		"name": "num1",
		"types": "num",
		"min": 0
	}],
	"commandGroup": "math",
	"searchKeywords": ["math"],
	"description": "Returns the base 10 log of num1.  log10 10 returns 1.  log10 100 returns 2.  log10 3 returns 0.4771212547196624.",
	"testCases": [
		{"in": [10], "returnValue": 1},
		{"in": [100], "returnValue": 2},
		{"in": [1000], "returnValue": 3},
		{"in": [1], "returnValue": 0}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "lowerCase",
	"names": [],
	"hintNames": ["tolowercase"],
	"args": [
		{
			"name": "s",
			"types": "string"
		}
	],
	"commandGroup": "string",
	"description": "Returns the lower case version of the specified string s.  lowerCase \"HelloWorld returns  helloworld",
	"testCases": [
		{"in": [""], "returnValue": ""},
		{"in": ["hi"], "returnValue": "hi"},
		{"in": ["HELLOWorld"], "returnValue": "helloworld"}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "string"
},
{
	"primaryName": "lput",
	"names": [],
	"hintNames": ["lastput", "pl", "putlast"],
	"args": [
		{
			"name": "thing",
			"types": "*"
		},
		{
			"name": "list1",
			"types": "list"
		}
	],
	"commandGroup": "list",
	"description": "Returns a list the same as list1 except with a new element, thing, added to its end.  lput 3 [1 2] returns [1 2 3].",
	"testCases": [
		{"in": [3, [1, 2]], "returnValue": [3, 1, 2]},
		{"in": [3, []], "returnValue": [3]},
		{"in": [[], []], "returnValue": [[]]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list"
},
{
	"primaryName": "lShift",
	"names": [],
	"args": [
		{
			"name": "int",
			"types": "int"
		},
		{
			"name": "amount",
			"types": "int"
		}
	],
	"commandGroup": "math",
	"description": "<p>Returns the int shifted to the left by amount bits.  This is usually similar to an expression like :int * <span class=\"command\">power</span> 2 :amount.</p><p>You may want to use lShift instead of power because lShift is faster and involves less code.</p><p>If the int and amount are both negative, the bits are still filled with 0 so you may not get results you would not get with the power expression mentioned before.  If you want to extend using int's sign, see the <span class=\"command\">aShift command</span>.</p>",
	"testCases": [
		{"in": [5, 0], "returnValue": 5},
		{"in": [0, 1], "returnValue": 0},
		{"in": [1, 1], "returnValue": 2},
		{"in": [5, 2], "returnValue": 20},
		{"in": [20, -1], "returnValue": 10},
		{"in": [-10, -1], "returnValue": 2147483643}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "make",
	"names": [],
	"hintNames": ["faca", "faça", "maak"],
	"args": [{
		"name": "variableName",
		"types": "string"
	},{
		"name": "value",
		"types": "*"
	}],
	"commandGroup": "compiled",
	"description": "<p>Assigns a value to the specified variable or parameter.  If a variable with the specified name is in local scope, the local variable will be assigned instead of a global variable.  If no variable exists, a global variable will be created.</p><p>To declare and use variables within procedurers, <span class=\"command\">localmake</span> is often better.  Localmake declares and sets local variables only.  In the interest of writing the clearest, most easily understood code, it is a good practice to use make for nothing but global variables and localmake for assigning to any other variable or parameter.</p>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "max",
	"names": [],
	"hintNames": ["maximum"],
	"args": [{
		"name": "value1",
		"types": "num"
	},{
		"name": "value2",
		"types": "num"
	}],
	"commandGroup": "math",
	"argCount": "?",
	"extraArgsInfo": {
		"types": "num"
	},
	"description": "Returns the maximum of the specified values",
	"testCases": [
		{"in": [-1, 1], "returnValue": 1},
		{"in": [-1, 1, -2, 3], "returnValue": 3},
		{"in": [1, -1], "returnValue": 1},
		{"in": [0, 0], "returnValue": 0}
	],
	"isStaticEvaluationSafe": true,
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "memberp",
	"names": ["member?"],
	"hintNames": ["amongq", "member", "memberq"],
	"args": [{
		"name": "needle",
		"types": "*"
	},{
		"name": "haystack",
		"types": "list|string"
	}],
	"commandGroup": "string",
	"description": "<p>Checks if needle is in the haystack.</p><p>If haystack is a list, member? looks for an element in haystack such that <span class=\"command\">equal?</span> :needle .. is true.</p>",
	"testCases": [
		{"in": [[1], [[1], [2]]], "returnValue": true},
		{"in": [[4], [[1], [2]]], "returnValue": false},
		{"in": [1, [1, 2]], "returnValue": true},
		{"in": [-1, [1, 2]], "returnValue": false},
		{"in": ["a", "abcd"], "returnValue": true},
		{"in": ["z", "abcd"], "returnValue": false}
	],
	"isStaticEvaluationSafe": true,
	"isIndependentlyUseful": false,
	"returnTypes": "bool"
},
{
	"primaryName": "min",
	"names": [],
	"args": [{
		"name": "value1",
		"types": "num"
	},{
		"name": "value2",
		"types": "num"
	}],
	"commandGroup": "math",
	"argCount": "?",
	"extraArgsInfo": {
		"types": "num"
	},
	"description": "Returns the minimum of the specified values",
	"testCases": [
		{"in": [-1, 1], "returnValue": -1},
		{"in": [-1, 1, -2, 3], "returnValue": -2},
		{"in": [1, -1], "returnValue": -1},
		{"in": [0, 0], "returnValue": 0}
	],
	"isStaticEvaluationSafe": true,
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "mix",
	"names": ["lerp"],
	"args": [{
			"name": "val1",
			"types": "alphacolor|list<alphacolor|list|num>|num",
			"typeEqualitySymbol": "x"
		},
		{
			"name": "val2",
			"types": "alphacolor|list<alphacolor|list|num|transparent>|num|transparent",
			"typeEqualitySymbol": "x",
			"disableTypeEqualitySymbolIfTypes": "transparent"
		},
		{
			"name": "ratio",
			"types": "num",
			"min": 0,
			"max": 1
		}
	],
	"searchKeywords": ["interpolation"],
	"commandGroup": "math",
	"description": "<p>Returns a mix of the specified values. The ratio should be between 0 and 1.  The ratio represents how strongly each value affects the result.  If ratio was 0.5, the two values are averaged together equally.</p><p>mix can be used to mix colors with a specified ratio too.  Mixing colors works by mixing the red, green, and blue values for each color.  You can also mix 2 alphacolor's.  You can mix a color or alphacolor with transparent too but the transparent value must be the second argument.</p><p>An alternative name of the command is \"lerp\" because mixing numbers or points can also be described as linear interpolation.  If you want to do interpolation, you may be interested in easing functions and the <span class=\"command\">interpolateRatio command</span>.</p>",
	"testCases": [
		{"in": [0, 10, 0], "returnValue": 10},
		{"in": [0, 10, 1], "returnValue": 0},
		{"in": [0, 10, 0.5], "returnValue": 5},
		{"in": [10, 20, 0.5], "returnValue": 15},
		{"in": [[0, 0, 0], [0, 200, 100], 0.5], "returnValue": [0, 100, 50]},
		{"in": ["black", "white", 0.5], "returnValue": [127.5, 127.5, 127.5]},
		{"in": [[0, 0, 0], "#fff", 0.5], "returnValue": [127.5, 127.5, 127.5]},
		{"in": [[0, 0, 0], "#0fff", 0.5], "returnValue": [127.5, 127.5, 127.5, 127.5]},
		{"in": [[1, 1], [0, 0], 0.6], "returnValue": [0.6, 0.6]}
	],
	"isStaticEvaluationSafe": true,
	"isIndependentlyUseful": false,
	"returnTypes": "list<alphacolor|list|num>|num"
},
{
	"primaryName": "mixItems",
	"names": [],
	"args": [{
			"name": "items",
			"types": "list<alphacolor|list|num|transparent>",
			"listElementTypes": "alphacolor|list<alphacolor|list|num|transparent>|num|transparent",
			"minLen": 2
		},
		{
			"name": "ratio",
			"types": "num",
			"min": 0,
			"max": 1
		}
	],
	"commandGroup": "list",
	"description": "<p>Returns a mix between 2 elements in the specified list.</p><p>mixItems is useful for blending colors from a list to draw gradient-like effects.  It is also flexible enough to mix numbers or other lists similar to the <span class=\"command\">mix command</span>.</p><p>ratio is a number from 0 to 1 indicating which 2 elements to mix and how much to what mixing ratio.  A ratio of 0 or 1 both refer to the first element in the list.  If there were 10 items, a ratio of 0.9 to 1 will mix the first and last items.</p><p>If you want to mix between 2 items only, consider using the <span class=\"command\">mix command</span>.</p><p>If you want ratios 0 and 1 to represent the beginning and ending indexes of the list, use <span class=\"command\">mixItems2</span> instead.</p>",
	"testCases": [
		{"in": [[0, 10], 0], "returnValue": 0},
		{"in": [[0, 10], 0.5], "returnValue": 10},
		{"in": [[0, 10], 0.25], "returnValue": 5},
		{"in": [[10, 0], 0.5], "returnValue": 0},
		{"in": [["black", "white"], 0.25], "returnValue": [127.5, 127.5, 127.5]}
	],
	"isStaticEvaluationSafe": true,
	"isIndependentlyUseful": false,
	"returnTypes": "list<alphacolor|list|num>|num"
},
{
	"primaryName": "mixItems2",
	"names": [],
	"args": [{
			"name": "items",
			"types": "list<alphacolor|list|num|transparent>",
			"listElementTypes": "alphacolor|list<alphacolor|list|num|transparent>|num|transparent",
			"minLen": 2
		},
		{
			"name": "ratio",
			"types": "num",
			"min": 0,
			"max": 1
		}
	],
	"commandGroup": "list",
	"description": "<p>Returns a mix between 2 elements in the specified list.</p><p>mixItems2 is similar to mixItems except that mixItems2 does not wrap the beginning and ending values.  A ratio of 1 means the last value in the items list only.</p>",
	"testCases": [
		{"in": [[0, 10], 0], "returnValue": 0},
		{"in": [[0, 10], 0.5], "returnValue": 5},
		{"in": [[0, 10], 0.25], "returnValue": 2.5},
		{"in": [[10, 0], 0.5], "returnValue": 5},
		{"in": [["black", "white"], 0.5], "returnValue": [127.5, 127.5, 127.5]}
	],
	"isStaticEvaluationSafe": true,
	"isIndependentlyUseful": false,
	"returnTypes": "list<alphacolor|list|num>|num"
},
{
	"primaryName": "modulo",
	"names": [],
	"hintNames": ["mod"],
	"args": [
		{
			"name": "dividend",
			"types": "num"
		},
		{
			"name": "divisor",
			"types": "num"
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Calculates the remainder of dividing dividend by divisor. Divisor must not be 0.  Modulo is very similar to the <span class=\"command\">remainder</span> command except that the result always matches sign of the divisor.",
	"testCases": [
		{"in": [5, 3], "returnValue": 2},
		{"in": [-5, 3], "returnValue": 1},
		{"in": [-5, 4], "returnValue": 3},
		{"in": [-5, -5], "returnValue": -5},
		{"in": [-5, 5], "returnValue": 0},
		{"in": [3.8, 1.2], "returnValue": 0.2}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "nChooseK",
	"names": [],
	"hintNames": ["choose", "combination", "ncr"],
	"args": [{
		"name": "n",
		"types": "int",
		"min": 1
	}, {
		"name": "k",
		"types": "int",
		"min": 0
	}],
	"commandGroup": "math",
	"description": "Returns the number of different sets of size k that can be chosen or selected from a set of n distinct elements.  You can learn more from the <a href=\"https://en.wikipedia.org/wiki/Combination\" target=\"_blank\">Combination article on wikipedia</a>.",
	"testCases": [
		{"in": [1, 1], "returnValue": 1},
		{"in": [1, 2], "returnValue": 0},
		{"in": [10, 5], "returnValue": 252}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "not",
	"names": [],
	"args": [{
		"name": "boolValue",
		"types": "bool|list|num|string"
	}],
	"commandGroup": "math",
	"description": "Returns the logical opposite to the specified value.  For example, 'not true' is false and 'not false' is true.",
	"testCases": [
		{"in": [true], "returnValue": false},
		{"in": [false], "returnValue": true},
		{"in": [[1,2,3]], "returnValue": false}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "notEqualp",
	"names": ["notequal?"],
	"args": [
		{
			"name": "val1",
			"types": "bool|list|num|string|transparent"
		},
		{
			"name": "val2",
			"types": "bool|list|num|string|transparent"
		}
	],
	"commandGroup": "math",
	"description": "Returns the same as chaining <span class=\"command\">not</span> with <span class=\"command\">equal?</span>.  Consider using the &lt;&gt; (not equal) operator instead.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "numberp",
	"names": ["number?"],
	"hintNames": ["isnumber", "numberq"],
	"args": [
		{
			"name": "val",
			"types": "*"
		}
	],
	"commandGroup": "math",
	"description": "Checks if val is a number. Similar commands are available for other data types such as <span class=\"command\">list?</span> and <span command=\"command\">string?</span>.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "oddp",
	"names": ["odd?"],
	"args": [
		{
			"name": "int1",
			"types": "int"
		}
	],
	"commandGroup": "math",
	"description": "Returns the truth of the statement, ':int1 is odd'.",
	"testCases": [
		{"in": [0], "returnValue": false},
		{"in": [1], "returnValue": true},
		{"in": [2], "returnValue": false},
		{"in": [3], "returnValue": true}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "or",
	"names": [],
	"hintNames": ["any", "anyof", "either"],
	"args": [
		{
			"name": "bool1",
			"types": "bool"
		},
		{
			"name": "bool2",
			"types": "bool"
		}
	],
	"argCount": "?",
	"extraArgsInfo": {
		"types": "bool"
	},
	"searchKeywords": ["math", "logic", "operators"],
	"commandGroup": "math",
	"description": "Returns true if any argument is true.  Returns false only if all of the arguments are false.  See <a class=\"command\">bitOr</a> if you want to calculate a bitwise or.",
	"testCases": [
		{"in": [false,false], "returnValue": false},
		{"in": [false, true], "returnValue": true},
		{"in": [true, false], "returnValue": true},
		{"in": [true, true], "returnValue": true}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "orientation",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "<p>Returns the current orientation of the turtle as a 3 by 3 transformation matrix.  The result can later be passed to <span class=\"command\">setOrientation</span>.</p>  <p>If you're working with 2D graphics, <span class=\"command\">heading</span> is a much simpler command that should meet your needs more efficiently and with more understandable code.</p>",
	"testCases": [
		{"in": [], "returnValue": [[1, 0, 0], [0, 1, 0], [0, 0, 1]]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnLengthInfo": {
		"min": 3,
		"max": 3
	},
	"returnTypes": "list<list<num>>"
},
{
	"primaryName": "output",
	"names": ["op"],
	"hintNames": ["result", "return"],
	"args": [{
		"name": "outputValue",
		"types": "*"
	}],
	"commandGroup": "compiled",
	"description": "Outputs a value from a procedure and ends execution of commands within the procedure",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "parallelogram",
	"names": [],
	"args": [
		{
			"name": "width",
			"types": "num"
		},
		{
			"name": "slantedHeight",
			"types": "num"
		},
		{
			"name": "angleDegrees",
			"types": "num"
		}
	],
	"commandGroup": "turtle",
	"description": "<p>The parallelogram command draws a filled parallelogram using the current pen, fill, position, and heading.</p><p>width is the length of the 2 sides to the parallelogram that run perpendicular to the turtle's current heading.</p><p>slantedHeight is the length of the other 2 sides.</p><p>angleDegrees is the clockwise angle indicating slope of the sides that correspond with slantedHeight.  Note that this angle is relative to the turtle's heading.  The heading of the side lines would be heading + :angleDegrees.</p>",
	"testCases": [
		{"in": [100, 50, 0], "returnValue": null},
		{"in": [100, 50, 45], "returnValue": null},
		{"in": [100, 50, 90], "returnValue": null},
		{"in": [100, 50, -45], "returnValue": null},
		{"in": [100, 50, -90], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "penColor",
	"names": ["pc"],
	"hintNames": ["pencolour"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Outputs the current pen color as a list of 3 integers from 0 to 255.",
	"testCases": [
		{"in": [], "returnValue": [0, 0, 0]}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "alphacolorlist|transparent"
},
{
	"primaryName": "penDown",
	"names": ["pd"],
	"hintNames": ["drop", "penneer"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Presses the turtle's pen down.  This causes the turtle's movements <span class=\"command\">forward</span> and <span class=\"command\">backward</span> to draw its path.",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "penDownp",
	"names": ["pendown?"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns true if the pen is down.",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [], "returnValue": true}
	],
	"returnTypes": "bool"
},
{
	"primaryName": "penGradient",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns the current pen gradient, if there is one.  penGradient returns the gradient set using the <span class=\"command\">setPenGradient command</span>.",
	"isIndependentlyUseful": false,
	"returnTypes": "gradient"
},
{
	"primaryName": "penGradientp",
	"names": ["pengradient?"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns true if and only if a pen gradient is active.",
	"isIndependentlyUseful": false,
	"returnTypes": "bool"
},
{
	"primaryName": "penNormal",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Sets all pen properties to their initial values.  PenNormal sets pen down, pen size to 1, and color to black.  PenNormal is like calling the commands <span class=\"command\">penDown</span> <span class=\"command\">setPenColor</span> \"black <span class=\"command\">setPenSize</span> 1",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "penSize",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns the size or width of the pen",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "num"
},
{
	"primaryName": "penUp",
	"names": ["pu"],
	"hintNames": ["lift", "penop", "po"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Lifts the turtle's pen.  When the pen is up, moving <span class=\"command\">forward</span> and <span class=\"command\">backward</span> will not draw the path.",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "pi",
	"names": [],
	"args": [],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Returns the value of &pi; which is roughly 3.141592653589793",
	"testCases": [
		{"in": [], "returnValue": 3.141592653589793}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "pick",
	"names": [],
	"args": [{
		"name": "list1",
		"types": "list|string",
		"minLen": 1
	}],
	"searchKeywords": ["random"],
	"commandGroup": "list",
	"description": "Returns a randomly selected element from a list or randomly selected character from a string.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "*"
},
{
	"primaryName": "pitch",
	"names": [],
	"args": [],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "Returns the current pitch angle in degrees.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "num"
},
{
	"primaryName": "pitchDown",
	"names": [],
	"hintNames": ["downpitch"],
	"args": [{
		"name": "angleDegrees",
		"types": "num"
	}],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "Adjusts the turtle's orientation pitch angle down the specified angle.  pitchDown -5 is the same as <span class=\"command\">pitchUp</span> 5.",
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"testCases": [
		{"in": [5], "returnValue": null},
		{"in": [-5], "returnValue": null}
	],
	"returnTypes": null
},
{
	"primaryName": "pitchUp",
	"names": [],
	"hintNames": ["uppitch"],
	"args": [{
		"name": "angleDegrees",
		"types": "num"
	}],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "Adjusts the turtle's orientation pitch angle up the specified angle.",
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"testCases": [
		{"in": [5], "returnValue": null},
		{"in": [-5], "returnValue": null}
	],
	"returnTypes": null
},
{
	"primaryName": "plist",
	"names": [],
	"hintNames": ["proplist"],
	"args": [
		{
			"name": "plistVarName",
			"types": "string",
			"refTypes": "plist"
		}
	],
	"searchKeywords": ["plist"],
	"commandGroup": "plist",
	"description": "Returns a list for the specified property list.  Every key-value pair from the property list is represented in the output list as 2 elements.  The first is the key and the second is the value.<br><br>The output list is a shallow copy of the property list and you should not expect any changes to the resulting list to be reflected in the property list.  The plist command is not needed to print your property list but plist may be useful for other list operations.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list"
},
{
	"primaryName": "polyEnd",
	"names": [],
	"hintNames": ["end_fill", "endface", "endfill", "endpoly", "fillpath"],
	"args": [],
	"searchKeywords": ["path"],
	"commandGroup": "turtle",
	"description": "Ends a polygon.  This ends the process of defining a polygon.  Use <span class=\"command\">polyStart</span> to start the polygon.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "polyStart",
	"names": [],
	"hintNames": ["begin_fill", "beginpath", "startfill", "startpoly"],
	"args": [],
	"searchKeywords": ["path"],
	"commandGroup": "turtle",
	"description": "Starts a polygon.  This starts the process of defining a polygon.  Subsequent calls to commands to move the turtle will add to the polygon.  Use <span class=\"command\">polyEnd</span> to end the polygon.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "pos",
	"names": ["position"],
	"hintNames": ["posxyz", "positie"],
	"args": [],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "<p>Returns a list representing the turtle's position.</p><p>If you want to set the position, you could use <span class=\"command\">setPos</span> or <span class=\"command\">setXY</span>.</p><p>pos returns a list of 3 coordinates.  If you want just x and y in a list, see command <span class=\"command\">xyCor</span>.</p>",
	"testCases": [
		{"in": [], "returnValue": [0, 0, 0]}
	],
	"isIndependentlyUseful": false,
	"returnLengthInfo": {
		"min": 3,
		"max": 3
	},
	"returnTypes": "list<num>"
},
{
	"primaryName": "power",
	"names": [],
	"hintNames": ["pow"],
	"args": [
		{
			"name": "base",
			"types": "num"
		},
		{
			"name": "exponent",
			"types": "num"
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Returns base raised to the specified exponent.  For example, power 2 3 outputs 8",
	"testCases": [
		{"in": [1, 0], "returnValue": 1},
		{"in": [0, 1], "returnValue": 0},
		{"in": [2, 2], "returnValue": 4},
		{"in": [2, 3], "returnValue": 8},
		{"in": [3, 2], "returnValue": 9},
		{"in": [3, 3], "returnValue": 27},
		{"in": [2, 8], "returnValue": 256},
		{"in": [4, 0.5], "returnValue": 2}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "print",
	"names": ["pr", "show"],
	"hintNames": ["mo", "mostre", "printnl", "printse", "say", "write"],
	"args": [{
		"name": "valueToPrint",
		"types": "*"
	}],
	"argCount": "?",
	"commandGroup": "turtle",
	"description": "Prints the specified value to the command box.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "product",
	"names": [],
	"hintNames": ["mul", "multiply", "prod"],
	"args": [{
			"name": "num1",
			"types": "num"
		}, {
			"name": "num2",
			"types": "num"
		}
	],
	"argCount": {
		"min": 2
	},
	"extraArgsInfo": {
		"types": "num"
	},
	"commandGroup": "math",
	"description": "<p>Returns the product of all inputted numbers.</p><p>See also the <span class=\"command\">dot command</span> which performs the dot product on lists of numbers.  The <span class=\"command\">cross command</span> calculates a cross product between numeric vectors of length 3.</p>",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "push",
	"names": [],
	"args": [{
		"name": "listname",
		"types": "string",
		"refTypes": "list"
	},
	{
		"name": "val",
		"types": "*"
	}
	],
	"commandGroup": "compiled",
	"description": "Pushes val to the beginning of the specified list.  The <span class=\"command\">queue command</span> inserts at the opposite end of the list.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "queue",
	"names": [],
	"args": [{
		"name": "listname",
		"types": "string",
		"refTypes": "list"
	}, {
		"name": "thing",
		"types": "*"
	}
	],
	"commandGroup": "compiled",
	"description": "Adds the specified thing to the end of the specified list.  The listname must be the name of a variable storing a list.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "queue2",
	"names": [],
	"args": [{
		"name": "listname",
		"types": "string",
		"refTypes": "list"
	}, {
		"name": "thing",
		"types": "*"
	}
	],
	"commandGroup": "list",
	"description": "Adds the specified thing to the end of the specified list.  The listname must be the name of a variable storing a list.  Unlike the <span class=\"command\">queue command</span>, queue2 modifies the current instance of list.  If 2 variables refer to the same list before calling queue2, both will appear updated after.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "quotient",
	"names": [],
	"hintNames": ["deeldoor", "divide"],
	"args": [{
		"name": "dividend",
		"types": "num"
	}, {
		"name": "divisor",
		"types": "num",
		"errorCases": [0]
	}
	],
	"argCount": {
		"min": 1,
		"max": 2
	},
	"commandGroup": "math",
	"description": "Returns the dividend / divisor, if both inputs are given.  Returns the reciprocal or 1 / dividend if divisor is not specified.  You should use curved brackets () if you want to specify only 1 input.",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [5, 2], "returnValue": 2.5},
		{"in": [4, 2], "returnValue": 2},
		{"in": [2], "returnValue": 0.5},
		{"in": [0, 1], "returnValue": 0},
		{"in": [1, 2], "returnValue": 0.5},
		{"in": [10, 2], "returnValue": 5},
		{"in": [-10, 2], "returnValue": -5},
		{"in": [10, -2], "returnValue": -5}
	],
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "radArcCos",
	"names": [],
	"args": [{
		"name": "ratio",
		"types": "num",
		"min": -1,
		"max": 1
	}],
	"searchKeywords": ["math", "trig", "radian"],
	"commandGroup": "math",
	"description": "Returns angle corresponding with the cos ratio.  The angle is measured in <a target=\"_blank\" href=\"https://simple.wikipedia.org/wiki/Radian\">radians</a>.  If you want to get the angle in degrees, see the <span class=\"command\">arcCos command</span>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "radArcSin",
	"names": [],
	"args": [{
		"name": "ratio",
		"types": "num",
		"min": -1,
		"max": 1
	}],
	"searchKeywords": ["arc", "math", "radian", "sin", "trig"],
	"commandGroup": "math",
	"description": "Returns angle corresponding with the sin ratio.  The angle is measured in <a target=\"_blank\" href=\"https://simple.wikipedia.org/wiki/Radian\">radians</a>.  If you want to get the angle in degrees, see the <span class=\"command\">arcSin command</span>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "radArcTan",
	"names": [],
	"args": [{
		"name": "ratio",
		"types": "num"
	}],
	"searchKeywords": ["arc", "math", "radian", "tan", "trig"],
	"commandGroup": "math",
	"description": "Returns angle corresponding with the tan ratio.  The angle is measured in <a target=\"_blank\" href=\"https://simple.wikipedia.org/wiki/Radian\">radians</a>.  If you want to get the angle in degrees, see the <span class=\"command\">arcTan command</span>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "radArcTan2",
	"names": [],
	"args": [
		{
			"name": "deltaX",
			"types": "num"
		},
		{
			"name": "deltaY",
			"types": "num"
		}
	],
	"searchKeywords": ["arc", "math", "tan", "trig", "radian"],
	"commandGroup": "math",
	"description": "Returns the angle in radians corresponding with the specified deltaX and deltaY coordinates.  If you want the angle in degrees, see the <span class=\"command\">arcTan2 command</span>",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [1, 0], "returnValue": 0}
	],
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "radCos",
	"names": [],
	"args": [{
		"name": "angleRadians",
		"types": "num"
	}],
	"searchKeywords": ["cos", "math", "radian", "trig"],
	"commandGroup": "math",
	"description": "Returns cos ratio corresponding with the specified angle.  The angle is assumed to be measured in <a target=\"_blank\" href=\"https://simple.wikipedia.org/wiki/Radian\">radians</a>.  2 &pi; radians = 360 degrees.  If you want to specify the angle in degrees, see the <span class=\"command\">cos command</span>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "radSin",
	"names": [],
	"args": [{
		"name": "angleRadians",
		"types": "num"
	}],
	"searchKeywords": ["math", "radian", "sin", "trig"],
	"commandGroup": "math",
	"description": "Returns sin ratio corresponding with the specified angle.  The angle is assumed to be measured in <a target=\"_blank\" href=\"https://simple.wikipedia.org/wiki/Radian\">radians</a>.  2 &pi; radians = 360 degrees.  If you want to specify the angle in degrees, see the <span class=\"command\">sin command</span>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "radTan",
	"names": [],
	"args": [{
		"name": "angleRadians",
		"types": "num"
	}],
	"searchKeywords": ["math", "tan", "trig", "radian"],
	"commandGroup": "math",
	"description": "Returns tan ratio corresponding with the specified angle.  The angle is assumed to be measured in <a target=\"_blank\" href=\"https://simple.wikipedia.org/wiki/Radian\">radians</a>.  2 &pi; radians = 360 degrees.  If you want to specify the angle in degrees, see the <span class=\"command\">tan command</span>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "random",
	"names": ["rand"],
	"hintNames": ["rn"],
	"args": [{
			"name": "range",
			"types": "num",
			"min": 0
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Returns a random integer from and including 0 to but excluding the specified maximum.  For example 'random 10' may return any integer from 0 to 9 inclusive.",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "randomColor",
	"names": [],
	"hintNames": ["randomcolour", "rc", "rcolor", "rcolour"],
	"args": [],
	"searchKeywords": ["color"],
	"commandGroup": "color",
	"description": "Returns a random color represented by a list of 3 integers",
	"isIndependentlyUseful": false,
	"returnTypes": "colorlist"
},
{
	"primaryName": "randomRatio",
	"names": [],
	"args": [],
	"searchKeywords": ["math", "ratio"],
	"commandGroup": "math",
	"description": "Returns a random real number between 0 and 1",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "readJson",
	"names": [],
	"args": [
		{
			"name": "url",
			"types": "string",
			"format": "absoluteUrl"
		}
	],
	"searchKeywords": ["json"],
	"commandGroup": "async",
	"description": "<p>Returns data from the specified URL.</p><p>Similar to the URL used by the <span class=\"command\">image</span> and <span class=\"command\">imageAlpha</span> commands, you can use local:// protocol to read from assets.</p><p>You can learn more about JSON format at <a href=\"https://en.wikipedia.org/wiki/JSON\" target=\"_blank\">https://en.wikipedia.org/wiki/JSON</a></p><p>JSON read through http or https is assumed to remain unchanged long enough that WebLogo sometimes uses its own cache instead of downloading again.  This is to run the WebLogo code a lot faster.  If you need to work around caching, use a cache-busting technique like adding a random number to your URL.</p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "bool|list|num|plist|string"
},
{
	"primaryName": "rect",
	"names": [],
	"hintNames": ["rectangle"],
	"args": [{
		"name": "width",
		"types": "num",
		"min": 0
	},{
		"name": "height",
		"types": "num",
		"min": 0
	}],
	"commandGroup": "turtle",
	"description": "Draws a rectangle centered on the current turtle position.  The rectangle's height is measured in the turtle's current heading.",
	"testCases": [
		{"in": [100, 5], "returnValue": null},
		{"in": [100, 100], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "regularPolygon",
	"names": [],
	"args": [
		{
			"name": "radius",
			"types": "num"
		},
		{
			"name": "numSides",
			"types": "int",
			"min": 2
		}
	],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "<p>Draws a filled regular polygon with vertices at the specified radius from the current turtle location</p><p>As with other closed shapes like <span class=\"command\">circle</span>, <span class=\"command\">ellipse</span>, <span class=\"command\">regularStar</span>, and <span class=\"command\">isotoxalStar</span>, you can set fillColor to transparent if you want only the outline and not to fill in the shape.</p>",
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"testCases": [
		{"in": [100, 5], "returnValue": null},
		{"in": [100, 15], "returnValue": null}
	],
	"returnTypes": null
},
{
	"primaryName": "regularStar",
	"names": [],
	"args": [
		{
			"name": "radius",
			"types": "num",
			"min": 0
		},
		{
			"name": "numPoints",
			"types": "int",
			"min": 5
		}
	],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "<p>Draws a regular star contained by a circle of the specified radius</p><p>A 5-pointed regular star appears in many places including flags of Alaska, Arizona, Cameroon, China, Cuba, Europe, Ghana, Liberia, Micronesia, Pakistan, Peurto Rico, Somalia, Syria, Solomon Islands, United States, and many more.</p><p>A regular star is a kind of isotoxal star where the inner radius is constrained so that edges line up with points that are just past their neighbours.  You can learn more at <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Star_polygon\">https://en.wikipedia.org/wiki/Star_polygon</a>.  If you want full control over the inner radius, use the <span class=\"command\">isotoxalStar command</span> instead.</p>",
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"testCases": [
		{"in": [100, 5], "returnValue": null},
		{"in": [100, 15], "returnValue": null}
	],
	"returnTypes": null
},
{
	"primaryName": "remainder",
	"names": [],
	"hintNames": ["rem"],
	"args": [
		{
			"name": "dividend",
			"types": "num"
		},
		{
			"name": "divisor",
			"types": "num",
			"errorCases": [0]
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "<p>Calculates the remainder of dividing dividend by divisor. Divisor must not be 0.</p><p>A remainder can be used to determine if a number is even or odd.  If you want to do this, consider also using the commands <span class=\"command\">even?</span> and <span class=\"command\">odd?</span>.</p>",
	"testCases": [
		{"in": [5, 3], "returnValue": 2},
		{"in": [-5, 3], "returnValue": -2},
		{"in": [3.8, 1.2], "returnValue": 0.2}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "removeLast",
	"names": [],
	"args": [{
		"name": "listVariable",
		"types": "string",
		"refTypes": "list"
	}],
	"commandGroup": "list",
	"description": "Removes the last element from the secified list",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "removeProperty",
	"names": ["remprop"],
	"args": [
		{
			"name": "plistVariable",
			"types": "string",
			"refTypes": "plist"
		},
		{
			"name": "propertyKey",
			"types": "bool|num|string"
		}
	],
	"commandGroup": "plist",
	"searchKeywords": ["property"],
	"description": "Removes a property(propertyKey) from a property list(plistVariable).  The property list must exist.  If the property is already gone, nothing changes.  You may also want to see <span class=\"command\">createPList</span> and <span class=\"command\">setProperty</span>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "repcount",
	"names": [],
	"args": [],
	"searchKeywords": ["loop", "repeat"],
	"commandGroup": "compiled",
	"description": "Returns repetition count or iteration count for nearest <span class=\"command\">repeat command</span>.  You can not use repcount outside of a <span class=\"command\">repeat command</span>.",
	"isIndependentlyUseful": false,
	"returnTypes": "int"
},
{
	"primaryName": "repeat",
	"names": ["rp"],
	"hintNames": ["herhaal", "re", "rep", "repita", "rpt"],
	"args": [{
		"name": "numRepeats",
		"types": "num",
		"min": 1
	}, {
		"name": "commands",
		"types": "instructionlist"
	}],
	"searchKeywords": ["loop"],
	"commandGroup": "compiled",
	"description": "<p>Repeats instructions in the specified list the specified number of times.</p><p><span class=\"command\">repcount</span> represents the iteration count.</p><p><span class=\"command\">repRatio</span> can be used inside a repeat to get the ratio of repeat count to number of repetitions.</p>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "repRatio",
	"names": [],
	"args": [],
	"searchKeywords": ["loop", "repeat"],
	"commandGroup": "compiled",
	"description": "repRatio can be used in a repeat loop similar to <span class=\"command\">repcount</span>.  Returns a number from 0 to 1.  The returned value is equal to (<span class=\"command\">repcount</span> - 1) / (maximum value of repcount - 1).  If the maximum repcount value is 1, 0 is returned.",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "reverse",
	"names": [],
	"args": [{
		"name": "sequenceToReverse",
		"types": "string|list"
	}],
	"commandGroup": "list",
	"description": "Returns the reverse of the specified list or word",
	"testCases": [
		{"in": [[1,2,3]], "returnValue": [3,2,1]},
		{"in": ["hello"], "returnValue": "olleh"}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "string|list"
},
{
	"primaryName": "rgbToHSV",
	"names": [],
	"args": [
		{
			"name": "red",
			"types": "num",
			"min": 0,
			"max": 255
		},
		{
			"name": "green",
			"types": "num",
			"min": 0,
			"max": 255
		},
		{
			"name": "blue",
			"types": "num",
			"min": 0,
			"max": 255
		}
	],
	"commandGroup": "color",
	"searchKeywords": ["color", "hue", "saturation", "value"],
	"description": "Converts red, green, and blue values into hue, value, and saturation(HSV) value ratios.  The resulting hue, value, and saturation will always be in the range 0..1.",
	"isIndependentlyUseful": false,
	"returnTypes": "list<num>"
},
{
	"primaryName": "right",
	"names": ["rt"],
	"hintNames": ["di", "direita", "rechts", "rturn", "tr", "turn", "turnright"],
	"args": [{
		"name": "angleDegrees",
		"types": "num",
		"uselessCases": [0]
	}],
	"commandGroup": "turtle",
	"description": "Turns the turtle right by the specified angle in degrees",
	"testCases": [
		{"in": [90], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "roll",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns the current roll angle in degrees",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "num"
},
{
	"primaryName": "rollLeft",
	"names": [],
	"hintNames": ["leftroll"],
	"args": [{
		"name": "angleDegrees",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "<p>Rolls the turtle's orientation left the specified angle.</p><p>rollLeft 4 is the same as <span class=\"command\">rollRight</span> -4.</p><p>This is not the same as the <span class=\"command\">right</span> command which turns the turtle's heading.</p>",
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "rollRight",
	"names": [],
	"hintNames": ["rightroll"],
	"args": [{
		"name": "angleDegrees",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "<p>Rolls the turtle's orientation right the specified angle.</p><p>rollRight 45 is the same as <span class=\"command\">rollLeft</span> -45.</p><p>This is not the same as the <span class=\"command\">left</span> command which turns the turtle's heading.</p>",
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "round",
	"names": [],
	"args": [{
		"name": "num",
		"types": "num"
	}],
	"commandGroup": "math",
	"description": "Returns the nearest integer.  See also the <span class=\"command\">int command</span>.",
	"testCases": [
		{"in": [0], "returnValue": 0},
		{"in": [1], "returnValue": 1},
		{"in": [-1], "returnValue": -1},
		{"in": [0.1], "returnValue": 0},
		{"in": [0.9], "returnValue": 1}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "int"
},
{
	"primaryName": "roundIsoStar",
	"names": [],
	"args": [
		{
			"name": "radius1",
			"types": "num",
			"min": 0,
			"errorCases": [0]
		},
		{
			"name": "radius2",
			"types": "num",
			"min": 0,
			"errorCases": [0]
		},
		{
			"name": "numPoints",
			"types": "int",
			"min": 2,
			"max": 500
		},
		{
			"name": "cornerRadius1",
			"types": "num",
			"min": 0
		},
		{
			"name": "cornerRadius2",
			"types": "num",
			"min": 0
		}
	],
	"searchKeywords": ["star"],
	"commandGroup": "turtle",
	"description": "<p>Draws a closed shape for a star-like pattern that has rounded corners.</p><p>cornerRadius1 and cornerRadius2 values are ignored if they'd otherwise prevent the drawn shape from lining up with a similar command but with 0 for those corner radii.  If cornerRadius1 is so large that the straight line disappears, cornerRadius1 is adjusted so the arcs touch each other.  If cornerRadius2 is too large to have a straight line, it too will be adjusted closer to 0.</p><p><span class=\"command\">isotoxalStar command</span> would be a better alternative if you want the corners to have radii of 0.  It would be shorter code and execute a little faster.</p>",
	"testCases": [
		{"in": [5, 4, 2, 0, 0], "returnValue": null},
		{"in": [5, 4, 3, 0, 0], "returnValue": null},
		{"in": [5, 4, 3, 1, 1], "returnValue": null},
		{"in": [5, 4, 3, 10, 10], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "roundIsoTriangle",
	"names": [],
	"args": [{
		"name": "baseWidth",
		"types": "num",
		"errorCases": [0]
	},{
		"name": "height",
		"types": "num",
		"errorCases": [0]
	},{
		"name": "cornerRadius",
		"types": "num",
		"errorCases": [0]
	}],
	"commandGroup": "turtle",
	"description": "<p>Draws an isosceles triangle with rounded corners.</p><p>The straight edges from roundIsoTriangle line up perfectly with a <span class=\"command\">isoTriangle</span> given the same baseWidth and height. If you want a corner radius of 0, use <span class=\"command\">isoTriangle</span> instead.</p>",
	"testCases": [
		{"in": [100, 50, 10], "returnValue": null},
		{"in": [100, 50, 1000], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "roundRect",
	"names": [],
	"hintNames": ["roundedrect", "roundedrectangle", "roundrectangle"],
	"args": [{
		"name": "width",
		"types": "num",
		"min": 0
	},{
		"name": "height",
		"types": "num",
		"min": 0
	},{
		"name": "cornerRadius",
		"types": "num",
		"min": 0
	}],
	"commandGroup": "turtle",
	"description": "<p>Draws a rectangle with rounded corners.  The rectangle's height is measured in the turtle's current heading.</p><p>If you want cornerRadius to be 0, consider using the <span class=\"command\">rect command</span> instead.</p>",
	"testCases": [
		{"in": [100, 0, 0], "returnValue": null},
		{"in": [100, 5, 0], "returnValue": null},
		{"in": [100, 100, 0], "returnValue": null},
		{"in": [100, 100, 1000], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "roundRegularPolygon",
	"names": [],
	"args": [{
		"name": "radius",
		"types": "num",
		"min": 0
	},{
		"name": "numSides",
		"types": "int",
		"min": 3
	},{
		"name": "cornerRadius",
		"types": "num",
		"min": 0
	}],
	"commandGroup": "turtle",
	"description": "<p>Draws a regular polygon with rounded corners.</p><p>The straight edges from roundIsoTriangle line up perfectly with a <span class=\"command\">regularPolygon</span> given the same radius and numSides. If you want a corner radius of 0, use <span class=\"command\">regularPolygon</span> instead.</p><p>Consider <span class=\"command\">isoTriangle</span> if you want rounded corners on an isosceles triangle that isn't also equilateral.</p>",
	"testCases": [
		{"in": [0, 5, 0], "returnValue": null},
		{"in": [100, 5, 0], "returnValue": null},
		{"in": [100, 5, 10], "returnValue": null},
		{"in": [100, 100, 1000], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "roundRegularStar",
	"names": [],
	"args": [{
		"name": "radius",
		"types": "num",
		"min": 0
	},{
		"name": "numSides",
		"types": "int",
		"min": 5
	},{
		"name": "cornerRadius1",
		"types": "num",
		"min": 0
	},{
		"name": "cornerRadius2",
		"types": "num",
		"min": 0
	}],
	"commandGroup": "turtle",
	"description": "<p>Draws a regular star with rounded corners.</p><p>If you want cornerRadius1 and cornerRadius2 to always be 0, use <span class=\"command\">regularStar</span> instead for simpler code and a little better execution speed.</p>",
	"testCases": [
		{"in": [0, 5, 0, 0], "returnValue": null},
		{"in": [100, 5, 0, 0], "returnValue": null},
		{"in": [100, 5, 10, 10], "returnValue": null},
		{"in": [100, 5, 1000, 1000], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "rput",
	"names": [],
	"args": [
		{
			"name": "thing",
			"types": "*"
		},
		{
			"name": "list1",
			"types": "list"
		}
	],
	"commandGroup": "list",
	"description": "Returns a list that is the same as the list1 except 1 element longer.  The new element, thing, is added to the end of the resulting list.",
	"testCases": [
		{"in": [1, []], "returnValue": [1]},
		{"in": [1, [2, 3]], "returnValue": [2, 3, 1]},
		{"in": [[], []], "returnValue": [[]]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list"
},
{
	"primaryName": "rseq",
	"names": [],
	"args": [
		{
			"name": "first",
			"types": "num"
		},
		{
			"name": "last",
			"types": "num"
		},
		{
			"name": "count",
			"types": "int"
		}
	],
	"commandGroup": "list",
	"description": "Returns a list of count elements which start from first and ends with last.  Each value is equally spaced apart.",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [1, 1, 1], "returnValue": [1]},
		{"in": [-1, -9, 5], "returnValue": [-1, -3, -5, -7, -9]},
		{"in": [1, 9, 5], "returnValue": [1, 3, 5, 7, 9]}
	],
	"isStaticEvaluationSafe": true,
	"returnTypes": "list<int>"
},
{
	"primaryName": "screenColor",
	"names": [],
	"hintNames": ["achtergrond", "ag", "backcolor", "background", "bg", "getsc", "getscreencolor", "screencolour"],
	"args": [
	],
	"commandGroup": "turtle",
	"description": "Returns the current screen color.  You may also be interested in the <span class=\"command\">fillColor</span> command.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "color"
},
{
	"primaryName": "sentence",
	"names": ["se"],
	"args": [
		{
			"name": "element1",
			"types": "bool|list|num|string"
		},
		{
			"name": "element2",
			"types": "bool|list|num|string"
		}
	],
	"argCount": "?",
	"extraArgsInfo": {
		"types": "bool|list|num|string"
	},
	"commandGroup": "list",
	"description": "If the inputs don't include a list, a list of those elements are returned just like <span class=\"command\">the list command</span>.  Any lists in the arguments are flattened.<br>(sentence \"hello \"world) returns [\"hello \"world].<br>(sentence \"hello [\"world 1 2]) returns [\"hello \"world 1 2]",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [], "returnValue": []},
		{"in": [1], "returnValue": [1]},
		{"in": [1, 2], "returnValue": [1, 2]},
		{"in": [1, [2, 3, 4]], "returnValue": [1, 2, 3, 4]},
		{"in": [1, [2, [3], 4]], "returnValue": [1, 2, 3, 4]},
		{"in": [1, [2, [3], [3]]], "returnValue": [1, 2, 3, 3]}
	],
	"isStaticEvaluationSafe": true,
	"returnTypes": "list<bool|num|string>"
},
{
	"primaryName": "setColors",
	"names": [],
	"args": [{
		"name": "newColor",
		"types": "alphacolor|transparent"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's fill color and pen color.  This means shapes will be drawn with the same outline color and filled in with the same color.  setColors does not affect the screen color.  If you want to set screen color, use the <span class=\"command\">setScreenColor command</span>",
	"testCases": [
		{"in": [1], "returnValue": null},
		{"in": [[255, 0, 0]], "returnValue": null},
		{"in": ["red"], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setFillColor",
	"names": ["setfc"],
	"hintNames": ["setfillcolour", "setfloodcolour"],
	"args": [{
		"name": "newFillColor",
		"types": "alphacolor|transparent"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's fill color.  The fill color is used to fill in circles and other 2 dimensional and 3 dimensional shapes.  The fill color does not affect lines.",
	"readCommand": "fillColor",
	"testCases": [
		{"in": [1], "returnValue": null},
		{"in": [[255, 0, 0]], "returnValue": null},
		{"in": ["red"], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setFillGradient",
	"names": [],
	"args": [
		{
			"name": "gradient",
			"types": "gradient"
		}
	],
	"commandGroup": "turtle",
	"description": "Sets a gradient instead of a single solid fill color.  You can retrieve the fill gradient using the <span class=\"command\">fillGradient command</span>.",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setFontFamily",
	"names": [],
	"args": [
		{
			"name": "newFamily",
			"types": "list|string",
			"sanitization": "listToString"
		}
	],
	"commandGroup": "turtle",
	"description": "Sets the font family name that will be used for drawing text in labels.",
	"testCases": [
		{"in": ["Arial"], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setFontSize",
	"names": [],
	"hintNames": ["setlabelheight", "settextsize"],
	"args": [
		{
			"name": "newSize",
			"types": "num"
		}
	],
	"commandGroup": "turtle",
	"description": "Sets the font size that will be used for drawing text in labels.  The size is in same units as used by <span class=\"command\">forward</span>.",
	"readCommand": "fontSize",
	"testCases": [
		{"in": [16], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setHeading",
	"names": ["seth"],
	"hintNames": ["setright", "sh", "zetrichting"],
	"args": [{
		"name": "newHeadingDegrees",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's heading in degrees.  If you want to add or subtract from the current heading, use the <span class=\"command\">left</span> or <span class=\"command\">right</span> commands.",
	"readCommand": "heading",
	"testCases": [
		{"in": [0], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setItem",
	"names": [],
	"args": [{
		"name": "index",
		"types": "int",
		"min": 1
	}, {
		"name": "array",
		"types": "string",
		"refTypes": "list"
	}, {
		"name": "value",
		"types": "*"
	}],
	"commandGroup": "array",
	"description": "<p>Sets the value at the specified index in the specified array or list.</p><p>If you want to add a new value to the end, use the <span class=\"command\">queue command</span>.  Use the <span class=\"command\">item command</span> to read an item from a list or array.</p><p>Though discouraged, if you call setItem on an index beyond the previous length of the list, any gap will be filled with the specified value.</p>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "setLineCap",
	"names": [],
	"args": [{
		"name": "newLineCap",
		"types": "string",
		"format": "lineCap",
		"sanitization": "lineCap"
	}],
	"commandGroup": "turtle",
	"description": "Sets the line cap.  You can specify round, square, or butt.",
	"testCases": [
		{"in": [0], "returnValue": null},
		{"in": [1], "returnValue": null},
		{"in": [2], "returnValue": null}
	],
	"readCommand": "lineCap",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setLineJoinStyle",
	"names": [],
	"args": [
		{
			"name": "newLineJoinStyle",
			"types": "string",
			"format": "lineJoinStyle"
		}
	],
	"commandGroup": "turtle",
	"description": "Sets the style used for joining line segments in a path.  miter, round, and bevel are all acceptable styles.",
	"testCases": [
		{"in": ["miter"], "returnValue": null},
		{"in": ["MITER"], "returnValue": null},
		{"in": ["bevel"], "returnValue": null},
		{"in": ["round"], "returnValue": null}
	],
	"readCommand": "lineJoinStyle",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setOrientation",
	"names": [],
	"args": [
		{
			"name": "newOrientation",
			"types": "list<list<num>>",
			"minLen": 3,
			"maxLen": 3,
			"listElementTypes": "list<num>"
		}
	],
	"commandGroup": "turtle",
	"description": "<p>Sets orientation of the turtle based on a specified 3 by 3 transformation matrix.</p>  <p>If you're working with 2D graphics, <span class=\"command\">setHeading</span> is a much simpler command that should meet your needs more efficiently and with more understandable code.</p>",
	"testCases": [
		{"in": [[[1, 0, 0], [0, 1, 0], [0, 0, 1]]], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "setPenColor",
	"names": ["setpc"],
	"hintNames": ["ink", "setcolor", "setpencolour", "zetpenkleur"],
	"args": [{
		"name": "newPenColor",
		"types": "alphacolor|transparent"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's pen ink color.  This affects the color drawn when the pen is down and the turtle moves <span class=\"command\">forward</span> or <span class=\"command\">backward</span>.",
	"readCommand": "penColor",
	"testCases": [
		{"in": [0], "returnValue": null},
		{"in": [[0, 0, 0]], "returnValue": null},
		{"in": ["red"], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setPenGradient",
	"names": [],
	"args": [
		{
			"name": "gradient",
			"types": "gradient"
		}
	],
	"commandGroup": "turtle",
	"description": "Sets a gradient instead of a single solid pen color.  You can retreive the pen gradient later using the <span class=\"command\">penGradient command</span>.",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setPenSize",
	"names": ["setps"],
	"hintNames": ["setpenwidth", "setwidth", "zetpendikte"],
	"args": [{
		"name": "newPenSize",
		"types": "num",
		"min": 0
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's pen width",
	"readCommand": "penSize",
	"testCases": [
		{"in": [1], "returnValue": null},
		{"in": [1.5], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setPitch",
	"names": [],
	"args": [{
		"name": "pitchDegrees",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's pitch angle.  Roll is one of three orientation angles. The other two orientation angles are roll and heading.",
	"readCommand": "pitch",
	"testCases": [
		{"in": [0], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setPos",
	"names": ["setposition"],
	"hintNames": ["setposxyz", "zetpos"],
	"args": [
		{
			"name": "coordinates",
			"types": "list<num>",
			"minLen": 2,
			"maxLen": 3,
			"listElementTypes": "num"
		}
	],
	"commandGroup": "turtle",
	"description": "Sets position of the turtle.  This is very similar to <span class=\"command\">setXY</span> and <span class=\"command\">setXYZ</span> except setPos expects a list instead of separate numbers.",
	"readCommand": "pos",
	"testCases": [
		{"in": [[0, 0]], "returnValue": null},
		{"in": [[1, 2]], "returnValue": null},
		{"in": [[1, 2, 3]], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setProperty",
	"names": ["putprop"],
	"hintNames": ["pprop", "setattr"],
	"args": [
		{
			"name": "plistVariable",
			"types": "string",
			"refTypes": "plist"
		},
		{
			"name": "propertyKey",
			"types": "bool|num|string"
		},
		{
			"name": "propertyValue",
			"types": "*"
		}
	],
	"commandGroup": "plist",
	"searchKeywords": ["property"],
	"description": "Sets the specified property(propertyKey) on a property list(propertyValue) to the specified value(propertyValue).  setProperty requires the property list to already exist so that you have control over whether your property list variable is local or global.  See <span class=\"command\">createPList</span> for creating a property list.  The property key is case-sensitive.  In other words, setProperty \"plist1 \"x 5 followed by setProperty \"plist1 \"X 6 will set 2 separate properties instead of X being interpretted the same as x.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "setRoll",
	"names": [],
	"args": [{
		"name": "rollDegrees",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's roll angle.  Roll is one of 3 orientation angles. The other two orientation angles are pitch and heading.",
	"readCommand": "roll",
	"testCases": [
		{"in": [0], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setScreenColor",
	"names": [],
	"hintNames": ["fillscreen", "paper", "setbackcolor", "setbackground", "setbgcolor", "setbg",
		"setbgcolour", "setbackgroundcolor", "setbackgroundcolour", "setsc", "setscreencolour", "zetachtergrond"],
	"args": [
		{
			"name": "newColor",
			"types": "color|transparent"
		}
	],
	"commandGroup": "turtle",
	"description": "Sets the screen color.  Calling this is like selecting a color from the menu.",
	"readCommand": "screenColor",
	"testCases": [
		{"in": ["red"], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setTurtleState",
	"names": [],
	"args": [
		{
			"name": "newState",
			"types": "plist"
		}
	],
	"commandGroup": "turtle",
	"description": "<p>Sets the state of the turtle.  This includes pen size, pen color, pen gradient, fill color, fill gradient, position, heading, and line join style.</p><p>setTurtleState is useful when you want to restore original properties of the turtle after completing a procedure.  Many procedures are intended to draw something and update colors or other properties of the turtle in the process.  You'll also prefer that the caller not have to worry about these side effects.  Restoring the original properties is a quick way to eliminate those side effects.</p>",
	"readCommand": "turtleState",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setX",
	"names": [],
	"hintNames": ["sx"],
	"args": [{
		"name": "x",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's x coordinate.  If the pen is down, a line is drawn to the new position. You may also be curious about <span class=\"command\">setPos</span>, <span class=\"command\">setXY</span>, and <span class=\"command\">setY</span>.",
	"readCommand": "xCor",
	"testCases": [
		{"in": [0], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setXY",
	"names": [],
	"hintNames": ["lineto", "mvto", "sxy"],
	"args": [{
		"name": "x",
		"types": "num"
	},{
		"name": "y",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's x and y coordinates.  If the pen is down, a line is drawn to the new position. If you want to specify the position as a list, use <span class=\"command\">setPos</span>.",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setXYZ",
	"names": [],
	"args": [{
		"name": "x",
		"types": "num"
	},{
		"name": "y",
		"types": "num"
	},{
		"name": "z",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's x, y, and z coordinates.  If the pen is down, a line is drawn to the new position. If you want to specify the position as a list, use <span class=\"command\">setPos</span>.  The list can have 2 or 3 elements in length.",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setY",
	"names": [],
	"hintNames": ["sy"],
	"args": [{
		"name": "y",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's y coordinate.  If the pen is down, a line is drawn to the new position. You may also be curious about <span class=\"command\">setPos</span>, <span class=\"command\">setXY</span>, and <span class=\"command\">setXYZ</span>.",
	"readCommand": "yCor",
	"testCases": [
		{"in": [0], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "setZ",
	"names": [],
	"args": [{
		"name": "z",
		"types": "num"
	}],
	"commandGroup": "turtle",
	"description": "Sets the turtle's z coordinate.  If the pen is down, a line is drawn to the new position but you'll need to be in a 3D viewing mode that shows the change in z to see it. You may also be curious about <span class=\"command\">setPos</span>, and <span class=\"command\">setXYZ</span>.",
	"readCommand": "zCor",
	"testCases": [
		{"in": [0], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "shownp",
	"names": ["shown?"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Outputs true indicating the turtle is visible or false indicating the turtle is hidden.  See also the <span class=\"command\">showTurtle</span> and <span class=\"command\">hideTurtle</span> commands.",
	"isIndependentlyUseful": false,
	"returnTypes": "bool"
},
{
	"primaryName": "showTurtle",
	"names": ["st"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Shows the turtle",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "shuffle",
	"names": [],
	"args": [{
		"name": "deck",
		"types": "string",
		"refTypes": "list"
	}],
	"commandGroup": "list",
	"description": "<p>Shuffles a list in place.  In other words, shuffle reorders the elements in the list in a random order.</p><p>You may also be interested in the <span class=\"command\">pick command</span> for selecting a random element from a list.</p>",
	"isIndependentlyUseful": true,
	"testCases": [
		{"in": [[]], "returnValue": null},
		{"in": [[1]], "returnValue": null},
		{"in": [[1,2]], "returnValue": null},
		{"in": [[1,2,3]], "returnValue": null}
	],
	"returnTypes": null
},
{
	"primaryName": "sign",
	"names": [],
	"args": [
		{
			"name": "num1",
			"types": "num"
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Returns sign from the number in the form of a number.  Returns -1 if num1 is negative.  Returns 0 if num1 is 0.  Returns 1 if num1 is greater than zero.",
	"testCases": [
		{"in": [5], "returnValue": 1},
		{"in": [0], "returnValue": 0},
		{"in": [-3], "returnValue": -1}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "int"
},
{
	"primaryName": "sin",
	"names": [],
	"hintNames": ["sine"],
	"args": [{
		"name": "angleDegrees",
		"types": "num"
	}],
	"searchKeywords": ["math", "trig"],
	"commandGroup": "math",
	"description": "Returns the sin ratio for the specified angle in degrees",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "sinh",
	"names": [],
	"args": [{
		"name": "x",
		"types": "num"
	}],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "returns the hyperbolic sine of a number.  You may also be interested in the <span class=\"command\">cosh command</span>. This is very different from the <span class=\"command\">sin command</span> used in trigonometry.",
	"testCases": [
		{"in": [0], "returnValue": 0},
		{"in": [1], "returnValue": 1.1752011936438014},
		{"in": [-1], "returnValue": -1.1752011936438014},
		{"in": [2], "returnValue": 3.626860407847019}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "solveCubic",
	"names": [],
	"args": [{
			"name": "a",
			"types": "num"
		}, {
			"name": "b",
			"types": "num"
		}, {
			"name": "c",
			"types": "num"
		}, {
			"name": "d",
			"types": "num"
		}
	],
	"commandGroup": "math",
	"searchKeywords": ["math"],
	"description": "Finds all real x values that satisfy the cubic equation a*x*x*x + b*x*x + c*x + d = 0.  Returns a list that is empty, if there are no real solutions.  Returns up to 3 if there are that many distinct solutions.  The result is sorted ascending.  If the first parameter is always 0, consider using <span class=\"command\">solveQuadratic</span>.",
	"testCases": [
		{"in": [0, 0, 0, 0], "returnValue": [0]},
		{"in": [0, 0, 0, 1], "returnValue": []},
		{"in": [0, 0, 1, 0], "returnValue": [0]},
		{"in": [0, 1, 0, 0], "returnValue": [0]},
		{"in": [0, 1, -2, -3], "returnValue": [-1, 3]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnLengthInfo": {
		"max": 3
	},
	"returnTypes": "list<num>"
},
{
	"primaryName": "solveQuadratic",
	"names": [],
	"args": [{
			"name": "a",
			"types": "num"
		}, {
			"name": "b",
			"types": "num"
		}, {
			"name": "c",
			"types": "num"
		}
	],
	"commandGroup": "math",
	"searchKeywords": ["math"],
	"description": "Finds all real x values that satisfy the quadratic equation a*x*x + b*x + c = 0.  Returns a list that is empty, if there are no real solutions.  Returns up to 2 if there are that many distinct solutions.  If a=0, b=0, c=0, x can be any value and the equation still works.  For this special case, [0] is returned.  The result is sorted ascending.",
	"testCases": [
		{"in": [0, 0, 0], "returnValue": [0]},
		{"in": [0, 0, 1], "returnValue": []},
		{"in": [0, 1, 0], "returnValue": [0]},
		{"in": [1, 0, 0], "returnValue": [0]},
		{"in": [1, -2, -3], "returnValue": [-1, 3]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnLengthInfo": {
		"max": 2
	},
	"returnTypes": "list<num>"
},
{
	"primaryName": "solveQuartic",
	"names": [],
	"args": [{
			"name": "a",
			"types": "num"
		}, {
			"name": "b",
			"types": "num"
		}, {
			"name": "c",
			"types": "num"
		}, {
			"name": "d",
			"types": "num"
		}, {
			"name": "e",
			"types": "num"
		}
	],
	"commandGroup": "math",
	"searchKeywords": ["math"],
	"description": "Finds all real x values that satisfy the quartic(4<sup>th</sup> degree polynomial) equation a*x*x*x*x + b*x*x*x + c*x*x + d*x + e = 0.  Returns a list that is empty, if there are no real solutions.  Returns up to 4 if there are that many distinct solutions.  The result is sorted in ascending order.If the first parameter is always 0, consider using <span class=\"command\">solveCubic</span>.",
	"testCases": [
		{"in": [0, 0, 1, -2, -3], "returnValue": [-1, 3]},
		{"in": [-1, 0, 0, 0, -1], "returnValue": []},
		{"in": [1, 0, 0, 0, 0], "returnValue": [0]},
		{"in": [1, 0, 0, 0, -1], "returnValue": [-1, 1]},
		{"in": [1, -7, 5, 31, -30], "returnValue": [-2, 1, 3, 5]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnLengthInfo": {
		"max": 4
	},
	"returnTypes": "list<num>"
},
{
	"primaryName": "sphere",
	"names": [],
	"args": [
		{
			"name": "radius",
			"types": "num",
			"min": 0
		}
	],
	"searchKeywords": ["3d"],
	"commandGroup": "turtle",
	"description": "Draws a sphere with the specified radius",
	"testCases": [
		{"in": [5], "returnValue": null}
	],
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "sqrt",
	"names": [],
	"hintNames": ["sqt", "squareroot"],
	"args": [{
		"name": "num1",
		"types": "num",
		"min": 0
	}],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Returns the square root of the specified number.  For example 'sqrt 100' evaluates to 10 because 10*10 = 100.",
	"testCases": [
		{"in": [100], "returnValue": 10},
		{"in": [10000], "returnValue": 100}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "stop",
	"names": [],
	"args": [],
	"commandGroup": "compiled",
	"description": "Stops execution within a procedure.  The stop command is similar to <span class=\"command\">output</span> except stop does not output a value.",
	"isIndependentlyUseful": true,
	"isConsecutiveRepeatRedundant": true,
	"returnTypes": null
},
{
	"primaryName": "str",
	"names": [],
	"args": [{
		"name": "val",
		"types": "num"
	}],
	"commandGroup": "string",
	"description": "Converts the specified value to a string.  Numbers are formatted using base-10.",
	"testCases": [
		{"in": [5], "returnValue": "5"},
		{"in": [-5], "returnValue": "-5"},
		{"in": [123], "returnValue": "123"},
		{"in": [3.14], "returnValue": "3.14"}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "string"
},
{
	"primaryName": "stringp",
	"names": ["string?"],
	"hintNames": ["isstring"],
	"args": [{
		"name": "val",
		"types": "*"
	}],
	"commandGroup": "string",
	"description": "Checks if val is a string.  <span class=\"command\">list?</span> and <span class=\"command\">number?</span> are available for checking other data types.",
	"testCases": [
		{"in": [5], "returnValue": false},
		{"in": ["hi"], "returnValue": true},
		{"in": [[]], "returnValue": false}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "stripes",
	"names": [],
	"args": [{
		"name": "width",
		"types": "num",
		"min": 0
	},{
		"name": "height",
		"types": "num",
		"min": 0
	},{
		"name": "colors",
		"types": "list<alphacolor|transparent>",
		"minLen": 1
	}],
	"commandGroup": "turtle",
	"description": "<p>Draws rectangular stripes along the current heading.</p><p>width is the width of the stripes.</p><p>height is the distance to the farthest end of the last stripe.</p><p>colors is a list of the colors for each stripe.</p>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "sublist",
	"names": [],
	"args": [
		{
			"name": "list1",
			"types": "list"
		},
		{
			"name": "fromIndex",
			"types": "int",
			"min": 1
		},
		{
			"name": "toIndex",
			"types": "int"
		}
	],
	"commandGroup": "list",
	"description": "Returns a list containing elements in the specified index range.",
	"testCases": [
		{"in": [[1, 2, 3], 1, 3], "returnValue": [1, 2, 3]},
		{"in": [[1, 2, 3], 1, 0], "returnValue": [1, 2, 3]},
		{"in": [[1, 2, 3], 1, 2], "returnValue": [1, 2]},
		{"in": [[1, 2, 3], 1, -1], "returnValue": [1, 2]},
		{"in": [[1, 2, 3], 1, 1], "returnValue": [1]},
		{"in": [[1, 2, 3], 2, 3], "returnValue": [2, 3]}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list"
},
{
	"primaryName": "substring",
	"names": [],
	"hintNames": ["substr"],
	"args": [
		{
			"name": "string",
			"types": "string"
		},
		{
			"name": "fromIndex",
			"types": "int",
			"min": 1
		},
		{
			"name": "toIndex",
			"types": "int"
		}
	],
	"commandGroup": "string",
	"description": "Returns a string containing characters in the specified index range.",
	"testCases": [
		{"in": ["abc", 1, 3], "returnValue": "abc"},
		{"in": ["abc", 1, 0], "returnValue": "abc"},
		{"in": ["abc", 1, 2], "returnValue": "ab"},
		{"in": ["abc", 1, -1], "returnValue": "ab"},
		{"in": ["abc", 1, 1], "returnValue": "a"},
		{"in": ["abc", 2, 3], "returnValue": "bc"}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "string"
},
{
	"primaryName": "substringp",
	"names": ["substring?"],
	"args": [
		{
			"name": "s1",
			"types": "string"
		},
		{
			"name": "s2",
			"types": "string"
		}
	],
	"commandGroup": "string",
	"description": "Returns true if s1 is a substring of s2.  In other words, true is returned if s1 is contained in s2.",
	"testCases": [
		{"in": ["abc", "abc"], "returnValue": true},
		{"in": ["bc", "abc"], "returnValue": true},
		{"in": ["bd", "abc"], "returnValue": false}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "bool"
},
{
	"primaryName": "sum",
	"names": [],
	"hintNames": ["add"],
	"args": [{
		"name": "num1",
		"types": "num"
	}, {
		"name": "num2",
		"types": "num"
	}],
	"extraArgsInfo": {
		"types": "num"
	},
	"argCount": "?",
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Returns the sum of the specified numbers.  Consider also using the + operator.",
	"testCases": [
		{"in": [0, 0], "returnValue": 0},
		{"in": [1, 2], "returnValue": 3},
		{"in": [-1, 3], "returnValue": 2}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "swap",
	"names": [],
	"hintNames": ["exchange", "exchg", "xchg"],
	"args": [{
		"name": "varName1",
		"types": "string"
	}, {
		"name": "varName2",
		"types": "string"
	}],
	"searchKeywords": [],
	"commandGroup": "compiled",
	"description": "<p>Swaps the values for the 2 specified variables.  Both variables must have values assigned to them before the swap.  The variables can be local, global, or mixed scope.</p><p>The order of your variable names makes no difference.  <code>swap \"x \"y</code> will behave exactly the same as <code>swap \"y \"x</code>.</p><p>You can always swap using a temporary variable and without the swap command but the swap command usually makes your intentions clearer and expressed with less code.</p>",
	"isIndependentlyUseful": true,
	"isStaticEvaluationSafe": false,
	"returnTypes": null
},
{
	"primaryName": "tan",
	"names": [],
	"hintNames": ["tangent"],
	"args": [
		{
			"name": "angleDegrees",
			"types": "num"
		}
	],
	"searchKeywords": ["math", "trig"],
	"commandGroup": "math",
	"description": "Returns the tan ratio corresponding with the specified angle.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "num"
},
{
	"primaryName": "tanh",
	"names": [],
	"args": [
		{
			"name": "x",
			"types": "num"
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "math",
	"description": "Returns the hyperbolic tan of the specified number.  You may also be interested in <span class=\"command\">sinh</span> and <span class=\"command\">cosh</span>.",
	"testCases": [
		{"in": [0], "returnValue": 0},
		{"in": [1], "returnValue": 0.7615941559557649},
		{"in": [-1], "returnValue": -0.7615941559557649},
		{"in": [999999999], "returnValue": 1}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "to",
	"names": [],
	"hintNames": ["ap", "aprenda", "leer"],
	"args": [{
		"name": "name",
		"types": "string"
	}
	],
	"searchKeywords": ["procedure", "function", "custom", "command", "define"],
	"commandGroup": "compiled",
	"description": "Defines how to run a user-defined procedure.  The format is<br><code>to procName :arg1 :arg2 ... :argN<br>step1<br>step2<br>...<br>stepM<br>end</code>",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "towards",
	"names": [],
	"args": [
		{
			"name": "pointCoordinates",
			"types": "list<num>",
			"minLen": 2,
			"listElementTypes": "num"
		}
	],
	"commandGroup": "turtle",
	"description": "Outputs the heading angle in degrees needed to point the turtle at the specified point.  This is most useful when you're making a 2D drawing.  If you're making a 3D model, the z-coordinates of the turtle and the other point are ignored.",
	"testCases": [
		{"in": [[0, 100]], "returnValue": 0},
		{"in": [[100, 100]], "returnValue": 45},
		{"in": [[0, -100]], "returnValue": 180},
		{"in": [[100, 0]], "returnValue": 90},
		{"in": [[-100, 0]], "returnValue": 270}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "num"
},
{
	"primaryName": "transparent",
	"names": [],
	"args": [],
	"searchKeywords": ["color"],
	"commandGroup": "color",
	"description": "Returns the transparent value.  Transparent can be used with many commands involving color and semitransparent colors such as <span class=\"command\">setFillColor</span>, <span class=\"command\">setPenColor</span>.  It can also be used in gradients.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "transparent"
},
{
	"primaryName": "triLengthsToAngle",
	"names": [],
	"args": [
		{
			"name": "a",
			"types": "num"
		},
		{
			"name": "b",
			"types": "num"
		},
		{
			"name": "c",
			"types": "num"
		}
	],
	"commandGroup": "math",
	"searchKeywords": ["math", "trig"],
	"description": "<p>Returns the angle in degrees corresponding with a triangle having side lengths a, b, c.  The returned angle is the angle inside the vertex connecting sides a and b.<p></p>An error will be thrown if the given side lengths are impossible.  For example, a triangle can't exist with any 2 sides adding up to less than the third side.</p><p>If you know you have a 90 degree angle in your triangle along with knowing at least 2 side lengths, it is simpler and more efficient to use commands like <span class=\"command\">arcSin</span>, <span class=\"command\">arcCos</span>, or <span class=\"command\">arcTan</span> to calculate another angle.  If you want the angle in radians, use <span class=\"command\">triLengthsToRadianAngle</span>.</p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"testCases": [
		{"in": [8, 6, 7], "returnValue": 57.91005},
		{"in": [3, 4, 5], "returnValue": 90},
		{"in": [1, 1, 0], "returnValue": 0},
		{"in": [1, 0, 1], "returnValue": 0}
	],
	"returnTypes": "num"
},
{
	"primaryName": "triLengthsToRadianAngle",
	"names": [],
	"args": [
		{
			"name": "a",
			"types": "num"
		},
		{
			"name": "b",
			"types": "num"
		},
		{
			"name": "c",
			"types": "num"
		}
	],
	"commandGroup": "math",
	"description": "<p>Returns the angle in radians corresponding with a triangle having side lengths a, b, c.  The returned angle is the angle inside the vertex connecting sides a and b.<p></p>An error will be thrown if the given side lengths are impossible.  For example, a triangle can't exist with any 2 sides adding up to less than the third side.</p><p>If you know you have a 90 degree angle in your triangle along with knowing at least 2 side lengths, it is simpler and more efficient to use commands like <span class=\"command\">radArcSin</span>, <span class=\"command\">radArcCos</span>, or <span class=\"command\">radArcTan</span> to calculate another angle.  If you want the angle in degrees, use <span class=\"command\">triLengthsToAngle</span>.  triLengthsToRadianAngle is slightly faster because CPU and GPU hardware calculates in radians so getting the angle in degrees involves an extra unit conversion.</p>",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"testCases": [
		{"in": [8, 6, 7], "returnValue": 1.0107210205683146139426297479748},
		{"in": [1, 1, 0], "returnValue": 0},
		{"in": [1, 0, 1], "returnValue": 0}
	],
	"returnTypes": "num"
},
{
	"primaryName": "turtleState",
	"names": [],
	"args": [],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "Returns the turtle state.  The returned plist contains properties such as penSize, penColor, penGradient, fillColor, fillGradient, lineJoinStyle, position...  If you want to read these properties, consider using more specialized commands such as <span class=\"command\">penSize</span>, <span class=\"command\">penColor</span>, <span class=\"command\">penGradient</span>, <span class=\"command\">fillColor</span>, <span class=\"command\">fillGradient</span>, <span class=\"command\">pos</span>...  The turtleState command is mainly intended to read state of the turtle so it can later be restored using <span class=\"command\">setTurtleState</span>.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "plist"
},
{
	"primaryName": "turtleVisiblep",
	"names": ["turtlevisible?"],
	"hintNames": ["isvisible"],
	"args": [],
	"searchKeywords": [],
	"commandGroup": "turtle",
	"description": "Returns true if the turtle is visible/shown. You can also make the turtle visible using <span class=\"command\">showTurtle</span>.   You can also hide it using <span class=\"command\">hideTurtle</span>.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": false,
	"returnTypes": "bool"
},
{
	"primaryName": "type",
	"names": [],
	"args": [
		{
			"name": "thing",
			"types": "bool|list|num|plist|string|transparent"
		}
	],
	"commandGroup": "turtle",
	"description": "Buffers a value for printing.  The message is not printed until the next call to the <span class=\"command\">print command</span>.  The values passed to the type command are printed without spaces separating them.",
	"isIndependentlyUseful": true,
	"returnTypes": null
},
{
	"primaryName": "until",
	"names": [],
	"args": [{
		"name": "condition",
		"types": "bool",
		"uselessCases": [true]
	}, {
		"name": "commands",
		"types": "instructionlist"
	}],
	"searchKeywords": ["loop"],
	"commandGroup": "compiled",
	"description": "Repeats the specified commands if and while the condition is false.",
	"isIndependentlyUseful": false,
	"returnTypes": null
},
{
	"primaryName": "upperCase",
	"names": [],
	"hintNames": ["touppercase"],
	"args": [
		{
			"name": "s",
			"types": "string"
		}
	],
	"commandGroup": "string",
	"description": "Returns the upper case version of the specified string s.  upperCase \"HelloWorld returns  HELLOWORLD",
	"testCases": [
		{"in": [""], "returnValue": ""},
		{"in": ["hi"], "returnValue": "HI"},
		{"in": ["HELLOWorld"], "returnValue": "HELLOWORLD"},
		{"in": ["北京"], "returnValue": "北京"}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "string"
},
{
	"primaryName": "vectorAdd",
	"names": [],
	"args": [{
			"name": "vector1",
			"types": "list<num>",
			"listElementTypes": "num"
		}, {
			"name": "vector2",
			"types": "list<num>",
			"listElementTypes": "num"
		}
	],
	"compositeValidation": [
		{"type": "equalLengthList", "arg1": "vector1", "arg2": "vector2"}
	],
	"searchKeywords": ["math"],
	"commandGroup": "linearAlgebra",
	"description": "Returns a list representing a vector.  Each item in the result corresponds with an item from vector1 added to an item at the same index in vector2.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"testCases": [
		{"in": [[],[]], "returnValue": []},
		{"in": [[1], [1]], "returnValue": [2]},
		{"in": [[1], [0]], "returnValue": [1]},
		{"in": [[1,2], [1,1]], "returnValue": [2,3]}
	],
	"returnTypes": "list<num>"
},
{
	"primaryName": "vectorProject",
	"names": [],
	"hintNames": ["proj", "project"],
	"args": [{
			"name": "onToVector",
			"types": "list<num>",
			"listElementTypes": "num",
			"minLen": 2
		}, {
			"name": "fromVector",
			"types": "list<num>",
			"listElementTypes": "num",
			"minLen": 2
		}
	],
	"compositeValidation": [
		{"type": "equalLengthList", "arg1": "onToVector", "arg2": "fromVector"}
	],
	"searchKeywords": ["math"],
	"commandGroup": "linearAlgebra",
	"description": "Returns the vector projection of fromVector on onToVector.  The result is a list representing a vector in the direction of onToVector.  Make sure onToVector is not filled with 0.  See also the <span class=\"command\">dot</span> and <span class=\"command\">cross</span> commands which also perform vector calculations.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "list<num>"
},
{
	"primaryName": "vectorScale",
	"names": [],
	"args": [{
			"name": "vector",
			"types": "list<num>",
			"listElementTypes": "num"
		}, {
			"name": "scaleFactor",
			"types": "num"
		}
	],
	"searchKeywords": ["math"],
	"commandGroup": "linearAlgebra",
	"description": "Returns a list representing a vector which is each and every element of vector * the scaleFactor.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"testCases": [
		{"in": [[],1], "returnValue": []},
		{"in": [[1], 1], "returnValue": [1]},
		{"in": [[1], 0], "returnValue": [0]},
		{"in": [[1,2], 2], "returnValue": [2, 4]}
	],
	"returnTypes": "list<num>"
},
{
	"primaryName": "vectorSubtract",
	"names": [],
	"args": [{
			"name": "vector1",
			"types": "list<num>",
			"listElementTypes": "num"
		}, {
			"name": "vector2",
			"types": "list<num>",
			"listElementTypes": "num"
		}
	],
	"compositeValidation": [
		{"type": "equalLengthList", "arg1": "vector1", "arg2": "vector2"}
	],
	"searchKeywords": ["math"],
	"commandGroup": "linearAlgebra",
	"description": "Returns a list representing a vector.  Each item in the result corresponds with an item from vector1 minus an item at the same index in vector2.",
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"testCases": [
		{"in": [[],[]], "returnValue": []},
		{"in": [[1], [1]], "returnValue": [0]},
		{"in": [[1], [0]], "returnValue": [1]},
		{"in": [[1,2], [1,1]], "returnValue": [0,1]}
	],
	"returnTypes": "list<num>"
},
{
	"primaryName": "while",
	"names": [],
	"hintNames": ["#while"],
	"args": [{
		"name": "condition",
		"types": "bool",
		"uselessCases": [false]
	}, {
		"name": "commands",
		"types": "instructionlist"
	}],
	"searchKeywords": ["loop"],
	"commandGroup": "compiled",
	"description": "Repeats the specified commands if and while the condition is true.",
	"isIndependentlyUseful": false,
	"returnTypes": null
},
{
	"primaryName": "word",
	"names": [],
	"hintNames": ["string"],
	"args": [{
		"name": "s1",
		"types": "string"
	}, {
		"name": "s2",
		"types": "string"
	}],
	"argCount": "?",
	"extraArgsInfo": {
		"types": "string"
	},
	"commandGroup": "string",
	"description": "Concatenates words or strings together.  For example, word \"hello \"world returns \"helloworld.",
	"testCases": [
		{"in": ["hi", "world"], "returnValue": "hiworld"},
		{"in": ["hi", "world", "yo"], "returnValue": "hiworldyo"}
	],
	"isIndependentlyUseful": false,
	"returnTypes": "string"
},
{
	"primaryName": "wordp",
	"names": ["word?"],
	"hintNames": ["wordq"],
	"args": [{
		"name": "val",
		"types": "*"
	}],
	"commandGroup": "string",
	"description": "<p>Returns true if val is a word.  A word is any string or number.</p><p>See also the <span class=\"command\">string?</span> and <span class=\"command\">number?</span> commands.</p>",
	"testCases": [
		{"in": [3], "returnValue": true},
		{"in": [3.1], "returnValue": true},
		{"in": [[3]], "returnValue": false},
		{"in": [[]], "returnValue": false},
		{"in": [false], "returnValue": false},
		{"in": [true], "returnValue": false},
		{"in": [null], "returnValue": false},
		{"in": [{}], "returnValue": false},
		{"in": ["zam"], "returnValue": true},
		{"in": ["ZAM"], "returnValue": true},
		{"in": [""], "returnValue": true}
	],
	"isIndependentlyUseful": false,
	"isStaticEvaluationSafe": true,
	"returnTypes": "bool"
},
{
	"primaryName": "xCor",
	"names": [],
	"hintNames": ["getx", "xpos"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns x-coordinate of the turtle.  You can also get all coordinates as a list using the <span class=\"command\">pos</span> command.",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [], "returnValue": 0}
	],
	"returnTypes": "num"
},
{
	"primaryName": "xor",
	"names": [],
	"args": [{
			"name": "input1",
			"types": "bool"
		}, {
			"name": "input2",
			"types": "bool"
	}],
	"commandGroup": "math",
	"description": "Returns true if the boolean values are different.  xor is similar to the &lt;&gt; operator or <span class=\"command\">notEqual? command</span> but limited to boolean inputs.",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [false, false], "returnValue": false},
		{"in": [false, true], "returnValue": true},
		{"in": [true, false], "returnValue": true},
		{"in": [true, true], "returnValue": false}
	],
	"returnTypes": "bool"
},
{
	"primaryName": "xyCor",
	"names": [],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns a list containing the x and y-coordinates of the turtle.  You can also get all 3(x, y, z) coordinates as a list using the <span class=\"command\">pos</span> command.",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [], "returnValue": [0, 0]}
	],
	"returnLengthInfo": {
		"min": 2,
		"max": 2
	},
	"returnTypes": "list<num>"
},
{
	"primaryName": "yCor",
	"names": [],
	"hintNames": ["gety", "ypos"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns y-coordinate of the turtle.  You can also get all coordinates as a list using the <span class=\"command\">pos</span> command.",
	"isIndependentlyUseful": false,
	"testCases": [
		{"in": [], "returnValue": 0}
	],
	"returnTypes": "num"
},
{
	"primaryName": "zCor",
	"names": [],
	"hintNames": ["getz", "zpos"],
	"args": [],
	"commandGroup": "turtle",
	"description": "Returns z-coordinate of the turtle.  You can also get all coordinates as a list using the <span class=\"command\">pos</span> command.",
	"isIndependentlyUseful": false,
	"returnTypes": "num"
}
]