{
	"name": "Apple Logo",
	"description": "A Logo interpreter made in the 1980's for the Apple II.  This is likely very similar to Terrapin3ForApple2.  The link to https://archive.org/details/applelogoprogram0000bil is broken so I can't determine if these commands were taken from a version of Terrapin Logo.",
	"externalLink": "https://archive.org/details/applelogoprogram0000bil",
	"alternativeLinks": [
		"https://logothings.github.io/logothings/documents/Apple_Logo.pdf"
	],
	"commands": [
		{
			"primaryName": "arcLeft",
			"names": ["arcl"],
			"description": "Draws an arc to the left.  The first parameter is the radius.  The second is an angle in degrees.",
			"reason": "The arcLeft command in WebLogo is the best translation but the parameters need to be swapped because radius comes last in WebLogo's command."
		},
		{
			"primaryName": "arcRight",
			"names": ["arcr"],
			"description": "Draws an arc to the right.  The first parameter is the radius.  The second is an angle degrees.",
			"reason": "The arcRight command in WebLogo is the best translation but the parameters need to be swapped because radius comes last in WebLogo's command."
		},
		{
			"primaryName": "ascii",
			"to": "ascii"
		},
		{
			"primaryName": "atan",
			"to": "arcTan2"
		},
		{
			"primaryName": "back",
			"names": ["bk"],
			"to": "backward"
		},
		{
			"primaryName": "background",
			"names": ["bg"],
			"to": "screenColor",
			"description": "Returns the background color"
		},
		{
			"primaryName": "bury",
			"description": "buries a package name so that it won't affect some other commands.  WebLogo has no similar command.  More can be learned at https://archive.org/details/applelogoprogram0000bill/page/384/mode/2up?view=theater"
		},
		{
			"primaryName": "catalog",
			"description": "Prints files from disk.  No equivalent command is in WebLogo because WebLogo has no access to the file system and printing asset names doesn't seem useful."
		},
		{
			"primaryName": "char",
			"to": "char"
		},
		{
			"primaryName": "circlel",
			"to": "circleLeft"
		},
		{
			"primaryName": "circler",
			"to": "circleRight"
		},
		{
			"primaryName": "clear",
			"description": "Clears the drawing without moving the turtle.  clearScreen is similar in WebLogo except it moves the turtle and is therefore not similar enough to automatically translate to."
		},
		{
			"primaryName": "clearScreen",
			"names": ["cs"],
			"to": "clearScreen",
			"description": "Clears the screen, moves the turtle home, sets the pen to normal and a few other things"
		},
		{
			"primaryName": "cleartext",
			"args": [],
			"description": "Clears text only and moves cursor.  WebLogo doesn't support a similar command because it seems out of focus for what code should be able to control in a WebLogo program.  The developer can use the user-interface of WebLogo and hit a clear text button to clear the text instead of editing code to do the same thing.  Clicking the button seems much better in every practical situation I can think of.",
			"removeInMigration": true
		},
		{
			"primaryName": "co",
			"description": "Executes a procedure after pause or CTRL+Z is used.  No equivalent command is in WebLogo"
		},
		{
			"primaryName": "cos",
			"to": "cos"
		},
		{
			"primaryName": "dot",
			"description": "Draws a tiny dot.  No equivalent command is in WebLogo.  The closest might be something like circle 1 but 1 might not be a suitable radius."
		},
		{
			"primaryName": "erall",
			"description": "Erases all information from workspace.  No equivalent command is in WebLogo.  It seems like something the GUI of WebLogo should handle instead of code."
		},
		{
			"primaryName": "fence",
			"description": "Causes an error message to show every time the turtle goes out of a fenced boundary.  No equivalent command is in WebLogo.  WebLogo has no fenced boundary.  The turtle is always free to leave the currently visible graphics screen and users are always free to scroll around to find it."
		},
		{
			"primaryName": "forward",
			"names": ["fd"],
			"to": "forward"
		},
		{
			"primaryName": "fullscreen",
			"args": [],
			"description": "Makes the graphics screen fill the screen.  This is in contrast with having a split screen where the code editor still shows.",
			"removeInMigration": true
		},
		{
			"primaryName": "heading",
			"to": "heading"
		},
		{
			"primaryName": "hideTurtle",
			"to": "hideTurtle"
		},
		{
			"primaryName": "if",
			"to": "if"
		},
		{
			"primaryName": "integer",
			"to": "int"
		},
		{
			"primaryName": "keyp",
			"description": "Returns true if and only if there is a key in a key input buffer.  No equivalent command is in WebLogo. WebLogo is not intended for programmatically defining user-interaction."
		},
		{
			"primaryName": "local",
			"description": "Declares a local variable within a procedure.  No equivalent command is in WebLogo.  localmake comes a little close but it requires an initial value."
		},
		{
			"primaryName": "make",
			"to": "make"
		},
		{
			"primaryName": "nodraw",
			"args": [],
			"description": "",
			"removeInMigration": true
		},
		{
			"primaryName": "nowrap",
			"args": [],
			"description": "",
			"removeInMigration": true
		},
		{
			"primaryName": "numberp",
			"to": "number?"
		},
		{
			"primaryName": "output",
			"names": ["op"],
			"to": "output"
		},
		{
			"primaryName": "pause",
			"description": "Pauses the running program.  No equivalent command is in WebLogo.  WebLogo's pause button, breakpoints, and execution speed feature are sufficient alternatives."
		},
		{
			"primaryName": "penColor",
			"names": ["pc"],
			"to": "penColor"
		},
		{
			"primaryName": "penDown",
			"names": ["pd"],
			"to": "penDown"
		},
		{
			"primaryName": "penUp",
			"names": ["pu"],
			"to": "penUp"
		},
		{
			"primaryName": "po",
			"description": "Prints out procedure text.  WebLogo has no similar command.  It doesn't seem useful to have a command to do this when you can easily enough see all the procedures in the editor."
		},
		{
			"primaryName": "poall",
			"description": "Prints out all procedure text.  WebLogo has no similar command.  It doesn't seem useful to have a command to do this when you can easily enough see all the procedures in the editor."
		},
		{
			"primaryName": "position",
			"names": ["pos"],
			"to": "pos"
		},
		{
			"primaryName": "pots",
			"description": ""
		},
		{
			"primaryName": "print",
			"names": ["pr"],
			"to": "print"
		},
		{
			"primaryName": "print1",
			"to": "type"
		},
		{
			"primaryName": "readword",
			"names": ["rw"],
			"description": ""
		},
		{
			"primaryName": "repeat",
			"to": "repeat"
		},
		{
			"primaryName": "right",
			"names": ["rt"],
			"to": "right"
		},
		{
			"primaryName": "setbg",
			"to": "setScreenColor"
		},
		{
			"primaryName": "setcursor",
			"description": "Sets cursor to the specified coordinates.  More can be learned at https://archive.org/details/applelogoprogram0000bill/page/392/mode/2up?view=theater"
		},
		{
			"primaryName": "setscrunch",
			"description": "Sets aspect ratio of graphics screen.  No similar command is supported by WebLogo because we don't think it is worth the confusion this may cause.  Transforming the screen would make it more difficult to understand what commands like setX, setY, forward... are doing since x and y directions would have different scaling factors."
		},
		{
			"primaryName": "splitscreen",
			"args": [],
			"description": "Makes the graphics screen and code editor show.  This is in contrast with having a full screen where the code editor is hidden.",
			"removeInMigration": true
		},
		{
			"primaryName": "stop",
			"to": "stop"
		},
		{
			"primaryName": "test",
			"description": "Evaluates and remembers the value from a boolean expression so it can later be used by iftrue and iffalse commands.  No similar command is supported by WebLogo but WebLogo does support if, ifelse commands where the boolean condition is one of the parameters."
		},
		{
			"primaryName": "to",
			"to": "to"
		},
		{
			"primaryName": "turtlestate",
			"description": "Returns a list of 4 items giving information about the state of the turtle.  This isn't exactly like WebLogo's turtlestate command but quite similar.  WebLogo's turtle command returns a property list which is a distinct type from list.",
			"to": "turtleState"
		},
		{
			"primaryName": "window",
			"description": "Shows a window."
		},
		{
			"primaryName": "wrap",
			"description": ""
		},
		{
			"primaryName": "xCor",
			"to": "xCor"
		},
		{
			"primaryName": "yCor",
			"to": "yCor"
		}
	],
	"keywords": [
		{
			"from": "end",
			"to": "end"
		}
	]
}