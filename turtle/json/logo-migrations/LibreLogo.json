{
	"name": "Libre Logo",
	"description": "Libre Logo is a Logo programming that works in LibreOffice",
	"externalLink": "https://en.wikipedia.org/wiki/LibreLogo",
	"alternativeLinks": [
		"https://help.libreoffice.org/6.2/en-US/text/swriter/librelogo/LibreLogo.html"
	],
	"commands": [
		{
			"primaryName": "abs",
			"to": "abs"
		},
		{
			"primaryName": "any",
			"description": "Could be translated to randomColor if context indicates a need for a color.  Context determines what type should be returned.  'POSITION ANY' would need a random position."
		},
		{
			"primaryName": "back",
			"names": ["bk"],
			"to": "backward"
		},
		{
			"primaryName": "break",
			"to": "break"
		},
		{
			"primaryName": "circle",
			"to": "circle"
		},
		{
			"primaryName": "clearscreen",
			"names": ["cs"],
			"to": "clearScreen"
		},
		{
			"primaryName": "cos",
			"to": "radCos"
		},
		{
			"primaryName": "count",
			"to": "count"
		},
		{
			"primaryName": "ellipse",
			"args": [
				{"name": "info", "types": "list"}
			],
			"description": "Should translate to WebLogo's ellipse command but the parameters need some special processing."
		},
		{
			"primaryName": "fill",
			"args": [],
			"description": "",
			"removeInMigration": true
		},
		{
			"primaryName": "fillcolor",
			"names": ["fc", "fillcolour"],
			"to": "setFillColor",
			"description": "LibreLogo's fillcolor might translate to either fillColor, setFillColor, or setFillGradient.  Some context is needed to determine which.  If a non-null return value is required such as with 'print fillcolor', WebLogo's fillColor command should be used.  If a list of colour names is specified, it should translate to setFillGradient."
		},
		{
			"primaryName": "fillstyle",
			"args": [
				{"name": "newStyle",
				"types": "int|list"
				}
			],
			"description": "Sets the fill pattern.  0-fill, 1-horizontal, 2-45 degrees, 3- -45 degrees..."
		},
		{
			"primaryName": "fontColor",
			"args": [
				{"name": "color", "types": "color"}
			],
			"to": "setFillColor"
		},
		{
			"primaryName": "fontFamily",
			"to": "setFontFamily"
		},
		{
			"primaryName": "fontsize",
			"to": "setFontSize"
		},
		{
			"primaryName": "fontweight",
			"args": [
				{
					"name": "newWeight",
					"types": "string"
				}
			],
			"description": "Sets font weight to bold or normal",
			"returnTypes": null,
			"to": "setFontWeight"
		},
		{
			"primaryName": "forward",
			"names": ["fd"],
			"to": "forward"
		},
		{
			"primaryName": "global",
			"args": [
				{"name": "varName"}
			],
			"description": "Indicates that variables are to mutated as global even if they are assigned new values within a procedure.",
			"removeInMigration": true
		},
		{
			"primaryName": "heading",
			"names": ["seth"],
			"to": "setHeading"
		},
		{
			"primaryName": "hideturtle",
			"names": ["ht"],
			"to": "hideTurtle"
		},
		{
			"primaryName": "home",
			"to": "home"
		},
		{
			"primaryName": "if",
			"to": "if"
		},
		{
			"primaryName": "int",
			"to": "int"
		},
		{
			"primaryName": "label",
			"to": "label"
		},
		{
			"primaryName": "left",
			"names": ["lt"],
			"to": "left"
		},
		{
			"primaryName": "list",
			"to": "list"
		},
		{
			"primaryName": "log10",
			"to": "log10"
		},
		{
			"primaryName": "not",
			"to": "not"
		},
		{
			"primaryName": "output",
			"to": "output"
		},
		{
			"primaryName": "pencap",
			"names": ["linecap"],
			"to": "setLineCap"
		},
		{
			"primaryName": "pencolor",
			"to": "setPenColor"
		},
		{
			"primaryName": "pendown",
			"names": ["pd"],
			"to": "penDown"
		},
		{
			"primaryName": "penjoint",
			"names": ["linejoint"],
			"to": "setLineJoinStyle"
		},
		{
			"primaryName": "pensize",
			"to": "setPenSize"
		},
		{
			"primaryName": "penstyle",
			"description": "Sets the line drawing type to solid, dotted, or dashed."
		},
		{
			"primaryName": "pentransparency",
			"args": [
				{"name": "transparencyPercentage", "types": "num"}
			],
			"description": "Sets the transparency of the actual pen color"
		},
		{
			"primaryName": "penup",
			"names": ["pu"],
			"to": "penup"
		},
		{
			"primaryName": "pi",
			"to": "pi"
		},
		{
			"primaryName": "position",
			"names": ["pos"],
			"to": "pos"
		},
		{
			"primaryName": "print",
			"to": "print"
		},
		{
			"primaryName": "random",
			"to": "random"
		},
		{
			"primaryName": "rectangle",
			"args": [
				{
					"name": "info",
					"types": "list<num>(minlen=2)",
					"maxLen": 3
				}
			],
			"description": "Should translate to rect or roundRect."
		},
		{
			"primaryName": "repcount",
			"to": "repcount"
		},
		{
			"primaryName": "repeat",
			"to": "repeat"
		},
		{
			"primaryName": "right",
			"names": ["rt"],
			"to": "right"
		},
		{
			"primaryName": "round",
			"to": "round"
		},
		{
			"primaryName": "set",
			"args": [
				{"name": "val", "types": "list"}
			],
			"description": "Converts to Python set",
			"removeCallTokenOnly": true
		},
		{
			"primaryName": "showturtle",
			"names": ["st"],
			"to": "showTurtle"
		},
		{
			"primaryName": "sin",
			"to": "radSin"
		},
		{
			"primaryName": "sleep",
			"args": [
				{"name": "interval"}
			],
			"description": "Waits or sleeps for the specified interval",
			"removeInMigration": true
		},
		{
			"primaryName": "sqrt",
			"to": "sqrt"
		},
		{
			"primaryName": "square",
			"args": [
				{
					"name": "size",
					"types": "num"
				}
			],
			"description": "Draws a square"
		},
		{
			"primaryName": "stop",
			"to": "stop"
		},
		{
			"primaryName": "str",
			"to": "str"
		},
		{
			"primaryName": "tuple",
			"args": [
				{"name": "val", "types": "list"}
			],
			"description": "Converts to Python tuple",
			"removeCallTokenOnly": true
		},
		{
			"primaryName": "while",
			"to": "while"
		}
	],
	"keywords": [],
	"operators": [{
		"symbol": "and",
		"convertToCommand": "and"
	}, {
		"symbol": "or",
		"convertToCommand": "or"
	}]
}