{
	"name": "Calormen JSLogo",
	"description": "A Logo interpreter that runs in a web browser",
	"externalLink": "https://www.calormen.com/jslogo/language.html",
	"commands": [
		{
			"primaryName": ".maybeout",
			"description": "Like output if expr returns a value, like stop otherwise"
		},
		{
			"primaryName": ".setfirst",
			"description": "Sets the first item of the list to value"
		},
		{
			"primaryName": ".setitem",
			"description": "Sets the indexth item of the array to value (circular arrays allowed)"
		},
		{
			"primaryName": "abs",
			"to": "abs"
		},
		{
			"primaryName": "apply",
			"description": "Call procname with the members of list as inputs"
		},
		{
			"primaryName": "arcTan",
			"to": "arcTan"
		},
		{
			"primaryName": "arity",
			"description": "Return a list with the procedure's minimum, default, and maximum number of inputs; maximum is -1 if unlimited."
		},
		{
			"primaryName": "array",
			"description": "Creates an array of specified size and default origin"
		},
		{
			"primaryName": "ascii",
			"to": "ascii"
		},
		{
			"primaryName": "ashift",
			"to": "ashift"
		},
		{
			"primaryName": "ask",
			"description": "Execute statements as turtle number turtleindex."
		},
		{
			"primaryName": "back",
			"names": ["bk"],
			"to": "backward"
		},
		{
			"primaryName": "bitand",
			"to": "bitand"
		},
		{
			"primaryName": "bitor",
			"to": "bitor"
		},
		{
			"primaryName": "bitxor",
			"to": "bitxor"
		},
		{
			"primaryName": "buriedp",
			"names": ["buried?"],
			"description": "Return 1 if the first named user-defined procedure, variable, or property list exists and is buried, 0 otherwise"
		},
		{
			"primaryName": "bury",
			"description": "Takes a three member list, where the first is a list of user-defined procedure names to bury, the second is a list of defined variables to bury, the third is a list of property lists to bury."
		},
		{
			"primaryName": "buryall",
			"description": "Bury all user-defined procedures, variables, and property lists."
		},
		{
			"primaryName": "buryname",
			"description": "Bury the given variable (or list of variables)."
		},
		{
			"primaryName": "button",
			"description": "Outputs a number indicating the pressed mouse buttons (1 = left, 2 = right, etc) or 0 for none."
		},
		{
			"primaryName": "buttonp",
			"names": ["button?"],
			"description": "Outputs 1 if any mouse button is down, 0 otherwise"
		},
		{
			"primaryName": "bye",
			"description": "Terminate the program"
		},
		{
			"primaryName": "case",
			"description": "For each clause in order: If the clause is of the form [ ELSE expr ] then expr is evaluated and returned. Otherwise, if the clause is of the form [ [ matches ] expr ] and value is a member of matches then expr is evaluated and returned."
		},
		{
			"primaryName": "catch",
			"description": "Run instructions, but if an error with matching tag is thrown, return the thrown value (if any). Use \"ERROR to catch errors from regular procedures."
		},
		{
			"primaryName": "char",
			"to": "char"
		},
		{
			"primaryName": "clearScreen",
			"names": ["cs"],
			"to": "clearScreen"
		},
		{
			"primaryName": "cleartext",
			"names": ["ct"],
			"description": "Clears text"
		},
		{
			"primaryName": "clearTurtles",
			"description": "Remove all turtles, keeping the current one as index 1."
		},
		{
			"primaryName": "clickpos",
			"description": "Outputs a list of the x, y coordinates of the last mouse press"
		},
		{
			"primaryName": "combine",
			"to": "combine"
		},
		{
			"primaryName": "copydef",
			"description": "Copy a procedure. If a procedure newname already existed it will be overridden. Primitive procedures can't be overridden unless REDEFP is TRUE."
		},
		{
			"primaryName": "cos",
			"to": "cos"
		},
		{
			"primaryName": "count",
			"to": "count"
		},
		{
			"primaryName": "crossmap",
			"description": "Call procname repeatedly with inputs from the lists, in all possible combinations"
		},
		{
			"primaryName": "def",
			"description": "Outputs the definition of a named procedure as a string"
		},
		{
			"primaryName": "dequeue",
			"to": "dequeue"
		},
		{
			"primaryName": "do.while",
			"to": "do.while"
		},
		{
			"primaryName": "dotimes",
			"description": "Run the statements the specified number of times. The variable varname is set to the current iteration number."
		},
		{
			"primaryName": "erall",
			"description": "Erase all non-buried user-defined procedures, variables and property lists"
		},
		{
			"primaryName": "erns",
			"description": "Erase all non-buried variables"
		},
		{
			"primaryName": "erpls",
			"description": "Erase all non-buried property lists"
		},
		{
			"primaryName": "erps",
			"description": "Erase all non-buried user-defined procedures"
		},
		{
			"primaryName": "exp",
			"to": "exp"
		},
		{
			"primaryName": "filter",
			"description": "Outputs a list composed of the input list where procname called on the item returns non-zero (true)"
		},
		{
			"primaryName": "first",
			"to": "first"
		},
		{
			"primaryName": "for",
			"description": "Typical for loop. The controllist specifies three or four members: the local varname, start value, limit value, and optional step size",
			"to": "for"
		},
		{
			"primaryName": "foreach",
			"description": "call procname for each item in the list"
		},
		{
			"primaryName": "forever",
			"to": "forever"
		},
		{
			"primaryName": "forward",
			"names": ["fd"],
			"to": "forward"
		},
		{
			"primaryName": "fput",
			"to": "fput"
		},
		{
			"primaryName": "getscreencolor",
			"names": ["background", "bg", "getsc"],
			"to": "screenColor"
		},
		{
			"primaryName": "global",
			"description": "Reserve the variable at the global scope. This doesn't do anything useful"
		},
		{
			"primaryName": "globals",
			"description": "Outputs a list of defined non-buried global variables."
		},
		{
			"primaryName": "gprop",
			"to": "getProperty"
		},
		{
			"primaryName": "greaterp",
			"names": ["greater?"],
			"description": "Compares to see if one value is strictly greater than another"
		},
		{
			"primaryName": "hideTurtle",
			"names": ["ht"],
			"to": "hideTurtle"
		},
		{
			"primaryName": "if",
			"to": "if"
		},
		{
			"primaryName": "ifelse",
			"to": "ifelse"
		},
		{
			"primaryName": "ignore",
			"description": "Evaluate and ignore results of the expression"
		},
		{
			"primaryName": "int",
			"to": "int"
		},
		{
			"primaryName": "invoke",
			"description": "Call procname with the specified inputs as inputs",
			"to": "invoke"
		},
		{
			"primaryName": "iseq",
			"to": "iseq"
		},
		{
			"primaryName": "item",
			"to": "item"
		},
		{
			"primaryName": "label",
			"to": "label"
		},
		{
			"primaryName": "last",
			"to": "last"
		},
		{
			"primaryName": "left",
			"names": ["lt"],
			"to": "left"
		},
		{
			"primaryName": "less?",
			"to": "less?"
		},
		{
			"primaryName": "list",
			"to": "list"
		},
		{
			"primaryName": "listp",
			"names": ["list?"],
			"to": "list?"
		},
		{
			"primaryName": "listtoarray",
			"description": "Converts a list to an array"
		},
		{
			"primaryName": "ln",
			"to": "ln"
		},
		{
			"primaryName": "local",
			"description": "A subsequent make will create the variable(s) in the local scope instead of the global scope"
		},
		{
			"primaryName": "localmake",
			"description": "Define a variable in the local scope (shortcut for local then make",
			"to": "localmake"
		},
		{
			"primaryName": "log10",
			"to": "log10"
		},
		{
			"primaryName": "lowercase",
			"to": "lowercase"
		},
		{
			"primaryName": "lput",
			"to": "lput"
		},
		{
			"primaryName": "lshift",
			"to": "lshift"
		},
		{
			"primaryName": "make",
			"to": "make"
		},
		{
			"primaryName": "map",
			"description": "Outputs a list composed of the results of calling procname for each item in the list"
		},
		{
			"primaryName": "mdarray",
			"description": "Creates a multi-dimensional array"
		},
		{
			"primaryName": "mditem",
			"description": "Outputs an item from a multi-dimensional array"
		},
		{
			"primaryName": "mdsetitem",
			"description": "Sets an item in a multi-dimensional array to value (circular arrays prevented)"
		},
		{
			"primaryName": "member",
			"description": "Outputs the list (or word) from the first occurence of thing to the end, or empty list (or word)"
		},
		{
			"primaryName": "memberp",
			"names": ["member?"],
			"to": "member?"
		},
		{
			"primaryName": "minus",
			"to": "difference"
		},
		{
			"primaryName": "modulo",
			"to": "modulo"
		},
		{
			"primaryName": "mousepos",
			"description": "Outputs a list of the x, y coordinates of the last mouse position"
		},
		{
			"primaryName": "namelist",
			"description": "Return a contents-style list with the given variable names."
		},
		{
			"primaryName": "namep",
			"names": ["name?"],
			"description": "Test if there is a variable with the given name"
		},
		{
			"primaryName": "names",
			"description": "Outputs a list with two members. The first is an empty list. The second is a list of defined non-buried variables"
		},
		{
			"primaryName": "output",
			"names": ["op"],
			"to": "output"
		},
		{
			"primaryName": "palette",
			"description": "Outputs the a palette entry. This will be a CSS color string, not necessarily the value passed in"
		},
		{
			"primaryName": "pencolor",
			"names": ["pc"],
			"to": "penColor"
		},
		{
			"primaryName": "pendown",
			"names": ["pd"],
			"to": "penDown"
		},
		{
			"primaryName": "penErase",
			"names": ["pe"],
			"description": ""
		},
		{
			"primaryName": "penmode",
			"description": "Outputs PAINT, ERASE or REVERSE"
		},
		{
			"primaryName": "penPaint",
			"names": ["ppt"],
			"description": ""
		},
		{
			"primaryName": "penReverse",
			"names": ["px"],
			"description": "Change the turtle drawing mode - paint (the default) leaves a colored trail, erase restores the background, reverse inverts the background."
		},
		{
			"primaryName": "penSize",
			"to": "penSize"
		},
		{
			"primaryName": "penup",
			"names": ["pu"],
			"to": "penUp"
		},
		{
			"primaryName": "pick",
			"to": "pick"
		},
		{
			"primaryName": "plist",
			"to": "plist"
		},
		{
			"primaryName": "plistp",
			"names": ["plist?"],
			"description": "Test if there is a property list with the given name."
		},
		{
			"primaryName": "plists",
			"description": "Outputs a list with three members. The first is an empty list. The second is an empty list. The third is a list of non-empty non-buried property list names"
		},
		{
			"primaryName": "power",
			"to": "power"
		},
		{
			"primaryName": "pprop",
			"to": "setProperty"
		},
		{
			"primaryName": "primitivep",
			"names": ["primitive?"],
			"description": "Test if there is a built-in procedure(a command) with the given name."
		},
		{
			"primaryName": "print",
			"names": ["pr"],
			"to": "print"
		},
		{
			"primaryName": "procedurep",
			"names": ["procedure?"],
			"description": "Test if there is a procedure with the given name"
		},
		{
			"primaryName": "product",
			"to": "product"
		},
		{
			"primaryName": "push",
			"to": "queue"
		},
		{
			"primaryName": "queue",
			"to": "queue"
		},
		{
			"primaryName": "radArcTan",
			"to": "radArcTan"
		},
		{
			"primaryName": "radCos",
			"to": "radCos"
		},
		{
			"primaryName": "radSin",
			"to": "radSin"
		},
		{
			"primaryName": "radTan",
			"to": "radTan"
		},
		{
			"primaryName": "random",
			"description": "Returns a random number between 0 and 1 less than the value specified, if 1 parameter is specified.  If 2 parameters are specified, the output is between the 2 numbers specified.  The translation to WebLogo's 'random' command works only for 1 input.",
			"to": "random"
		},
		{
			"primaryName": "reduce",
			"description": "Call procname repeatedly with two inputs - the current value and the next list item. If initial is not specified, the first list element is used instead"
		},
		{
			"primaryName": "remprop",
			"to": "removeProperty"
		},
		{
			"primaryName": "repcount",
			"to": "repcount"
		},
		{
			"primaryName": "repeat",
			"to": "repeat"
		},
		{
			"primaryName": "reverse",
			"to": "reverse"
		},
		{
			"primaryName": "right",
			"names": ["rt"],
			"to": "right"
		},
		{
			"primaryName": "round",
			"to": "round"
		},
		{
			"primaryName": "rseq",
			"to": "rseq"
		},
		{
			"primaryName": "setfont",
			"to": "setFontFamily"
		},
		{
			"primaryName": "setHeading",
			"names": ["seth"],
			"to": "setHeading"
		},
		{
			"primaryName": "setItem",
			"to": "setItem"
		},
		{
			"primaryName": "setPalette",
			"description": "Change one of the standard color entries (8 or above) to the given color"
		},
		{
			"primaryName": "setPenColor",
			"to": "setPenColor"
		},
		{
			"primaryName": "setPenSize",
			"to": "setPenSize"
		},
		{
			"primaryName": "setPos",
			"to": "setPos"
		},
		{
			"primaryName": "setScreenColor",
			"names": ["setsc"],
			"to": "setScreenColor"
		},
		{
			"primaryName": "setTurtle",
			"description": "Switch to the turtle numbered index (starting from 1 for the default turtle present at start). If the turtle has not been used yet, it will be created at the center, facing upwards, visible, with the pen down."
		},
		{
			"primaryName": "setX",
			"to": "setX"
		},
		{
			"primaryName": "setXY",
			"to": "setXY"
		},
		{
			"primaryName": "setY",
			"to": "setY"
		},
		{
			"primaryName": "show",
			"to": "show"
		},
		{
			"primaryName": "shownp",
			"names": ["shown?"],
			"to": "shown?"
		},
		{
			"primaryName": "sin",
			"to": "sin"
		},
		{
			"primaryName": "sqrt",
			"to": "sqrt"
		},
		{
			"primaryName": "stop",
			"to": "stop"
		},
		{
			"primaryName": "substringp",
			"names": ["substring?"],
			"to": "substring?"
		},
		{
			"primaryName": "sum",
			"to": "sum"
		},
		{
			"primaryName": "tan",
			"to": "tan"
		},
		{
			"primaryName": "thing",
			"description": "Outputs the value of variable. :foo is a shortcut for thing \"foo"
		},
		{
			"primaryName": "throw",
			"description": "Throw an error with the given tag which may be caught. An optional return value can be passed"
		},
		{
			"primaryName": "touches",
			"description": "Outputs a list of current touch coordinates"
		},
		{
			"primaryName": "turtle",
			"description": "Outputs the index of the currently-active turtle"
		},
		{
			"primaryName": "turtlemode",
			"description": "Outputs WRAP, WINDOW or FENCE"
		},
		{
			"primaryName": "turtles",
			"description": "Outputs the largest index that has been passed to setturtle"
		},
		{
			"primaryName": "type",
			"to": "type"
		},
		{
			"primaryName": "until",
			"to": "until"
		},
		{
			"primaryName": "uppercase",
			"to": "uppercase"
		},
		{
			"primaryName": "wait",
			"description": "Pauses execution. time is in 60ths of a second"
		},
		{
			"primaryName": "while",
			"to": "while",
			"description": "Runs the specified statements only while the expression remains non-zero (true)"
		},
		{
			"primaryName": "word",
			"to": "word"
		},
		{
			"primaryName": "wordp",
			"names": ["word?"],
			"to": "word?"
		},
		{
			"primaryName": "wrap",
			"description": "If the turtle moves off the edge of the screen it will continue on the other side. (default)"
		},
		{
			"primaryName": "xor",
			"to": "xor"
		}
	],
	"keywords": []
}
