{
	"name": "Papert",
	"description": "A Logo programming environment that was hosted at http://logo.twentygototen.org",
	"externalLink": "https://github.com/rmmh/papert",
	"commands": [
		{"primaryName": "and",
		"to": "and"},
		{"primaryName": "arc",
		"args": [
			{"name": "radius", "types": "num"},
			{"name": "angle", "types": "num"}
		],
		"reverseArgs": true,
		"to": "arc"},
		{"primaryName": "arctan",
		"to": "arctan"},
		{"primaryName": "array",
		"to": "list"},
		{"primaryName": "backward",
		"names": ["back", "bk", "bw"],
		"to": "backward"},
		{"primaryName": "bitand",
		"to": "bitAnd"},
		{"primaryName": "bitnot",
		"to": "bitNot"},
		{"primaryName": "bitor",
		"to": "bitOr"},
		{"primaryName": "bitxor",
		"to": "bitXor"},
		{"primaryName": "butfirst",
		"to": "butfirst"},
		{"primaryName": "butlast",
		"to": "butlast"},
		{"primaryName": "circle",
		"to": "circle"},
		{"primaryName": "clearscreen",
		"names": ["clear", "cs"],
		"to": "clearScreen"},
		{"primaryName": "cos",
		"to": "cos"},
		{"primaryName": "difference",
		"names": ["sub"],
		"to": "minus"},
		{"primaryName": "do.until",
		"description": "Loops until a condition is met.  This is a bit like WebLogo's do.while except the condition has the opposite interpretation."},
		{"primaryName": "do.while",
		"to": "do.while"},
		{"primaryName": "empty?",
		"names": ["emptyp"],
		"to": "empty?"},
		{"primaryName": "equal?",
		"names": ["equalp"],
		"to": "equal?"},
		{"primaryName": "exp",
		"to": "exp"},
		{"primaryName": "first",
		"names": ["head"],
		"to": "first"},
		{"primaryName": "forever",
		"to": "forever"},
		{"primaryName": "forward",
		"names": ["fd", "fw"],
		"to": "forward"},
		{"primaryName": "fput",
		"to": "fput"},
		{
			"primaryName": "global",
			"args": [
				{"name": "variableName", "types": "string"}
			],
			"description": "Declares 1 or more global variables.",
			"reason": "WebLogo's make command is similar but too different to automatically translate to unconditionally.  One difference is WebLogo's make requires an initial value.  WebLogo's make also works with local variables in procedures so it isn't exclusive to global variables.",
			"removeInMigration": true
		},
		{
			"primaryName": "greater?",
			"names": ["greaterp"],
			"to": "greater?"
		},
		{
			"primaryName": "hideTurtle",
			"names": ["ht"],
			"to": "hideTurtle"
		},
		{
			"primaryName": "home",
			"to": "home"
		},
		{
			"primaryName": "if",
			"to": "if"
		},
		{
			"primaryName": "ifelse",
			"to": "ifelse"
		},
		{
			"primaryName": "int",
			"to": "floor"
		},
		{
			"primaryName": "item",
			"to": "item"
		},
		{
			"primaryName": "left",
			"names": ["lt"],
			"to": "left"
		},
		{
			"primaryName": "less?",
			"names": ["lessp"],
			"to": "less?"
		},
		{
			"primaryName": "lessequal?",
			"names": ["lessequalp"],
			"to": "lessEqual?"
		},
		{
			"primaryName": "ln",
			"to": "ln"
		},
		{
			"primaryName": "log10",
			"to": "log10"
		},
		{
			"primaryName": "lput",
			"to": "lput"
		},
		{
			"primaryName": "make",
			"to": "make"
		},
		{"primaryName": "minus",
			"args": [
				{"name": "num", "types": "num"}
			],
			"returnTypes": "num",
			"description": "Returns the negative value of the input.",
			"reason": "The unary - operator is what minus from Papert should be translated to.  WebLogo has no similar command.  WebLogo has a minus command but that's for subtraction and similar to a binary - operator; not unary.",
			"convertToUnaryOperator": "-"
		},
		{
			"primaryName": "not",
			"to": "not"
		},
		{
			"primaryName": "notequal?",
			"to": "notequal?"
		},
		{
			"primaryName": "or",
			"to": "or"
		},
		{
			"primaryName": "output",
			"names": ["op"],
			"to": "output"
		},
		{
			"primaryName": "pendown",
			"names": ["pd"],
			"to": "penDown"
		},
		{
			"primaryName": "penup",
			"names": ["pu"],
			"to": "penup"
		},
		{
			"primaryName": "power",
			"to": "power"
		},
		{
			"primaryName": "print",
			"names": ["pr"],
			"to": "print"
		},
		{
			"primaryName": "product",
			"to": "product"
		},
		{
			"primaryName": "radarctan",
			"to": "radArcTan"
		},
		{"primaryName": "radcos",
		"to": "radCos"},
		{"primaryName": "radsin",
		"to": "radSin"},
		{"primaryName": "random",
		"to": "random"},
		{"primaryName": "repeat",
		"to": "repeat"},
		{
			"primaryName": "reset",
			"args": [],
			"description": "Clear the screen, move home.  This is similar to the clearScreen and home commands in WebLogo.",
			"removeInMigration": true
		},
		{"primaryName": "right",
		"names": ["rt"],
		"to": "right"},
		{"primaryName": "round",
		"to": "round"},
		{
			"primaryName": "setheading",
			"to": "setHeading"
		},
		{"primaryName": "setitem",
		"to": "setItem"},
		{"primaryName": "setpos",
		"to": "setPos"},
		{"primaryName": "setx",
		"to": "setx"},
		{"primaryName": "setxy",
		"to": "setxy"},
		{"primaryName": "sety",
		"to": "sety"},
		{"primaryName": "showTurtle",
		"names": ["st"],
		"to": "showTurtle"},
		{"primaryName": "sin",
		"to": "sin"},
		{"primaryName": "sqrt",
		"to": "sqrt"},
		{
			"primaryName": "srand",
			"names": ["rerandom"],
			"args": [
				{"name": "seed", "types": "int"}
			],
			"description": "Assigns a seed for random number generation",
			"to": "srand"
		},
		{"primaryName": "stop",
		"to": "stop"},
		{"primaryName": "sum",
		"to": "sum"},
		{"primaryName": "until",
		"to": "until"},
		{"primaryName": "while",
		"to": "while"}
	],
	"operators": [
		{"symbol": "!=", "to": "<>"},
		{
			"symbol": "%",
			"description": "Should be translated to the modulo or remainder commands in WebLogo.",
			"convertToCommand": "modulo"
		},
		{"symbol": "*", "to": "*"},
		{"symbol": "+", "to": "+"},
		{"symbol": "-", "to": "-"},
		{"symbol": "/", "to": "/"},
		{"symbol": "<", "to": "<"},
		{"symbol": "<=", "to": "<="},
		{"symbol": "<>", "to": "<>"},
		{"symbol": "=", "to": "="},
		{"symbol": ">", "to": ">"},
		{"symbol": ">=", "to": ">="}
	],
	"keywords": []
}