[
	{
		"symbol": "-",
		"precedence": 8,
		"unary": {}
	},
	{
		"symbol": "-=",
		"isAssignment": true,
		"description": "Subtract and assign",
		"precedence": 1
	},
	{
		"symbol": ":=",
		"precedence": 1,
		"description": "Assign and return assigned value"
	},
	{
		"symbol": "!=",
		"precedence": 3,
		"description": "Not equal comparison",
		"returnTypes": "bool"
	},
	{
		"symbol": "@",
		"precedence": 3,
		"description": "matrix multiplication"
	},
	{
		"symbol": "*",
		"precedence": 9,
		"unary": {
			"description": "Iterable unpacking operator"
		}
	},
	{
		"symbol": "**",
		"precedence": 11,
		"toCommand": "power",
		"returnTypes": "num"
	},
	{
		"symbol": "**=",
		"precedence": 1,
		"isAssignment": true,
		"description": "Assign power"
	},
	{
		"symbol": "*=",
		"precedence": 1,
		"isAssignment": true,
		"description": "Assign multiply"
	},
	{
		"symbol": "/",
		"precedence": 9,
		"returnTypes": "num"
	},
	{
		"symbol": "//",
		"precedence": 9,
		"returnTypes": "num"
	},
	{
		"symbol": "//=",
		"precedence": 1,
		"isAssignment": true,
		"description": "Assign integer divide"
	},
	{
		"symbol": "/=",
		"precedence": 1,
		"isAssignment": true,
		"description": "Assign divide"
	},
	{
		"symbol": "&",
		"precedence": 7,
		"description": "Bitwise and",
		"returnTypes": "num"
	},
	{
		"symbol": "&=",
		"precedence": 1,
		"isAssignment": true,
		"description": "Assign bitwise and"
	},
	{
		"symbol": "%",
		"precedence": 9,
		"description": "modulo",
		"returnTypes": "num"
	},
	{
		"symbol": "%=",
		"precedence": 1,
		"isAssignment": true,
		"description": "Assign modulo"
	},
	{
		"symbol": "^",
		"precedence": 6,
		"description": "Bitwise xor",
		"returnTypes": "num"
	},
	{
		"symbol": "^=",
		"precedence": 1,
		"isAssignment": true,
		"description": "Assign bitwise xor"
	},
	{
		"symbol": "+",
		"precedence": 8,
		"returnTypes": "num|string"
	},
	{
		"symbol": "+=",
		"isAssignment": true,
		"description": "Add and assign",
		"precedence": 1
	},
	{
		"symbol": "<",
		"precedence": 4,
		"description": "less than",
		"returnTypes": "bool"
	},
	{
		"symbol": "<<",
		"precedence": 8,
		"description": "left shift",
		"returnTypes": "num"
	},
	{
		"symbol": "<=",
		"precedence": 4,
		"description": "less than or equal",
		"returnTypes": "bool"
	},
	{
		"symbol": "=",
		"isAssignment": true,
		"precedence": 1,
		"description": "Assign"
	},
	{
		"symbol": "==",
		"precedence": 4,
		"description": "Equality comparison",
		"returnTypes": "bool"
	},
	{
		"symbol": ">",
		"precedence": 4,
		"description": "greater than",
		"returnTypes": "bool"
	},
	{
		"symbol": ">=",
		"precedence": 4,
		"description": "greater than or equal",
		"returnTypes": "bool"
	},
	{
		"symbol": ">>",
		"precedence": 8,
		"description": "shift right",
		"returnTypes": "num"
	},
	{
		"symbol": "|",
		"precedence": 5,
		"description": "Bitwise or",
		"returnTypes": "num"
	},
	{
		"symbol": "|=",
		"isAssignment": true,
		"precedence": 1,
		"description": "Assign bitwise or"
	},
	{
		"symbol": "~",
		"precedence": 10,
		"isNotBinary": true,
		"unary": {
			"description": "Bitwise Inversion",
			"returnTypes": "num"
		}
	},
	{
		"symbol": "and",
		"precedence": 3,
		"description": "Logical and",
		"returnTypes": "bool"
	},
	{
		"symbol": "del",
		"precedence": 4,
		"description": "Slice deletion",
		"isNotBinary": true,
		"unary": {}
	},
	{
		"symbol": "in",
		"precedence": 2,
		"description": "Checks if a value is in a list, tuple, or string",
		"returnTypes": "bool"
	},
	{
		"symbol": "is",
		"precedence": 2,
		"returnTypes": "bool"
	},
	{
		"symbol": "not",
		"precedence": 3,
		"isNotBinary": true,
		"unary": {
			"returnTypes": "bool"
		}
	},
	{
		"symbol": "not in",
		"precedence": 2,
		"description": "Checks that a value is NOT in a list, tuple, or string",
		"returnTypes": "bool"
	},
	{
		"symbol": "or",
		"precedence": 2,
		"description": "Logical or",
		"returnTypes": "bool"
	}
]